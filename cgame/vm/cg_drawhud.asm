code
proc CG_HDrawField 56 20
file "../cg_drawhud.c"
line 17
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_draw.c -- draw all of the graphical elements during
;4:// active (after loading) gameplay
;5:
;6:#include "cg_local.h"
;7:#include "..\game\bg_promode.h" // CPM
;8:
;9:/*
;10:==============
;11:CG_DrawField
;12:
;13:Draws large numbers for status bar and powerups
;14:==============
;15:*/
;16:#ifndef MISSIONPACK
;17:static void CG_HDrawField (int x, int y, int width, int value, int superhud) {
line 22
;18:	char	num[16], *ptr;
;19:	int		l;
;20:	int		frame;
;21:
;22:	if ( width < 1 ) {
ADDRFP4 8
INDIRI4
CNSTI4 1
GEI4 $78
line 23
;23:		return;
ADDRGP4 $77
JUMPV
LABELV $78
line 27
;24:	}
;25:
;26:	// draw number string
;27:	if ( width > 5 ) {
ADDRFP4 8
INDIRI4
CNSTI4 5
LEI4 $80
line 28
;28:		width = 5;
ADDRFP4 8
CNSTI4 5
ASGNI4
line 29
;29:	}
LABELV $80
line 31
;30:
;31:	switch ( width ) {
ADDRLP4 28
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 1
LTI4 $82
ADDRLP4 28
INDIRI4
CNSTI4 4
GTI4 $82
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $106-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $106
address $84
address $91
address $95
address $99
code
LABELV $84
line 33
;32:	case 1:
;33:		value = value > 9 ? 9 : value;
ADDRFP4 12
INDIRI4
CNSTI4 9
LEI4 $86
ADDRLP4 32
CNSTI4 9
ASGNI4
ADDRGP4 $87
JUMPV
LABELV $86
ADDRLP4 32
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $87
ADDRFP4 12
ADDRLP4 32
INDIRI4
ASGNI4
line 34
;34:		value = value < 0 ? 0 : value;
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $89
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 $90
JUMPV
LABELV $89
ADDRLP4 36
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $90
ADDRFP4 12
ADDRLP4 36
INDIRI4
ASGNI4
line 35
;35:		break;
ADDRGP4 $83
JUMPV
LABELV $91
line 37
;36:	case 2:
;37:		value = value > 99 ? 99 : value;
ADDRFP4 12
INDIRI4
CNSTI4 99
LEI4 $93
ADDRLP4 40
CNSTI4 99
ASGNI4
ADDRGP4 $94
JUMPV
LABELV $93
ADDRLP4 40
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $94
ADDRFP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 39
;38:	//	value = value < -9 ? -9 : value;
;39:		break;
ADDRGP4 $83
JUMPV
LABELV $95
line 41
;40:	case 3:
;41:		value = value > 999 ? 999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 999
LEI4 $97
ADDRLP4 44
CNSTI4 999
ASGNI4
ADDRGP4 $98
JUMPV
LABELV $97
ADDRLP4 44
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $98
ADDRFP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 43
;42:	//	value = value < -99 ? -99 : value;
;43:		break;
ADDRGP4 $83
JUMPV
LABELV $99
line 45
;44:	case 4:
;45:		value = value > 9999 ? 9999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 9999
LEI4 $101
ADDRLP4 48
CNSTI4 9999
ASGNI4
ADDRGP4 $102
JUMPV
LABELV $101
ADDRLP4 48
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $102
ADDRFP4 12
ADDRLP4 48
INDIRI4
ASGNI4
line 47
;46:		//value = value > 999 ? 999 : value;
;47:		value = value < -999 ? -999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 -999
GEI4 $104
ADDRLP4 52
CNSTI4 -999
ASGNI4
ADDRGP4 $105
JUMPV
LABELV $104
ADDRLP4 52
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $105
ADDRFP4 12
ADDRLP4 52
INDIRI4
ASGNI4
line 48
;48:		break;
LABELV $82
LABELV $83
line 51
;49:	}
;50:
;51:	Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $108
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 52
;52:	l = strlen(num);
ADDRLP4 12
ARGP4
ADDRLP4 32
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 32
INDIRI4
ASGNI4
line 53
;53:	if (l > width)
ADDRLP4 4
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $109
line 54
;54:		l = width;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
LABELV $109
line 55
;55:	x += 2 + CHAR_WIDTH*(width - l);
ADDRFP4 0
ADDRFP4 0
INDIRI4
ADDRFP4 8
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 5
LSHI4
CNSTI4 2
ADDI4
ADDI4
ASGNI4
line 57
;56:
;57:	if ( hud[superhud].textalign == 2 ) {
CNSTI4 504
ADDRFP4 16
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $111
line 59
;58:		//align left
;59:		x = hud[superhud].rect[0];
ADDRFP4 0
CNSTI4 504
ADDRFP4 16
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ASGNI4
line 60
;60:	} else if ( hud[superhud].textalign == 1 ) {
ADDRGP4 $112
JUMPV
LABELV $111
CNSTI4 504
ADDRFP4 16
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $115
line 63
;61:		//align center
;62:		//FIXME?:Centering bug?
;63:		x = hud[superhud].rect[0] + ( (hud[superhud].rect[2] * .5) - ((l * hud[superhud].fontsize[0]) * .5) );
ADDRLP4 36
CNSTI4 504
ADDRFP4 16
INDIRI4
MULI4
ASGNI4
ADDRLP4 40
CNSTF4 1056964608
ASGNF4
ADDRFP4 0
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
MULF4
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
CVIF4 4
MULF4
SUBF4
ADDF4
CVFI4 4
ASGNI4
line 64
;64:	} else {
ADDRGP4 $116
JUMPV
LABELV $115
line 66
;65:		//align right
;66:		x = (hud[superhud].rect[0] + hud[superhud].rect[2]) - (l * hud[superhud].fontsize[0]);
ADDRLP4 36
CNSTI4 504
ADDRFP4 16
INDIRI4
MULI4
ASGNI4
ADDRFP4 0
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
SUBI4
ASGNI4
line 67
;67:	}
LABELV $116
LABELV $112
line 69
;68:
;69:	ptr = num;
ADDRLP4 0
ADDRLP4 12
ASGNP4
ADDRGP4 $127
JUMPV
LABELV $126
line 71
;70:	while (*ptr && l)
;71:	{
line 72
;72:		if (*ptr == '-')
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 45
NEI4 $129
line 73
;73:			frame = STAT_MINUS;
ADDRLP4 8
CNSTI4 10
ASGNI4
ADDRGP4 $130
JUMPV
LABELV $129
line 75
;74:		else
;75:			frame = *ptr -'0';
ADDRLP4 8
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
LABELV $130
line 77
;76:
;77:		CG_DrawPic( x, y, hud[superhud].fontsize[0], hud[superhud].fontsize[1], cgs.media.numberShaders[frame] );
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
CNSTI4 504
ADDRFP4 16
INDIRI4
MULI4
ASGNI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+156680+356
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 78
;78:		x += hud[superhud].fontsize[0];
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 504
ADDRFP4 16
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ADDI4
ASGNI4
line 80
;79:		
;80:		ptr++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 81
;81:		l--;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 82
;82:	}
LABELV $127
line 70
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $137
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $126
LABELV $137
line 83
;83:}
LABELV $77
endproc CG_HDrawField 56 20
proc CG_HDrawStatusBarHead 60 24
line 94
;84:#endif // MISSIONPACK
;85:
;86:/*
;87:================
;88:CG_DrawStatusBarHead
;89:
;90:================
;91:*/
;92:#ifndef MISSIONPACK
;93:
;94:static void CG_HDrawStatusBarHead( float x, int superhud ) {
line 100
;95:	vec3_t		angles;
;96:	playerState_t	*ps;
;97:	float		size, stretch;
;98:	float		frac;
;99:
;100:	ps = &cg.snap->ps;
ADDRLP4 24
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 102
;101:
;102:	VectorClear( angles );
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 4+8
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 28
INDIRF4
ASGNF4
line 104
;103:
;104:	if ( cg.damageTime && cg.time - cg.damageTime < DAMAGE_TIME ) {
ADDRGP4 cg+130840
INDIRF4
CNSTF4 0
EQF4 $142
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg+130840
INDIRF4
SUBF4
CNSTF4 1140457472
GEF4 $142
line 105
;105:		frac = (float)(cg.time - cg.damageTime ) / DAMAGE_TIME;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg+130840
INDIRF4
SUBF4
CNSTF4 1140457472
DIVF4
ASGNF4
line 106
;106:		size = ICON_SIZE * 1.25 * ( 1.5 - frac * 0.5 );
ADDRLP4 16
CNSTF4 1114636288
CNSTF4 1069547520
CNSTF4 1056964608
ADDRLP4 0
INDIRF4
MULF4
SUBF4
MULF4
ASGNF4
line 108
;107:
;108:		stretch = size - ICON_SIZE * 1.25;
ADDRLP4 20
ADDRLP4 16
INDIRF4
CNSTF4 1114636288
SUBF4
ASGNF4
line 110
;109:		// kick in the direction of damage
;110:		x -= stretch * 0.5 + cg.damageX * stretch * 0.5;
ADDRLP4 32
CNSTF4 1056964608
ASGNF4
ADDRLP4 36
ADDRLP4 20
INDIRF4
ASGNF4
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDRLP4 32
INDIRF4
ADDRGP4 cg+130844
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
MULF4
ADDF4
SUBF4
ASGNF4
line 112
;111:
;112:		cg.headStartYaw = 180 + cg.damageX * 45;
ADDRGP4 cg+130876
CNSTF4 1110704128
ADDRGP4 cg+130844
INDIRF4
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 114
;113:
;114:		cg.headEndYaw = 180 + 20 * cos( crandom()*M_PI );
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 44
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+130864
CNSTF4 1101004800
ADDRLP4 44
INDIRF4
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 115
;115:		cg.headEndPitch = 5 * cos( crandom()*M_PI );
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 52
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+130860
CNSTF4 1084227584
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
line 117
;116:
;117:		cg.headStartTime = cg.time;
ADDRGP4 cg+130880
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 118
;118:		cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+130868
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
CNSTF4 1157234688
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 119
;119:	} else {
ADDRGP4 $143
JUMPV
LABELV $142
line 120
;120:		if ( cg.time >= cg.headEndTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+130868
INDIRI4
LTI4 $158
line 122
;121:			// select a new head angle
;122:			cg.headStartYaw = cg.headEndYaw;
ADDRGP4 cg+130876
ADDRGP4 cg+130864
INDIRF4
ASGNF4
line 123
;123:			cg.headStartPitch = cg.headEndPitch;
ADDRGP4 cg+130872
ADDRGP4 cg+130860
INDIRF4
ASGNF4
line 124
;124:			cg.headStartTime = cg.headEndTime;
ADDRGP4 cg+130880
ADDRGP4 cg+130868
INDIRI4
ASGNI4
line 125
;125:			cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+130868
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
CNSTF4 1157234688
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 127
;126:			
;127:			if (ps->stats[STAT_HEALTH] > 0) {
ADDRLP4 24
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
LEI4 $170
line 128
;128:			cg.headEndYaw = 180 + 20 * cos( crandom()*M_PI );
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 40
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+130864
CNSTF4 1101004800
ADDRLP4 40
INDIRF4
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 129
;129:			cg.headEndPitch = 5 * cos( crandom()*M_PI );
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 48
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+130860
CNSTF4 1084227584
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 130
;130:			}
LABELV $170
line 131
;131:		}
LABELV $158
line 133
;132:
;133:		size = ICON_SIZE * 1.25;
ADDRLP4 16
CNSTF4 1114636288
ASGNF4
line 134
;134:	}
LABELV $143
line 137
;135:
;136:	// if the server was frozen for a while we may have a bad head start time
;137:	if ( cg.headStartTime > cg.time ) {
ADDRGP4 cg+130880
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $174
line 138
;138:		cg.headStartTime = cg.time;
ADDRGP4 cg+130880
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 139
;139:	}
LABELV $174
line 141
;140:
;141:	frac = ( cg.time - cg.headStartTime ) / (float)( cg.headEndTime - cg.headStartTime );
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+130880
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+130868
INDIRI4
ADDRGP4 cg+130880
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 142
;142:	frac = frac * frac * ( 3 - 2 * frac );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1077936128
CNSTF4 1073741824
ADDRLP4 0
INDIRF4
MULF4
SUBF4
MULF4
ASGNF4
line 143
;143:	angles[YAW] = cg.headStartYaw + ( cg.headEndYaw - cg.headStartYaw ) * frac;
ADDRLP4 4+4
ADDRGP4 cg+130876
INDIRF4
ADDRGP4 cg+130864
INDIRF4
ADDRGP4 cg+130876
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 144
;144:	angles[PITCH] = cg.headStartPitch + ( cg.headEndPitch - cg.headStartPitch ) * frac;
ADDRLP4 4
ADDRGP4 cg+130872
INDIRF4
ADDRGP4 cg+130860
INDIRF4
ADDRGP4 cg+130872
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 146
;145:
;146:	CG_DrawHead( x, hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], 
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 36
CNSTI4 504
ADDRFP4 4
INDIRI4
MULI4
ASGNI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 148
;147:				cg.snap->ps.clientNum, angles );
;148:}
LABELV $138
endproc CG_HDrawStatusBarHead 60 24
export CG_DrawStatusBars
proc CG_DrawStatusBars 72 20
line 159
;149:#endif // MISSIONPACK
;150:
;151:
;152:/*
;153:=================
;154:CG_DrawStatusBars
;155:This is a fun piece of code =)
;156:--Enjoy. -Evolution/XZero450
;157:=================
;158:*/
;159:void CG_DrawStatusBars ( int superhud ) {
line 161
;160:	int		value1, value2;
;161:	int		max = 200;
ADDRLP4 32
CNSTI4 200
ASGNI4
line 167
;162:	float	x, y, w, h;
;163:	vec4_t	color;
;164:	centity_t	*cent;
;165:	playerState_t	*ps;
;166:
;167:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 48
CNSTI4 728
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 168
;168:	ps = &cg.snap->ps;
ADDRLP4 44
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 169
;169:	value2 = 0;
ADDRLP4 40
CNSTI4 0
ASGNI4
line 170
;170:	x = hud[superhud].rect[0];
ADDRLP4 16
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 171
;171:	y = hud[superhud].rect[1];
ADDRLP4 20
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 172
;172:	color[0] = 0.90f ;
ADDRLP4 0
CNSTF4 1063675494
ASGNF4
line 173
;173:	color[1] = 0.65f;
ADDRLP4 0+4
CNSTF4 1059481190
ASGNF4
line 174
;174:	color[2] = 0.0f;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 175
;175:	color[3] = 1.0f;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 177
;176:
;177:	switch ( hud[superhud].element ) {
ADDRLP4 52
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 60
CNSTI4 40
ASGNI4
ADDRLP4 52
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $237
ADDRLP4 52
INDIRI4
CNSTI4 43
EQI4 $211
ADDRLP4 52
INDIRI4
ADDRLP4 60
INDIRI4
LTI4 $207
LABELV $242
ADDRLP4 52
INDIRI4
CNSTI4 46
EQI4 $228
ADDRGP4 $207
JUMPV
LABELV $211
line 179
;178:		case StatusBar_AmmoBar:
;179:			ps->ammo[cent->currentState.weapon] > 200 ? (value1 = 200):(value1 = ps->ammo[cent->currentState.weapon]);
ADDRLP4 48
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 44
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 200
LEI4 $213
ADDRLP4 36
CNSTI4 200
ASGNI4
ADDRGP4 $214
JUMPV
LABELV $213
ADDRLP4 36
ADDRLP4 48
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 44
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
LABELV $214
line 180
;180:			if ( g_pro_mode.integer ) {
ADDRGP4 g_pro_mode+12
INDIRI4
CNSTI4 0
EQI4 $208
line 181
;181:				if ( cent->currentState.weapon == WP_SHOTGUN ) {
ADDRLP4 48
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 3
NEI4 $218
line 182
;182:					max = 25;
ADDRLP4 32
CNSTI4 25
ASGNI4
line 183
;183:				} else if ( cent->currentState.weapon == WP_GRENADE_LAUNCHER ) {
ADDRGP4 $208
JUMPV
LABELV $218
ADDRLP4 48
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 4
NEI4 $220
line 184
;184:					max = 25;
ADDRLP4 32
CNSTI4 25
ASGNI4
line 185
;185:				} else if ( cent->currentState.weapon == WP_ROCKET_LAUNCHER ) {
ADDRGP4 $208
JUMPV
LABELV $220
ADDRLP4 48
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 5
NEI4 $222
line 186
;186:					max = 25;
ADDRLP4 32
CNSTI4 25
ASGNI4
line 187
;187:				} else if ( cent->currentState.weapon == WP_LIGHTNING ) {
ADDRGP4 $208
JUMPV
LABELV $222
ADDRLP4 48
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
NEI4 $224
line 188
;188:					max = 150;
ADDRLP4 32
CNSTI4 150
ASGNI4
line 189
;189:				} else if ( cent->currentState.weapon == WP_RAILGUN ) {
ADDRGP4 $208
JUMPV
LABELV $224
ADDRLP4 48
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
NEI4 $208
line 190
;190:					max = 25;
ADDRLP4 32
CNSTI4 25
ASGNI4
line 191
;191:				}
line 192
;192:			}
line 193
;193:			break;
ADDRGP4 $208
JUMPV
LABELV $228
line 195
;194:		case StatusBar_HealthBar:
;195:			value1 = ps->stats[STAT_HEALTH];
ADDRLP4 36
ADDRLP4 44
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 196
;196:			max = 200;
ADDRLP4 32
CNSTI4 200
ASGNI4
line 197
;197:			if ( value1 > 100 ) {
ADDRLP4 36
INDIRI4
CNSTI4 100
LEI4 $229
line 198
;198:				color[0] = color[1] = color[2] = 1.0f;
ADDRLP4 64
CNSTF4 1065353216
ASGNF4
ADDRLP4 0+8
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 64
INDIRF4
ASGNF4
line 199
;199:			} else if ( value1 <= 25 && value1 > 0 ) {
ADDRGP4 $208
JUMPV
LABELV $229
ADDRLP4 64
ADDRLP4 36
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 25
GTI4 $208
ADDRLP4 64
INDIRI4
CNSTI4 0
LEI4 $208
line 200
;200:				color[0] = 0.85f;
ADDRLP4 0
CNSTF4 1062836634
ASGNF4
line 201
;201:				color[1] = color[2] = 0.0f;
ADDRLP4 68
CNSTF4 0
ASGNF4
ADDRLP4 0+8
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRF4
ASGNF4
line 202
;202:			}
line 203
;203:			break;
ADDRGP4 $208
JUMPV
LABELV $237
line 205
;204:		case StatusBar_ArmorBar:
;205:			max = 200;
ADDRLP4 32
CNSTI4 200
ASGNI4
line 206
;206:			value1 = ps->stats[STAT_ARMOR];
ADDRLP4 36
ADDRLP4 44
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ASGNI4
line 207
;207:			if ( value1 > 100 ) {
ADDRLP4 36
INDIRI4
CNSTI4 100
LEI4 $208
line 208
;208:				color[0] = color[1] = color[2] = 1.0f;
ADDRLP4 68
CNSTF4 1065353216
ASGNF4
ADDRLP4 0+8
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 68
INDIRF4
ASGNF4
line 209
;209:			}
line 210
;210:			break;
LABELV $207
LABELV $208
line 213
;211:	}
;212:
;213:	color[3] = 0.75f;
ADDRLP4 0+12
CNSTF4 1061158912
ASGNF4
line 215
;214:
;215:	if ( value1 <= 0 ) {
ADDRLP4 36
INDIRI4
CNSTI4 0
GTI4 $244
line 216
;216:		w = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 217
;217:	} else {
ADDRGP4 $245
JUMPV
LABELV $244
line 218
;218:		if ( hud[superhud].doublebar ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+60
ADDP4
INDIRI4
CNSTI4 0
EQI4 $246
line 219
;219:			if ( value1 > (max * .5) ) {//Figure out value2
ADDRLP4 36
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 32
INDIRI4
CVIF4 4
MULF4
LEF4 $249
line 220
;220:				value2 = ( value1 - (max * .5) );
ADDRLP4 40
ADDRLP4 36
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 32
INDIRI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 221
;221:				value1 = max * .5;
ADDRLP4 36
CNSTF4 1056964608
ADDRLP4 32
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 222
;222:			}
LABELV $249
line 224
;223:
;224:			if ( hud[superhud].textstyle == 1 ) {//Vertical bars
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+175
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $251
line 225
;225:				w = (hud[superhud].rect[2] - 4) * .5;//Width
ADDRLP4 24
CNSTF4 1056964608
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
MULF4
ASGNF4
line 226
;226:				h = (hud[superhud].rect[3] / (max * .5) ) * value1;//Height
ADDRLP4 28
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 32
INDIRI4
CVIF4 4
MULF4
DIVF4
ADDRLP4 36
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 227
;227:			} else {
ADDRGP4 $247
JUMPV
LABELV $251
line 228
;228:				h = (hud[superhud].rect[3] - 4) * .5;
ADDRLP4 28
CNSTF4 1056964608
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
MULF4
ASGNF4
line 229
;229:				w = (hud[superhud].rect[2] / (max * .5) ) * value1;
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 32
INDIRI4
CVIF4 4
MULF4
DIVF4
ADDRLP4 36
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 230
;230:			}
line 231
;231:		} else {
ADDRGP4 $247
JUMPV
LABELV $246
line 232
;232:			if ( hud[superhud].textstyle == 1 ) {//vertical bars
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+175
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $262
line 233
;233:				w = hud[superhud].rect[2];//Width
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 234
;234:				h = ( (float)hud[superhud].rect[3] / (float)max ) * value1;//Height
ADDRLP4 28
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRI4
CVIF4 4
DIVF4
ADDRLP4 36
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 235
;235:			} else {
ADDRGP4 $263
JUMPV
LABELV $262
line 237
;236:				//Figure out width
;237:				w = ( (float)hud[superhud].rect[2] / (float)max ) * value1;
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRI4
CVIF4 4
DIVF4
ADDRLP4 36
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 238
;238:				h = hud[superhud].rect[3];
ADDRLP4 28
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 239
;239:			}
LABELV $263
line 240
;240:		}
LABELV $247
line 241
;241:	}
LABELV $245
line 242
;242:	if ( hud[superhud].textstyle == 1 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+175
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $273
line 244
;243:		//Vertical bars
;244:		if ( hud[superhud].textalign == 2 ) {//align top
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $276
line 245
;245:			y = hud[superhud].rect[1];
ADDRLP4 20
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 246
;246:		} else if ( hud[superhud].textalign == 1 ) {//align center
ADDRGP4 $274
JUMPV
LABELV $276
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $281
line 247
;247:			y = ((hud[superhud].rect[1] + hud[superhud].rect[3]) - h) * .5;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 20
CNSTF4 1056964608
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 28
INDIRF4
SUBF4
MULF4
ASGNF4
line 248
;248:		} else {//align bottom
ADDRGP4 $274
JUMPV
LABELV $281
line 249
;249:			y = (hud[superhud].rect[1] + hud[superhud].rect[3]) - h;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 20
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 28
INDIRF4
SUBF4
ASGNF4
line 250
;250:		}
line 251
;251:	} else {
ADDRGP4 $274
JUMPV
LABELV $273
line 253
;252:		//Horizontal bars
;253:		if ( hud[superhud].textalign == 2 ) {//align left
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $292
line 254
;254:			x = hud[superhud].rect[0];
ADDRLP4 16
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 255
;255:		} else if ( hud[superhud].textalign == 1 ) {//align center
ADDRGP4 $293
JUMPV
LABELV $292
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $296
line 256
;256:			x = ((hud[superhud].rect[0] + hud[superhud].rect[2]) - w) * .5;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 16
CNSTF4 1056964608
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 24
INDIRF4
SUBF4
MULF4
ASGNF4
line 257
;257:		} else {//align right
ADDRGP4 $297
JUMPV
LABELV $296
line 258
;258:			x = (hud[superhud].rect[0] + hud[superhud].rect[2]) - w;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 16
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 24
INDIRF4
SUBF4
ASGNF4
line 259
;259:		}
LABELV $297
LABELV $293
line 260
;260:	}
LABELV $274
line 264
;261:
;262:	//Draw bar
;263:	//CG_Printf("%3.3f, %3.3f, %3.3f, %3.3f -- %3.3f, %3.3f, %3.3f, %3.3f", x,y,w,h ,color[0],color[1],color[2],color[3]);
;264:	CG_FillRect(x, y, w, h, color);
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 267
;265:
;266:	//Draw another bar.
;267:	if ( value2 ) {
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $305
line 268
;268:		if ( hud[superhud].textstyle == 1 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+175
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $307
line 270
;269:			//Vertical bars
;270:			x += (w + 4);
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 24
INDIRF4
CNSTF4 1082130432
ADDF4
ADDF4
ASGNF4
line 271
;271:			h = (hud[superhud].rect[3] / (max * .5)) * value2;
ADDRLP4 28
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 32
INDIRI4
CVIF4 4
MULF4
DIVF4
ADDRLP4 40
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 273
;272:			//Align
;273:			if ( hud[superhud].textalign == 2 ) {//align top
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $312
line 274
;274:				y = hud[superhud].rect[1];
ADDRLP4 20
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 275
;275:			} else if ( hud[superhud].textalign == 1 ) {//align center
ADDRGP4 $308
JUMPV
LABELV $312
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $317
line 276
;276:				y = ((hud[superhud].rect[1] + hud[superhud].rect[3]) - h) * .5;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 20
CNSTF4 1056964608
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 28
INDIRF4
SUBF4
MULF4
ASGNF4
line 277
;277:			} else {//align bottom
ADDRGP4 $308
JUMPV
LABELV $317
line 278
;278:				y = (hud[superhud].rect[1] + hud[superhud].rect[3]) - h;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 20
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 28
INDIRF4
SUBF4
ASGNF4
line 279
;279:			}
line 280
;280:		} else {
ADDRGP4 $308
JUMPV
LABELV $307
line 281
;281:			y += (h + 4); //Gap between bars
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1082130432
ADDF4
ADDF4
ASGNF4
line 283
;282:			//Figure out width
;283:			w = (hud[superhud].rect[2] / (max * .5)) * value2;
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 32
INDIRI4
CVIF4 4
MULF4
DIVF4
ADDRLP4 40
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 285
;284:			//Align
;285:			if ( hud[superhud].textalign == 2 ) {//align left
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $330
line 286
;286:				x = hud[superhud].rect[0];
ADDRLP4 16
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 287
;287:			} else if ( hud[superhud].textalign == 1 ) {//align center
ADDRGP4 $331
JUMPV
LABELV $330
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $334
line 288
;288:				x = ((hud[superhud].rect[0] + hud[superhud].rect[2]) - w) * .5;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 16
CNSTF4 1056964608
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 24
INDIRF4
SUBF4
MULF4
ASGNF4
line 289
;289:			} else {//align right
ADDRGP4 $335
JUMPV
LABELV $334
line 290
;290:				x = (hud[superhud].rect[0] + hud[superhud].rect[2]) - w;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 16
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 24
INDIRF4
SUBF4
ASGNF4
line 291
;291:			}	
LABELV $335
LABELV $331
line 292
;292:		}
LABELV $308
line 293
;293:		CG_FillRect(x, y, w, h, color);
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 294
;294:	}
LABELV $305
line 295
;295:}
LABELV $198
endproc CG_DrawStatusBars 72 20
data
align 4
LABELV $344
byte 4 1065353216
byte 4 1060152279
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1045220557
byte 4 1045220557
byte 4 1065353216
byte 4 1056964608
byte 4 1056964608
byte 4 1056964608
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
code
proc CG_HDrawStatusBar 80 32
line 304
;296:
;297:/*
;298:================
;299:CG_DrawStatusBar
;300:
;301:================
;302:*/
;303:
;304:static void CG_HDrawStatusBar( int superhud ) {
line 325
;305:	int			color;
;306:	centity_t	*cent;
;307:	playerState_t	*ps;
;308:	int			value;
;309:	vec4_t		hcolor;
;310:	vec3_t		angles;
;311:	vec3_t		origin;
;312:#ifdef MISSIONPACK
;313:	qhandle_t	handle;
;314:#endif
;315:	static float colors[4][4] = { 
;316://		{ 0.2, 1.0, 0.2, 1.0 } , { 1.0, 0.2, 0.2, 1.0 }, {0.5, 0.5, 0.5, 1} };
;317:		{ 1.0f, 0.69f, 0.0f, 1.0f },    // normal
;318:		{ 1.0f, 0.2f, 0.2f, 1.0f },     // low health
;319:		{ 0.5f, 0.5f, 0.5f, 1.0f },     // weapon firing
;320:		{ 1.0f, 1.0f, 1.0f, 1.0f } };   // health > 100
;321:
;322:	// draw the team background
;323:	//CG_DrawTeamBackground( 0, 420, 640, 60, 0.33f, cg.snap->ps.persistant[PERS_TEAM] );
;324:
;325:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 20
CNSTI4 728
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 326
;326:	ps = &cg.snap->ps;
ADDRLP4 16
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 328
;327:
;328:	VectorClear( angles );
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 4+8
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 56
INDIRF4
ASGNF4
line 331
;329:
;330:	// draw any 3D icons first, so the changes back to 2D are minimized
;331:	if ( cent->currentState.weapon && cg_weapons[ cent->currentState.weapon ].ammoModel ) {
ADDRLP4 60
ADDRLP4 20
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
ADDRLP4 64
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
EQI4 $349
CNSTI4 136
ADDRLP4 60
INDIRI4
MULI4
ADDRGP4 cg_weapons+76
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
EQI4 $349
line 332
;332:		if ( hud[superhud].element == StatusBar_AmmoIcon ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 45
NEI4 $352
line 333
;333:			origin[0] = 70;
ADDRLP4 24
CNSTF4 1116471296
ASGNF4
line 334
;334:			origin[1] = 0;
ADDRLP4 24+4
CNSTF4 0
ASGNF4
line 335
;335:			origin[2] = 0;
ADDRLP4 24+8
CNSTF4 0
ASGNF4
line 336
;336:			angles[YAW] = 90 + hud[superhud].angles[3] * sin( cg.time / 1000.0 );
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ARGF4
ADDRLP4 68
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4+4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+12
ADDP4
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 338
;337:			
;338:			if ( !hud[superhud].model ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+500
ADDP4
INDIRI4
CNSTI4 0
NEI4 $361
line 341
;339:				qhandle_t	icon;
;340:
;341:				icon = cg_weapons[ cg.predictedPlayerState.weapon ].ammoIcon;
ADDRLP4 72
CNSTI4 136
ADDRGP4 cg+107636+144
INDIRI4
MULI4
ADDRGP4 cg_weapons+72
ADDP4
INDIRI4
ASGNI4
line 342
;342:				if ( icon ) {
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $343
line 343
;343:					CG_DrawPic( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], icon );
ADDRLP4 76
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 344
;344:				}
line 345
;345:			} else {
ADDRGP4 $343
JUMPV
LABELV $361
line 346
;346:				CG_Draw3DModel( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3],
ADDRLP4 72
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
CNSTI4 136
ADDRLP4 20
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons+76
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 348
;347:						   cg_weapons[ cent->currentState.weapon ].ammoModel, 0, origin, angles );
;348:			}
line 349
;349:			return;
ADDRGP4 $343
JUMPV
LABELV $352
line 351
;350:		}
;351:	}
LABELV $349
line 353
;352:	
;353:	if ( hud[superhud].element == StatusBar_HealthIcon ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 48
NEI4 $384
line 357
;354:		
;355:		//memcpy(origin, hud[superhud].offset, sizeof(origin));
;356:			
;357:		angles[0] = hud[superhud].angles[0];
ADDRLP4 4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116
ADDP4
INDIRF4
ASGNF4
line 358
;358:		angles[1] = hud[superhud].angles[1];
ADDRLP4 4+4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+4
ADDP4
INDIRF4
ASGNF4
line 359
;359:		angles[2] = hud[superhud].angles[2];
ADDRLP4 4+8
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+8
ADDP4
INDIRF4
ASGNF4
line 360
;360:		angles[YAW] = 90 + 20 * sin( cg.time / 1000.0 );
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ARGF4
ADDRLP4 68
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4+4
CNSTF4 1101004800
ADDRLP4 68
INDIRF4
MULF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 362
;361:			
;362:		CG_HDrawStatusBarHead( hud[superhud].rect[0], superhud );
ADDRLP4 72
ADDRFP4 0
INDIRI4
ASGNI4
CNSTI4 504
ADDRLP4 72
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 CG_HDrawStatusBarHead
CALLV
pop
line 363
;363:		return;
ADDRGP4 $343
JUMPV
LABELV $384
line 367
;364:	}
;365:
;366:	
;367:	if ( ps->stats[ STAT_ARMOR ] ) {
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 0
EQI4 $397
line 368
;368:		qhandle_t model = cgs.media.armorModel; // CPM
ADDRLP4 68
ADDRGP4 cgs+156680+164
INDIRI4
ASGNI4
line 371
;369:
;370:		// CPM: Fix RA shader
;371:		if ( g_pro_mode.integer ) {
ADDRGP4 g_pro_mode+12
INDIRI4
CNSTI4 0
EQI4 $401
line 372
;372:			if ( ps->stats[ STAT_ARMORTYPE ] == 2 ) {
ADDRLP4 16
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $404
line 373
;373:				model = cgs.media.armorModelRA;
ADDRLP4 68
ADDRGP4 cgs+156680+172
INDIRI4
ASGNI4
line 374
;374:			}
LABELV $404
line 375
;375:		}
LABELV $401
line 377
;376:
;377:		if ( hud[superhud].element == StatusBar_ArmorIcon ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 42
NEI4 $408
line 379
;378:
;379:			memcpy(origin, hud[superhud].offset, sizeof(origin));
ADDRLP4 24
ARGP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+132
ADDP4
ARGP4
CNSTI4 12
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 381
;380:			
;381:			origin[0] = 90;
ADDRLP4 24
CNSTF4 1119092736
ASGNF4
line 382
;382:			origin[1] = 0;
ADDRLP4 24+4
CNSTF4 0
ASGNF4
line 383
;383:			origin[2] = -10;
ADDRLP4 24+8
CNSTF4 3240099840
ASGNF4
line 384
;384:			angles[YAW] = ( cg.time & 2047 ) * 360 / 2048.0;
ADDRLP4 4+4
CNSTI4 360
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
MULI4
CVIF4 4
CNSTF4 1157627904
DIVF4
ASGNF4
line 386
;385:
;386:			if ( !hud[superhud].model ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+500
ADDP4
INDIRI4
CNSTI4 0
NEI4 $416
line 390
;387:				qhandle_t icon;
;388:
;389:				// CPM: Armor icon
;390:				if ( g_pro_mode.integer && ps->stats[STAT_ARMORTYPE] == 2 ) {
ADDRGP4 g_pro_mode+12
INDIRI4
CNSTI4 0
EQI4 $419
ADDRLP4 16
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $419
line 391
;391:					icon = cgs.media.armorIconRA;
ADDRLP4 72
ADDRGP4 cgs+156680+176
INDIRI4
ASGNI4
line 392
;392:				} else {
ADDRGP4 $420
JUMPV
LABELV $419
line 393
;393:					icon = cgs.media.armorIcon;
ADDRLP4 72
ADDRGP4 cgs+156680+168
INDIRI4
ASGNI4
line 394
;394:				}
LABELV $420
line 397
;395:				// !CPM
;396:
;397:				CG_DrawPic( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], icon );
ADDRLP4 76
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 398
;398:			} else {
ADDRGP4 $343
JUMPV
LABELV $416
line 399
;399:				CG_Draw3DModel( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3],
ADDRLP4 72
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 68
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Draw3DModel
CALLV
pop
line 401
;400:						   model, 0, origin, angles );
;401:			}
line 402
;402:			return;
ADDRGP4 $343
JUMPV
LABELV $408
line 404
;403:		}
;404:	}
LABELV $397
line 423
;405:#ifdef MISSIONPACK
;406:	if( cgs.gametype == GT_HARVESTER ) {
;407:		origin[0] = 90;
;408:		origin[1] = 0;
;409:		origin[2] = -10;
;410:		angles[YAW] = ( cg.time & 2047 ) * 360 / 2048.0;
;411:		if( cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE ) {
;412:			handle = cgs.media.redCubeModel;
;413:		} else {
;414:			handle = cgs.media.blueCubeModel;
;415:		}
;416:		CG_Draw3DModel( 640 - (TEXT_ICON_SPACE + ICON_SIZE), 416, ICON_SIZE, ICON_SIZE, handle, 0, origin, angles );
;417:	}
;418:#endif
;419:	//
;420:	// ammo
;421:	//
;422:	
;423:	if ( cent->currentState.weapon ) {
ADDRLP4 20
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $440
line 424
;424:		value = ps->ammo[cent->currentState.weapon];
ADDRLP4 0
ADDRLP4 20
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
line 425
;425:		if ( hud[superhud].element == StatusBar_AmmoCount && value < 0 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 44
NEI4 $442
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $442
line 426
;426:			return;
ADDRGP4 $343
JUMPV
LABELV $442
line 428
;427:		}
;428:		if ( value > -1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 -1
LEI4 $445
line 429
;429:			if ( cg.predictedPlayerState.weaponstate == WEAPON_FIRING
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 3
NEI4 $447
ADDRGP4 cg+107636+44
INDIRI4
CNSTI4 100
LEI4 $447
line 430
;430:				&& cg.predictedPlayerState.weaponTime > 100 ) {
line 432
;431:				// draw as dark grey when reloading
;432:				color = 2;	// dark grey
ADDRLP4 52
CNSTI4 2
ASGNI4
line 433
;433:			} else {
ADDRGP4 $448
JUMPV
LABELV $447
line 434
;434:				if ( value >= 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $453
line 435
;435:					color = 0;	// green
ADDRLP4 52
CNSTI4 0
ASGNI4
line 436
;436:				} else {
ADDRGP4 $454
JUMPV
LABELV $453
line 437
;437:					color = 1;	// red
ADDRLP4 52
CNSTI4 1
ASGNI4
line 438
;438:				}
LABELV $454
line 439
;439:			}
LABELV $448
line 441
;440:				
;441:			trap_R_SetColor( colors[color] );	
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 $344
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 442
;442:			if ( hud[superhud].element == StatusBar_AmmoCount) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 44
NEI4 $455
line 443
;443:				if ( value > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $343
line 444
;444:					CG_HDrawField ( hud[superhud].rect[0], hud[superhud].rect[1], 3, value, superhud);
ADDRLP4 68
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 72
CNSTI4 504
ADDRLP4 68
INDIRI4
MULI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 68
INDIRI4
ARGI4
ADDRGP4 CG_HDrawField
CALLV
pop
line 445
;445:				}
line 446
;446:				return;
ADDRGP4 $343
JUMPV
LABELV $455
line 448
;447:			}
;448:			trap_R_SetColor( NULL );	
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 451
;449:
;450:			// if we didn't draw a 3D icon, draw a 2D icon for ammo
;451:			if ( !cg_draw3dIcons.integer && cg_drawIcons.integer ) {
ADDRLP4 68
CNSTI4 0
ASGNI4
ADDRGP4 cg_draw3dIcons+12
INDIRI4
ADDRLP4 68
INDIRI4
NEI4 $463
ADDRGP4 cg_drawIcons+12
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $463
line 454
;452:				qhandle_t	icon;
;453:
;454:				icon = cg_weapons[ cg.predictedPlayerState.weapon ].ammoIcon;
ADDRLP4 72
CNSTI4 136
ADDRGP4 cg+107636+144
INDIRI4
MULI4
ADDRGP4 cg_weapons+72
ADDP4
INDIRI4
ASGNI4
line 455
;455:				if ( icon ) {
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $470
line 456
;456:					CG_DrawPic( CHAR_WIDTH*3 + TEXT_ICON_SPACE, 432, ICON_SIZE, ICON_SIZE, icon );
CNSTF4 1120403456
ARGF4
CNSTF4 1138229248
ARGF4
ADDRLP4 76
CNSTF4 1111490560
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 457
;457:				}
LABELV $470
line 458
;458:			}
LABELV $463
line 459
;459:		}
LABELV $445
line 460
;460:	}
LABELV $440
line 465
;461:
;462:	//
;463:	// health
;464:	//
;465:	value = ps->stats[STAT_HEALTH];
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 466
;466:	if ( value > 100 ) {
ADDRLP4 0
INDIRI4
CNSTI4 100
LEI4 $472
line 467
;467:		trap_R_SetColor( colors[3] );		// white
ADDRGP4 $344+48
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 468
;468:	} else if (value > 25) {
ADDRGP4 $473
JUMPV
LABELV $472
ADDRLP4 0
INDIRI4
CNSTI4 25
LEI4 $475
line 469
;469:		trap_R_SetColor( colors[0] );	// green
ADDRGP4 $344
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 470
;470:	} else if (value > 0) {
ADDRGP4 $476
JUMPV
LABELV $475
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $477
line 471
;471:		color = (cg.time >> 8) & 1;	// flash
ADDRLP4 52
ADDRGP4 cg+107604
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 1
BANDI4
ASGNI4
line 472
;472:		trap_R_SetColor( colors[color] );
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 $344
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 473
;473:	} else {
ADDRGP4 $478
JUMPV
LABELV $477
line 474
;474:		trap_R_SetColor( colors[1] );	// red
ADDRGP4 $344+16
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 475
;475:	}
LABELV $478
LABELV $476
LABELV $473
line 478
;476:
;477:	// stretch the health up when taking damage
;478:	if ( hud[superhud].element == StatusBar_HealthCount) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 47
NEI4 $481
line 479
;479:		CG_HDrawField ( hud[superhud].rect[0], hud[superhud].rect[1], 4, value, superhud);
ADDRLP4 68
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 72
CNSTI4 504
ADDRLP4 68
INDIRI4
MULI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 68
INDIRI4
ARGI4
ADDRGP4 CG_HDrawField
CALLV
pop
line 480
;480:		return;
ADDRGP4 $343
JUMPV
LABELV $481
line 482
;481:	}
;482:	CG_ColorForHealth( hcolor );
ADDRLP4 36
ARGP4
ADDRGP4 CG_ColorForHealth
CALLV
pop
line 483
;483:	trap_R_SetColor( hcolor );
ADDRLP4 36
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 484
;484:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 489
;485:
;486:	//
;487:	// armor
;488:	//
;489:	value = ps->stats[STAT_ARMOR];
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ASGNI4
line 490
;490:	if (value > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $487
line 492
;491:		// CPM: Armor icon
;492:		qhandle_t icon = cgs.media.armorIcon;
ADDRLP4 68
ADDRGP4 cgs+156680+168
INDIRI4
ASGNI4
line 494
;493:
;494:		if (g_pro_mode.integer && ps->stats[STAT_ARMORTYPE] == 2)
ADDRGP4 g_pro_mode+12
INDIRI4
CNSTI4 0
EQI4 $491
ADDRLP4 16
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $491
line 495
;495:			icon = cgs.media.armorIconRA;
ADDRLP4 68
ADDRGP4 cgs+156680+176
INDIRI4
ASGNI4
LABELV $491
line 498
;496:		// !CPM
;497:
;498:		if ( value > 100 ) {
ADDRLP4 0
INDIRI4
CNSTI4 100
LEI4 $496
line 499
;499:			trap_R_SetColor( colors[3] );
ADDRGP4 $344+48
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 500
;500:		} else {
ADDRGP4 $497
JUMPV
LABELV $496
line 501
;501:			trap_R_SetColor( colors[0] );
ADDRGP4 $344
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 502
;502:		}	
LABELV $497
line 503
;503:		if ( hud[superhud].element == StatusBar_ArmorCount ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 41
NEI4 $499
line 504
;504:			CG_HDrawField ( hud[superhud].rect[0], hud[superhud].rect[1], 3, value, superhud);
ADDRLP4 72
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 76
CNSTI4 504
ADDRLP4 72
INDIRI4
MULI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ARGI4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 CG_HDrawField
CALLV
pop
line 505
;505:			return;
ADDRGP4 $343
JUMPV
LABELV $499
line 507
;506:		}
;507:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 510
;508:
;509:		// if we didn't draw a 3D icon, draw a 2D icon for armor
;510:		if ( !cg_draw3dIcons.integer && cg_drawIcons.integer ) {
ADDRLP4 72
CNSTI4 0
ASGNI4
ADDRGP4 cg_draw3dIcons+12
INDIRI4
ADDRLP4 72
INDIRI4
NEI4 $505
ADDRGP4 cg_drawIcons+12
INDIRI4
ADDRLP4 72
INDIRI4
EQI4 $505
line 511
;511:			CG_DrawPic( 370 + CHAR_WIDTH*3 + TEXT_ICON_SPACE, 432, ICON_SIZE, ICON_SIZE, icon ); // CPM
CNSTF4 1139474432
ARGF4
CNSTF4 1138229248
ARGF4
ADDRLP4 76
CNSTF4 1111490560
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 68
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 512
;512:		}
LABELV $505
line 513
;513:	}
LABELV $487
line 538
;514:
;515:#ifdef MISSIONPACK
;516:	//
;517:	// cubes
;518:	//
;519:	if( cgs.gametype == GT_HARVESTER ) {
;520:		value = ps->generic1;
;521:		if( value > 99 ) {
;522:			value = 99;
;523:		}
;524:		trap_R_SetColor( colors[0] );
;525:		CG_DrawField (640 - (CHAR_WIDTH*2 + TEXT_ICON_SPACE + ICON_SIZE), 432, 2, value, 0);
;526:		trap_R_SetColor( NULL );
;527:		// if we didn't draw a 3D icon, draw a 2D icon for armor
;528:		if ( !cg_draw3dIcons.integer && cg_drawIcons.integer ) {
;529:			if( cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE ) {
;530:				handle = cgs.media.redCubeIcon;
;531:			} else {
;532:				handle = cgs.media.blueCubeIcon;
;533:			}
;534:			CG_DrawPic( 640 - (TEXT_ICON_SPACE + ICON_SIZE), 432, ICON_SIZE, ICON_SIZE, handle );
;535:		}
;536:	}
;537:#endif
;538:}
LABELV $343
endproc CG_HDrawStatusBar 80 32
proc CG_HDrawAttacker 44 44
line 546
;539:
;540:/*
;541:================
;542:CG_DrawAttacker
;543:
;544:================
;545:*/
;546:static void CG_HDrawAttacker( int superhud ) {
line 554
;547:	int			t;
;548:	float		size;
;549:	vec3_t		angles;
;550://	const char	*info;
;551://	const char	*name;
;552:	int			clientNum;
;553:
;554:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 cg+107636+184
INDIRI4
CNSTI4 0
GTI4 $510
line 555
;555:		return;
ADDRGP4 $509
JUMPV
LABELV $510
line 558
;556:	}
;557:
;558:	if ( !cg.attackerTime ) {
ADDRGP4 cg+130564
INDIRI4
CNSTI4 0
NEI4 $514
line 559
;559:		return;
ADDRGP4 $509
JUMPV
LABELV $514
line 562
;560:	}
;561:
;562:	clientNum = cg.predictedPlayerState.persistant[PERS_ATTACKER];
ADDRLP4 0
ADDRGP4 cg+107636+248+24
INDIRI4
ASGNI4
line 563
;563:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS || clientNum == cg.snap->ps.clientNum ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $524
ADDRLP4 0
INDIRI4
CNSTI4 64
GEI4 $524
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $520
LABELV $524
line 564
;564:		return;
ADDRGP4 $509
JUMPV
LABELV $520
line 567
;565:	}
;566:
;567:	t = cg.time - cg.attackerTime;
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+130564
INDIRI4
SUBI4
ASGNI4
line 568
;568:	if ( t > ATTACKER_HEAD_TIME ) {
ADDRLP4 4
INDIRI4
CNSTI4 10000
LEI4 $527
line 569
;569:		cg.attackerTime = 0;
ADDRGP4 cg+130564
CNSTI4 0
ASGNI4
line 570
;570:		return;
ADDRGP4 $509
JUMPV
LABELV $527
line 573
;571:	}
;572:
;573:	if ( hud[superhud].element == AttackerIcon ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 4
NEI4 $530
line 574
;574:		size = ICON_SIZE * 1.25;
ADDRLP4 8
CNSTF4 1114636288
ASGNF4
line 576
;575:
;576:		angles[PITCH] = hud[superhud].angles[PITCH];
ADDRLP4 12
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116
ADDP4
INDIRF4
ASGNF4
line 577
;577:		angles[YAW] = hud[superhud].angles[YAW];
ADDRLP4 12+4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+4
ADDP4
INDIRF4
ASGNF4
line 578
;578:		angles[ROLL] = hud[superhud].angles[ROLL];
ADDRLP4 12+8
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+8
ADDP4
INDIRF4
ASGNF4
line 579
;579:		CG_DrawHead( (float)(hud[superhud].rect[0] - size), (float)hud[superhud].rect[1], size, size, clientNum, angles );
ADDRLP4 28
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 32
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 28
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRF4
SUBF4
ARGF4
ADDRLP4 28
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 580
;580:	}
LABELV $530
line 582
;581:
;582:	if ( hud[superhud].element == AttackerName ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 5
NEI4 $543
line 583
;583:		int w = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 588
;584:
;585:		//info = CG_ConfigString( CS_PLAYERS + clientNum );
;586:		//name = Info_ValueForKey(  info, "n" );
;587:
;588:		w = CG_DrawStrlen( cgs.clientinfo[ clientNum ].name ) * BIGCHAR_WIDTH;
CNSTI4 1776
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40960+4
ADDP4
ARGP4
ADDRLP4 32
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 32
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 589
;589:		CG_DrawStringExt( 0, 0, cgs.clientinfo[ clientNum ].name, colorWhite, qfalse, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
CNSTI4 1776
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40960+4
ADDP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 40
CNSTI4 16
ASGNI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 590
;590:	}
LABELV $543
line 592
;591:
;592:}
LABELV $509
endproc CG_HDrawAttacker 44 44
bss
align 4
LABELV $551
skip 16
align 4
LABELV $552
skip 4
align 4
LABELV $553
skip 4
code
proc CG_HDrawFPS 44 44
line 600
;593:
;594:/*
;595:==================
;596:CG_DrawFPS
;597:==================
;598:*/
;599:#define	FPS_FRAMES	4
;600:static void CG_HDrawFPS( int superhud ) {
line 611
;601:	char		*s;
;602:	static int	previousTimes[FPS_FRAMES];
;603:	static int	index;
;604:	int		i, total;
;605:	int		fps;
;606:	static	int	previous;
;607:	int		t, frameTime;
;608:
;609:	// don't use serverTime, because that will be drifting to
;610:	// correct for internet lag changes, timescales, timedemos, etc
;611:	t = trap_Milliseconds();
ADDRLP4 24
ADDRGP4 trap_Milliseconds
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 24
INDIRI4
ASGNI4
line 612
;612:	frameTime = t - previous;
ADDRLP4 12
ADDRLP4 8
INDIRI4
ADDRGP4 $553
INDIRI4
SUBI4
ASGNI4
line 613
;613:	previous = t;
ADDRGP4 $553
ADDRLP4 8
INDIRI4
ASGNI4
line 615
;614:
;615:	previousTimes[index % FPS_FRAMES] = frameTime;
ADDRGP4 $552
INDIRI4
CNSTI4 4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 $551
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 616
;616:	index++;
ADDRLP4 28
ADDRGP4 $552
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 617
;617:	if ( index > FPS_FRAMES ) {
ADDRGP4 $552
INDIRI4
CNSTI4 4
LEI4 $554
line 619
;618:		// average multiple frames together to smooth changes out a bit
;619:		total = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 620
;620:		for ( i = 0 ; i < FPS_FRAMES ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $556
line 621
;621:			total += previousTimes[i];
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $551
ADDP4
INDIRI4
ADDI4
ASGNI4
line 622
;622:		}
LABELV $557
line 620
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $556
line 623
;623:		if ( !total ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $560
line 624
;624:			total = 1;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 625
;625:		}
LABELV $560
line 626
;626:		fps = 1000 * FPS_FRAMES / total;
ADDRLP4 20
CNSTI4 4000
ADDRLP4 4
INDIRI4
DIVI4
ASGNI4
line 628
;627:
;628:		s = va( "%ifps", fps );
ADDRGP4 $562
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 32
INDIRP4
ASGNP4
line 632
;629:
;630:		//CG_DrawBigString( 635 - w, y + 2, s, 1.0F);
;631:		//CG_Printf("FPS -- %i, %i, %i, %i\n", hud[(int)y].rect[0], hud[(int)y].rect[1], hud[(int)y].fontsize[0], hud[(int)y].fontsize[1]);
;632:		if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $563
line 633
;633:			CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 36
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 634
;634:		}
LABELV $563
line 635
;635:		CG_DrawStringExt( 0, 0, s, colorWhite, qfalse, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 40
CNSTI4 16
ASGNI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 636
;636:	}
LABELV $554
line 637
;637:}
LABELV $550
endproc CG_HDrawFPS 44 44
proc CG_HDrawTimer 32 44
line 644
;638:
;639:/*
;640:=================
;641:CG_DrawTimer
;642:=================
;643:*/
;644:static void CG_HDrawTimer( int superhud ) {
line 649
;645:	char		*s;
;646:	int			mins, seconds;//, tens;
;647:	int			msec;
;648:
;649:	if ( (cg_drawTimer.integer == 2 || (!cg_drawTimer.integer && superhud) ) && cgs.timelimit > 0 ) {
ADDRGP4 cg_drawTimer+12
INDIRI4
CNSTI4 2
EQI4 $580
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRGP4 cg_drawTimer+12
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $575
ADDRFP4 0
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $575
LABELV $580
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 0
LEI4 $575
line 651
;650:		//Figure out how much time left and subtract a second so we're at 0 when timelimit is hit.
;651:		msec = (((cgs.levelStartTime + (cgs.timelimit * 60000)) - cg.time));
ADDRLP4 12
ADDRGP4 cgs+34784
INDIRI4
CNSTI4 60000
ADDRGP4 cgs+31476
INDIRI4
MULI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 652
;652:	} else {
ADDRGP4 $576
JUMPV
LABELV $575
line 653
;653:		msec = cg.time - cgs.levelStartTime;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+34784
INDIRI4
SUBI4
ASGNI4
line 654
;654:	}
LABELV $576
line 656
;655:
;656:	if ( cgs.timelimit > 0 && cg.time >= (cgs.levelStartTime + (cgs.timelimit * 60000)) ) {
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 0
LEI4 $586
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+34784
INDIRI4
CNSTI4 60000
ADDRGP4 cgs+31476
INDIRI4
MULI4
ADDI4
LTI4 $586
line 660
;657:		//do we need -1000?
;658:		//Prevent negative numbers when we go OVER the timelimit
;659:	//	msec = seconds = tens = mins = 0;
;660:		msec = seconds = mins = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 12
ADDRLP4 20
INDIRI4
ASGNI4
line 661
;661:	} else {
ADDRGP4 $587
JUMPV
LABELV $586
line 662
;662:		seconds = msec / 1000;
ADDRLP4 0
ADDRLP4 12
INDIRI4
CNSTI4 1000
DIVI4
ASGNI4
line 663
;663:		mins = seconds / 60;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 60
DIVI4
ASGNI4
line 664
;664:		seconds -= mins * 60;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 60
ADDRLP4 4
INDIRI4
MULI4
SUBI4
ASGNI4
line 667
;665:		//tens = seconds / 10;
;666:		//seconds -= tens * 10;
;667:	}
LABELV $587
line 670
;668:
;669:	//s = va( "%i:%i%i", mins, tens, seconds );
;670:	s = va( "%i:%02i", mins, seconds );
ADDRGP4 $592
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 20
INDIRP4
ASGNP4
line 673
;671:
;672:	//CG_DrawBigString( 635 - w, y + 2, s, 1.0F);
;673:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $593
line 674
;674:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 675
;675:	}
LABELV $593
line 677
;676:
;677:	CG_DrawStringExt( 0, 0, s, colorWhite, qfalse, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
CNSTI4 16
ASGNI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 678
;678:}
LABELV $574
endproc CG_HDrawTimer 32 44
export CG_DrawSuperTeamOverlay
proc CG_DrawSuperTeamOverlay 140 44
line 687
;679:
;680:/*
;681:=================
;682:CG_DrawSuperTeamOverlay
;683:rewritten to only draw at a time
;684:=================
;685:*/
;686:
;687:void CG_DrawSuperTeamOverlay( int superhud, int i ) {
line 699
;688:	int x, w, h, xx;
;689:	int j, k, len;//i, j, k, len;
;690:	const char *p;
;691:	vec4_t		hcolor;
;692:	int pwidth, lwidth;
;693:	int plyrs;
;694:	char st[16];
;695:	clientInfo_t *ci;
;696:	gitem_t	*item;
;697:	int y;//, count;
;698:
;699:	if ( cg.snap->ps.persistant[PERS_TEAM] != TEAM_RED && cg.snap->ps.persistant[PERS_TEAM] != TEAM_BLUE ) {
ADDRLP4 88
CNSTI4 304
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
EQI4 $605
ADDRGP4 cg+36
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $605
line 700
;700:		return ; // Not on any team
ADDRGP4 $604
JUMPV
LABELV $605
line 703
;701:	}
;702:
;703:	plyrs = 0;
ADDRLP4 60
CNSTI4 0
ASGNI4
line 706
;704:
;705:	// max player name width
;706:	pwidth = 0;
ADDRLP4 52
CNSTI4 0
ASGNI4
line 708
;707:
;708:	if ( (numSortedTeamPlayers - 1) < i ) {
ADDRGP4 numSortedTeamPlayers
INDIRI4
CNSTI4 1
SUBI4
ADDRFP4 4
INDIRI4
GEI4 $609
line 709
;709:		return;
ADDRGP4 $604
JUMPV
LABELV $609
line 712
;710:	}
;711:
;712:	ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 12
CNSTI4 1776
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960
ADDP4
ASGNP4
line 713
;713:	if ( ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $612
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $612
line 714
;714:		plyrs++;
ADDRLP4 60
ADDRLP4 60
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 715
;715:		len = CG_DrawStrlen(ci->name);
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 96
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 96
INDIRI4
ASGNI4
line 716
;716:		if (len > pwidth) {
ADDRLP4 16
INDIRI4
ADDRLP4 52
INDIRI4
LEI4 $615
line 717
;717:			pwidth = len;
ADDRLP4 52
ADDRLP4 16
INDIRI4
ASGNI4
line 718
;718:		}
LABELV $615
line 719
;719:	}
LABELV $612
line 721
;720:
;721:	if ( !plyrs ) {
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $617
line 722
;722:		return;
ADDRGP4 $604
JUMPV
LABELV $617
line 726
;723:	}
;724:
;725:	//if (pwidth > TEAM_OVERLAY_MAXNAME_WIDTH)
;726:	pwidth = TEAM_OVERLAY_MAXNAME_WIDTH;
ADDRLP4 52
CNSTI4 12
ASGNI4
line 729
;727:
;728:	// max location name width
;729:	lwidth = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 730
;730:	for ( k = 1; k < MAX_LOCATIONS; k++ ) {
ADDRLP4 4
CNSTI4 1
ASGNI4
LABELV $619
line 731
;731:		p = CG_ConfigString(CS_LOCATIONS + k);
ADDRLP4 4
INDIRI4
CNSTI4 608
ADDI4
ARGI4
ADDRLP4 96
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 732
;732:		if (p && *p) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $623
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $623
line 733
;733:			len = CG_DrawStrlen(p);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 104
INDIRI4
ASGNI4
line 734
;734:			if (len > lwidth) {
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $625
line 735
;735:				lwidth = len;
ADDRLP4 20
ADDRLP4 16
INDIRI4
ASGNI4
line 736
;736:			}
LABELV $625
line 737
;737:		}
LABELV $623
line 738
;738:	}
LABELV $620
line 730
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $619
line 740
;739:
;740:	if ( lwidth > TEAM_OVERLAY_MAXLOCATION_WIDTH ) {
ADDRLP4 20
INDIRI4
CNSTI4 16
LEI4 $627
line 741
;741:		lwidth = TEAM_OVERLAY_MAXLOCATION_WIDTH;
ADDRLP4 20
CNSTI4 16
ASGNI4
line 742
;742:	}
LABELV $627
line 746
;743:
;744:
;745:	//Set width
;746:	if ( g_gamemode.integer != 1 ) {
ADDRGP4 g_gamemode+12
INDIRI4
CNSTI4 1
EQI4 $629
line 747
;747:		w = (pwidth + lwidth + 4 + 7) * hud[superhud].fontsize[0];
ADDRLP4 64
ADDRLP4 52
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
CNSTI4 4
ADDI4
CNSTI4 7
ADDI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
ASGNI4
line 748
;748:	} else {
ADDRGP4 $630
JUMPV
LABELV $629
line 749
;749:		w = (pwidth + lwidth + 3) * hud[superhud].fontsize[0];
ADDRLP4 64
ADDRLP4 52
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
CNSTI4 3
ADDI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
ASGNI4
line 750
;750:	}
LABELV $630
line 752
;751:	//Set x
;752:	if ( hud[superhud].textalign == 2 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $634
line 754
;753:		//align left
;754:		x = hud[superhud].rect[0];
ADDRLP4 56
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ASGNI4
line 755
;755:	} else if ( hud[superhud].textalign == 1 ) {
ADDRGP4 $635
JUMPV
LABELV $634
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $638
line 757
;756:		//align center
;757:		x = ((hud[superhud].rect[0] + hud[superhud].rect[2]) - w) * .5;
ADDRLP4 96
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 56
CNSTF4 1056964608
ADDRLP4 96
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 96
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
ADDRLP4 64
INDIRI4
SUBI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 758
;758:	} else {
ADDRGP4 $639
JUMPV
LABELV $638
line 760
;759:		//align right
;760:		x = (hud[superhud].rect[0] + hud[superhud].rect[2]) - w;
ADDRLP4 96
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 56
ADDRLP4 96
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 96
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
ADDRLP4 64
INDIRI4
SUBI4
ASGNI4
line 761
;761:	}
LABELV $639
LABELV $635
line 763
;762:	//Set y
;763:	y = hud[superhud].rect[1];
ADDRLP4 32
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ASGNI4
line 765
;764:	//Set height
;765:	h = plyrs * hud[superhud].fontsize[1];
ADDRLP4 68
ADDRLP4 60
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
MULI4
ASGNI4
line 768
;766:	
;767:	
;768:	memcpy(hcolor, hud[superhud].bgcolor, sizeof(hcolor) );
ADDRLP4 36
ARGP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+84
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 769
;769:	CG_FillRect( (float)x, (float)y, (float)hud[superhud].rect[2], (float)hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 56
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 96
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 96
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 96
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 96
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 770
;770:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 772
;771:
;772:	ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 12
CNSTI4 1776
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960
ADDP4
ASGNP4
line 773
;773:	if ( ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $604
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $604
line 775
;774:
;775:		hcolor[0] = hcolor[1] = hcolor[2] = hcolor[3] = 1.0;
ADDRLP4 104
CNSTF4 1065353216
ASGNF4
ADDRLP4 36+12
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 36+8
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 36+4
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 36
ADDRLP4 104
INDIRF4
ASGNF4
line 777
;776:
;777:		xx = x + hud[superhud].fontsize[0];
ADDRLP4 28
ADDRLP4 56
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ADDI4
ASGNI4
line 779
;778:
;779:		CG_DrawStringExt( xx, y, ci->name, hcolor, qfalse, qfalse, hud[superhud].fontsize[0], hud[superhud].fontsize[1], TEAM_OVERLAY_MAXNAME_WIDTH, 0, 0);
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 108
CNSTI4 0
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 112
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 112
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 112
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
CNSTI4 12
ARGI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 781
;780:
;781:		if (lwidth) {
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $668
line 782
;782:			p = CG_ConfigString(CS_LOCATIONS + ci->location);
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
CNSTI4 608
ADDI4
ARGI4
ADDRLP4 116
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 116
INDIRP4
ASGNP4
line 783
;783:			if (!p || !*p) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $672
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $670
LABELV $672
line 784
;784:				p = "unknown";
ADDRLP4 0
ADDRGP4 $673
ASGNP4
line 785
;785:			}
LABELV $670
line 786
;786:			len = CG_DrawStrlen(p);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 124
INDIRI4
ASGNI4
line 787
;787:			if (len > lwidth) {
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $674
line 788
;788:				len = lwidth;
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 789
;789:			}
LABELV $674
line 792
;790:
;791:			//xx = x + hud[superhud].fontsize[0] * 2 + hud[superhud].fontsize[0] * pwidth;
;792:			xx = x + hud[superhud].fontsize[0] * 2 + hud[superhud].fontsize[0] * TEAM_OVERLAY_MAXNAME_WIDTH;
ADDRLP4 128
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 28
ADDRLP4 56
INDIRI4
ADDRLP4 128
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ADDI4
CNSTI4 12
ADDRLP4 128
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
ADDI4
ASGNI4
line 793
;793:			CG_DrawStringExt( xx, y, p, hcolor, qfalse, qfalse, hud[superhud].fontsize[0], hud[superhud].fontsize[1], TEAM_OVERLAY_MAXLOCATION_WIDTH, 0, 0);
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 132
CNSTI4 0
ASGNI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRLP4 136
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 136
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 136
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
CNSTI4 16
ARGI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 794
;794:		}
LABELV $668
line 796
;795:
;796:		if ( g_gamemode.integer != 1 ) {
ADDRGP4 g_gamemode+12
INDIRI4
CNSTI4 1
EQI4 $681
line 797
;797:			CG_GetColorForHealth( ci->health, ci->armor, hcolor );
ADDRLP4 12
INDIRP4
CNSTI4 136
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 799
;798:
;799:			Com_sprintf (st, sizeof(st), "%3i %3i", ci->health,	ci->armor);
ADDRLP4 72
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $684
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 136
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 801
;800:
;801:			xx = x + hud[superhud].fontsize[0] * 3 + hud[superhud].fontsize[0] * pwidth + hud[superhud].fontsize[0] * lwidth;
ADDRLP4 124
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 28
ADDRLP4 56
INDIRI4
CNSTI4 3
ADDRLP4 124
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
ADDI4
ADDRLP4 124
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ADDRLP4 52
INDIRI4
MULI4
ADDI4
ADDRLP4 124
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
MULI4
ADDI4
ASGNI4
line 803
;802:
;803:			CG_DrawStringExt( xx, y, st, hcolor, qfalse, qfalse, hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 72
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 128
CNSTI4 0
ASGNI4
ADDRLP4 128
INDIRI4
ARGI4
ADDRLP4 128
INDIRI4
ARGI4
ADDRLP4 132
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 136
CNSTI4 504
ADDRLP4 132
INDIRI4
MULI4
ASGNI4
ADDRLP4 136
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 136
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 128
INDIRI4
ARGI4
ADDRLP4 128
INDIRI4
ARGI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 804
;804:		}
LABELV $681
line 807
;805:
;806:		// draw weapon icon
;807:		if ( g_gamemode.integer != 1 ) {
ADDRGP4 g_gamemode+12
INDIRI4
CNSTI4 1
EQI4 $691
line 808
;808:			xx += hud[superhud].fontsize[0] * 3;
ADDRLP4 28
ADDRLP4 28
INDIRI4
CNSTI4 3
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
ADDI4
ASGNI4
line 810
;809:
;810:			if ( cg_weapons[ci->curWeapon].weaponIcon ) {
CNSTI4 136
ADDRLP4 12
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
CNSTI4 0
EQI4 $695
line 811
;811:				CG_DrawPic( xx, y, hud[superhud].fontsize[0], hud[superhud].fontsize[1], cg_weapons[ci->curWeapon].weaponIcon );
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 116
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 116
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 116
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
CNSTI4 136
ADDRLP4 12
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 812
;812:			} else {
ADDRGP4 $696
JUMPV
LABELV $695
line 813
;813:				CG_DrawPic( xx, y, hud[superhud].fontsize[0], hud[superhud].fontsize[1], cgs.media.deferShader );
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 116
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 116
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 116
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+156680+184
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 814
;814:			}
LABELV $696
line 815
;815:		}
LABELV $691
line 818
;816:
;817:		// Draw powerup icons
;818:		xx = x + w - hud[superhud].fontsize[0];
ADDRLP4 28
ADDRLP4 56
INDIRI4
ADDRLP4 64
INDIRI4
ADDI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
SUBI4
ASGNI4
line 820
;819:
;820:		for (j = 0; j <= PW_NUM_POWERUPS; j++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $708
line 822
;821://freeze
;822:			if ( g_gamemode.integer > 3 ) {
ADDRGP4 g_gamemode+12
INDIRI4
CNSTI4 3
LEI4 $712
line 823
;823:				if ( Q_Isfreeze( ci - cgs.clientinfo ) ) {
ADDRLP4 12
INDIRP4
CVPU4 4
ADDRGP4 cgs+40960
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 1776
DIVI4
ARGI4
ADDRLP4 116
ADDRGP4 Q_Isfreeze
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
EQI4 $715
line 824
;824:					CG_DrawPic( xx, y, hud[superhud].fontsize[0], hud[superhud].fontsize[1], cgs.media.noammoShader );
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 120
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 120
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 120
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+156680+328
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 825
;825:					break;
ADDRGP4 $710
JUMPV
LABELV $715
line 827
;826:				}
;827:			}
LABELV $712
line 829
;828://freeze
;829:			if (ci->powerups & (1 << j)) {
ADDRLP4 12
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 8
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $723
line 830
;830:				item = BG_FindItemForPowerup( j );
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 116
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 116
INDIRP4
ASGNP4
line 831
;831:				if (item) {
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $725
line 833
;832:					/* This is sloppy but it sets the color of the flag icons for cg_adjustTeamColors */
;833:					 if ( item->giType == IT_TEAM && cgs.gametype == GT_CTF && cg_adjustTeamColors.integer ) {
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $727
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $727
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
CNSTI4 0
EQI4 $727
line 834
;834:						if ( cgs.clientinfo[cg.clientNum].team == TEAM_RED ) {
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 1
NEI4 $731
line 835
;835:							if ( item->giTag == PW_REDFLAG ) {
ADDRLP4 24
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $736
line 836
;836:								trap_R_SetColor( g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ] );
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 120
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 837
;837:							} else {
ADDRGP4 $732
JUMPV
LABELV $736
line 838
;838:								trap_R_SetColor( g_color_table[ ColorIndex(cg_EnemyColors.string[cg_adjustTeamColors.integer - 1]) ] );
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 120
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 839
;839:							}
line 840
;840:						} else {
ADDRGP4 $732
JUMPV
LABELV $731
line 841
;841:							if ( item->giTag == PW_BLUEFLAG ) {
ADDRLP4 24
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $744
line 842
;842:								trap_R_SetColor( g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ] );
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 120
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 843
;843:							} else {
ADDRGP4 $745
JUMPV
LABELV $744
line 844
;844:								trap_R_SetColor( g_color_table[ ColorIndex(cg_EnemyColors.string[cg_adjustTeamColors.integer - 1]) ] );
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 120
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 845
;845:							}
LABELV $745
line 846
;846:						}
LABELV $732
line 847
;847:					}
LABELV $727
line 848
;848:					 if ( cg_adjustTeamColors.integer ) {
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
CNSTI4 0
EQI4 $752
line 849
;849:						CG_DrawPic( xx, y, hud[superhud].fontsize[0], hud[superhud].fontsize[1], trap_R_RegisterShader( "icons/iconf_fla1" ) );
ADDRGP4 $758
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 124
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 124
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 124
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 120
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 850
;850:					 } else {
ADDRGP4 $753
JUMPV
LABELV $752
line 851
;851:						CG_DrawPic( xx, y, hud[superhud].fontsize[0], hud[superhud].fontsize[1], trap_R_RegisterShader( item->icon ) );
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 124
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 124
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 124
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 120
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 852
;852:					 }
LABELV $753
line 853
;853:					xx += hud[superhud].fontsize[0];
ADDRLP4 28
ADDRLP4 28
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ADDI4
ASGNI4
line 854
;854:				}
LABELV $725
line 855
;855:			}
LABELV $723
line 856
;856:		}
LABELV $709
line 820
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 15
LEI4 $708
LABELV $710
line 858
;857:
;858:		y += hud[superhud].fontsize[1];
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 859
;859:	}
line 860
;860:	return;
LABELV $604
endproc CG_DrawSuperTeamOverlay 140 44
proc CG_HDrawScores 88 44
line 872
;861://#endif
;862:}
;863:
;864:/*
;865:=================
;866:CG_DrawScores
;867:
;868:Draw the small two score display
;869:=================
;870:*/
;871://#ifndef MISSIONPACK
;872:static void CG_HDrawScores( int superhud ) {
line 882
;873:	const char	*s;
;874:	int			s1, s2/*, score*/;
;875:	//int			x, w;
;876:	int			v;
;877:	vec4_t		color;
;878:	//float		y, y1;
;879:	gitem_t		*item;
;880:
;881:	
;882:	s1 = cgs.scores1;
ADDRLP4 0
ADDRGP4 cgs+34788
INDIRI4
ASGNI4
line 883
;883:	s2 = cgs.scores2;
ADDRLP4 4
ADDRGP4 cgs+34792
INDIRI4
ASGNI4
line 885
;884:
;885:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $768
line 886
;886:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1],  hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 36
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 887
;887:	}
LABELV $768
line 889
;888:
;889:	switch ( hud[superhud].element ) {
ADDRLP4 36
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 44
CNSTI4 15
ASGNI4
ADDRLP4 36
INDIRI4
ADDRLP4 44
INDIRI4
EQI4 $870
ADDRLP4 36
INDIRI4
CNSTI4 16
EQI4 $836
ADDRLP4 36
INDIRI4
ADDRLP4 44
INDIRI4
LTI4 $779
LABELV $904
ADDRLP4 36
INDIRI4
CNSTI4 36
EQI4 $822
ADDRLP4 36
INDIRI4
CNSTI4 37
EQI4 $803
ADDRLP4 36
INDIRI4
CNSTI4 38
EQI4 $783
ADDRGP4 $779
JUMPV
LABELV $783
line 891
;890:		case Score_OWN:
;891:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $784
line 892
;892:				if ( cgs.clientinfo[ cg.clientNum ].team == TEAM_BLUE ) {
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $787
line 893
;893:					s = va( "%2i", s2 );//Blue
ADDRGP4 $792
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 894
;894:				} else {
ADDRGP4 $788
JUMPV
LABELV $787
line 895
;895:					s = va( "%2i", s1 );//Red
ADDRGP4 $792
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 896
;896:				}
LABELV $788
line 897
;897:				CG_DrawStringExt(0, 0, s, colorWhite, qtrue, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 56
CNSTI4 16
ASGNI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 898
;898:			} else if ( s1 != SCORE_NOT_PRESENT ) { //Need a score present
ADDRGP4 $780
JUMPV
LABELV $784
ADDRLP4 0
INDIRI4
CNSTI4 -9999
EQI4 $780
line 899
;899:				if ( cgs.clientinfo[ cg.clientNum ].team == TEAM_SPECTATOR ) {
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 3
NEI4 $795
line 900
;900:					s = va( "%2i", s1 ); //highest score
ADDRGP4 $792
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 901
;901:				} else if ( cg.snap->ps.persistant[PERS_SCORE] == s1 ) {
ADDRGP4 $796
JUMPV
LABELV $795
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $800
line 902
;902:					s = va( "%2i", s1 ); //OWN score
ADDRGP4 $792
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 903
;903:				} else {
ADDRGP4 $801
JUMPV
LABELV $800
line 904
;904:					s = va( "%2i", s2 ); //NME score
ADDRGP4 $792
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 905
;905:				}
LABELV $801
LABELV $796
line 906
;906:				CG_DrawStringExt(0, 0, s, colorWhite, qtrue, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 56
CNSTI4 16
ASGNI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 907
;907:			}
line 908
;908:			break;
ADDRGP4 $780
JUMPV
LABELV $803
line 910
;909:		case Score_NME:
;910:			if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $804
line 911
;911:				if ( cgs.clientinfo[ cg.clientNum ].team == TEAM_BLUE ) {
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $807
line 912
;912:					s = va( "%2i", s1 );//Red
ADDRGP4 $792
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 913
;913:				} else {
ADDRGP4 $808
JUMPV
LABELV $807
line 914
;914:					s = va( "%2i", s2 );//Blue
ADDRGP4 $792
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 915
;915:				}
LABELV $808
line 916
;916:				CG_DrawStringExt(0, 0, s, colorWhite, qtrue, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 56
CNSTI4 16
ASGNI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 917
;917:			} else  if ( s1 != SCORE_NOT_PRESENT ) { //Need a score present
ADDRGP4 $780
JUMPV
LABELV $804
ADDRLP4 0
INDIRI4
CNSTI4 -9999
EQI4 $780
line 918
;918:				if ( cgs.clientinfo[ cg.clientNum ].team == TEAM_SPECTATOR ) {
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 3
NEI4 $814
line 919
;919:					s = va( "%2i", s2 ); //second highest score
ADDRGP4 $792
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 920
;920:				} else if ( cg.snap->ps.persistant[PERS_SCORE] == s2 ) {
ADDRGP4 $815
JUMPV
LABELV $814
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $819
line 921
;921:					s = va( "%2i", s1 ); //NME score
ADDRGP4 $792
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 922
;922:				} else {
ADDRGP4 $820
JUMPV
LABELV $819
line 923
;923:					s = va( "%2i", s2 ); //OWN score
ADDRGP4 $792
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
line 924
;924:				}
LABELV $820
LABELV $815
line 925
;925:				CG_DrawStringExt(0, 0, s, colorWhite, qtrue, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 56
CNSTI4 16
ASGNI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 926
;926:			}
line 927
;927:			break;
ADDRGP4 $780
JUMPV
LABELV $822
line 929
;928:		case Score_Limit:
;929:			if ( cgs.gametype >= GT_CTF || g_gamemode.integer >= 4 ) {
ADDRLP4 52
CNSTI4 4
ASGNI4
ADDRGP4 cgs+31456
INDIRI4
ADDRLP4 52
INDIRI4
GEI4 $827
ADDRGP4 g_gamemode+12
INDIRI4
ADDRLP4 52
INDIRI4
LTI4 $823
LABELV $827
line 930
;930:				v = cgs.capturelimit;
ADDRLP4 12
ADDRGP4 cgs+31472
INDIRI4
ASGNI4
line 931
;931:			} else {
ADDRGP4 $824
JUMPV
LABELV $823
line 932
;932:				v = cgs.fraglimit;
ADDRLP4 12
ADDRGP4 cgs+31468
INDIRI4
ASGNI4
line 933
;933:			}
LABELV $824
line 934
;934:			if ( v ) {
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $780
line 935
;935:				s = va( "%2i", v );
ADDRGP4 $792
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 56
INDIRP4
ASGNP4
line 936
;936:				memcpy(color, hud[superhud].bgcolor, sizeof(color) );
ADDRLP4 16
ARGP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+84
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 937
;937:				CG_DrawStringExt(0, 0, s, colorWhite, qtrue, qfalse, hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 64
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 68
CNSTI4 504
ADDRLP4 64
INDIRI4
MULI4
ASGNI4
ADDRLP4 68
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 68
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 64
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 938
;938:			}
line 939
;939:			break;
ADDRGP4 $780
JUMPV
LABELV $836
line 941
;940:		case FlagStatus_OWN:
;941:			if ( cgs.gametype == GT_CTF ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $780
line 942
;942:				int flag = (cgs.clientinfo[ cg.clientNum ].team == TEAM_BLUE? PW_BLUEFLAG : PW_REDFLAG);
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $844
ADDRLP4 64
CNSTI4 8
ASGNI4
ADDRGP4 $845
JUMPV
LABELV $844
ADDRLP4 64
CNSTI4 7
ASGNI4
LABELV $845
ADDRLP4 60
ADDRLP4 64
INDIRI4
ASGNI4
line 943
;943:				int team = (cgs.clientinfo[ cg.clientNum ].team == TEAM_BLUE? TEAM_BLUE : TEAM_RED);
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $850
ADDRLP4 68
CNSTI4 2
ASGNI4
ADDRGP4 $851
JUMPV
LABELV $850
ADDRLP4 68
CNSTI4 1
ASGNI4
LABELV $851
ADDRLP4 56
ADDRLP4 68
INDIRI4
ASGNI4
line 944
;944:				item = BG_FindItemForPowerup( flag );
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 72
INDIRP4
ASGNP4
line 946
;945:
;946:				trap_R_SetColor( NULL );//FIXME: This shouldn't be here
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 947
;947:				trap_R_SetColor( hud[superhud].color );
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 948
;948:				if( cgs.flags[team-1] >= 0 && cgs.flags[team-1] <= 3 ) {
ADDRLP4 76
ADDRLP4 56
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRGP4 cgs+34796-4
ADDP4
INDIRI4
CNSTI4 0
LTI4 $853
ADDRLP4 76
INDIRI4
ADDRGP4 cgs+34796-4
ADDP4
INDIRI4
CNSTI4 3
GTI4 $853
line 949
;949:					CG_DrawPic( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3],
ADDRLP4 80
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 84
CNSTI4 2
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 84
INDIRI4
LSHI4
ADDRGP4 cgs+34796-4
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
LSHI4
ADDRGP4 cgs+156680+100
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 951
;950:						cgs.media.whiteFlagShader[cgs.flags[team-1]] );
;951:				}
LABELV $853
line 952
;952:				trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 953
;953:			}
line 954
;954:			break;
ADDRGP4 $780
JUMPV
LABELV $870
line 956
;955:		case FlagStatus_NME:
;956:			if ( cgs.gametype == GT_CTF ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $780
line 957
;957:				int flag = (cgs.clientinfo[ cg.clientNum ].team != TEAM_BLUE? PW_BLUEFLAG : PW_REDFLAG);
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
EQI4 $878
ADDRLP4 64
CNSTI4 8
ASGNI4
ADDRGP4 $879
JUMPV
LABELV $878
ADDRLP4 64
CNSTI4 7
ASGNI4
LABELV $879
ADDRLP4 60
ADDRLP4 64
INDIRI4
ASGNI4
line 958
;958:				int team = (cgs.clientinfo[ cg.clientNum ].team != TEAM_BLUE? TEAM_BLUE : TEAM_RED);
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
EQI4 $884
ADDRLP4 68
CNSTI4 2
ASGNI4
ADDRGP4 $885
JUMPV
LABELV $884
ADDRLP4 68
CNSTI4 1
ASGNI4
LABELV $885
ADDRLP4 56
ADDRLP4 68
INDIRI4
ASGNI4
line 959
;959:				item = BG_FindItemForPowerup( flag );
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 72
INDIRP4
ASGNP4
line 961
;960:
;961:				trap_R_SetColor( NULL );//FIXME: This shouldn't be here
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 962
;962:				trap_R_SetColor( hud[superhud].color );
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 963
;963:				if( cgs.flags[team-1] >= 0 && cgs.flags[team-1] <= 3 ) {
ADDRLP4 76
ADDRLP4 56
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRGP4 cgs+34796-4
ADDP4
INDIRI4
CNSTI4 0
LTI4 $887
ADDRLP4 76
INDIRI4
ADDRGP4 cgs+34796-4
ADDP4
INDIRI4
CNSTI4 3
GTI4 $887
line 964
;964:					CG_DrawPic( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3],
ADDRLP4 80
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 84
CNSTI4 2
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 84
INDIRI4
LSHI4
ADDRGP4 cgs+34796-4
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
LSHI4
ADDRGP4 cgs+156680+100
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 966
;965:						cgs.media.whiteFlagShader[cgs.flags[team-1]] );
;966:				}
LABELV $887
line 967
;967:				trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 968
;968:			}
line 969
;969:			break;
LABELV $779
LABELV $780
line 971
;970:	}
;971:}
LABELV $765
endproc CG_HDrawScores 88 44
data
align 4
LABELV $906
byte 4 1045220557
byte 4 1065353216
byte 4 1045220557
byte 4 1065353216
byte 4 1065353216
byte 4 1045220557
byte 4 1045220557
byte 4 1065353216
code
proc CG_DrawSuperPowerups 240 44
line 980
;972://#endif // MISSIONPACK
;973:
;974:/*
;975:================
;976:CG_DrawSuperPowerups
;977:================
;978:*/
;979:#ifndef MISSIONPACK
;980:static void CG_DrawSuperPowerups( int superhud ) {
line 997
;981:	int		sorted[MAX_POWERUPS];
;982:	int		sortedTime[MAX_POWERUPS];
;983:	int		i, j, k;
;984:	int		active;
;985:	playerState_t	*ps;
;986:	int		t;
;987:	gitem_t	*item;
;988:	int		x;
;989:	int		color;
;990:	float	size;
;991:	float	f;
;992:	static float colors[2][4] = { 
;993:    { 0.2f, 1.0f, 0.2f, 1.0f } , 
;994:    { 1.0f, 0.2f, 0.2f, 1.0f } 
;995:  };
;996:
;997:	ps = &cg.snap->ps;
ADDRLP4 148
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 999
;998:
;999:	if ( ps->stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 148
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $908
line 1000
;1000:		return;
ADDRGP4 $905
JUMPV
LABELV $908
line 1004
;1001:	}
;1002:
;1003:	// sort the list by time remaining
;1004:	active = 0;
ADDRLP4 136
CNSTI4 0
ASGNI4
line 1005
;1005:	for ( i = 0 ; i < MAX_POWERUPS ; i++ ) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $910
line 1006
;1006:		if ( !ps->powerups[ i ] ) {
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 148
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $914
line 1007
;1007:			continue;
ADDRGP4 $911
JUMPV
LABELV $914
line 1009
;1008:		}
;1009:		t = ps->powerups[ i ] - cg.time;
ADDRLP4 140
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 148
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 1012
;1010:		// ZOID--don't draw if the power up has unlimited time (999 seconds)
;1011:		// This is true of the CTF flags
;1012:		if ( (t < 0 || t > 999000) && !superhud) {//Can draw flags in the superhud
ADDRLP4 140
INDIRI4
CNSTI4 0
LTI4 $919
ADDRLP4 140
INDIRI4
CNSTI4 999000
LEI4 $917
LABELV $919
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $917
line 1013
;1013:			continue;
ADDRGP4 $911
JUMPV
LABELV $917
line 1017
;1014:		}
;1015:
;1016:		// insert into the list
;1017:		for ( j = 0 ; j < active ; j++ ) {
ADDRLP4 132
CNSTI4 0
ASGNI4
ADDRGP4 $923
JUMPV
LABELV $920
line 1018
;1018:			if ( sortedTime[j] >= t ) {
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
ADDRLP4 140
INDIRI4
LTI4 $924
line 1019
;1019:				for ( k = active - 1 ; k >= j ; k-- ) {
ADDRLP4 0
ADDRLP4 136
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $929
JUMPV
LABELV $926
line 1020
;1020:					sorted[k+1] = sorted[k];
ADDRLP4 176
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 176
INDIRI4
ADDRLP4 68+4
ADDP4
ADDRLP4 176
INDIRI4
ADDRLP4 68
ADDP4
INDIRI4
ASGNI4
line 1021
;1021:					sortedTime[k+1] = sortedTime[k];
ADDRLP4 180
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 180
INDIRI4
ADDRLP4 4+4
ADDP4
ADDRLP4 180
INDIRI4
ADDRLP4 4
ADDP4
INDIRI4
ASGNI4
line 1022
;1022:				}
LABELV $927
line 1019
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $929
ADDRLP4 0
INDIRI4
ADDRLP4 132
INDIRI4
GEI4 $926
line 1023
;1023:				break;
ADDRGP4 $922
JUMPV
LABELV $924
line 1025
;1024:			}
;1025:		}
LABELV $921
line 1017
ADDRLP4 132
ADDRLP4 132
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $923
ADDRLP4 132
INDIRI4
ADDRLP4 136
INDIRI4
LTI4 $920
LABELV $922
line 1026
;1026:		sorted[j] = i;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 1027
;1027:		sortedTime[j] = t;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 1028
;1028:		active++;
ADDRLP4 136
ADDRLP4 136
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1029
;1029:	}
LABELV $911
line 1005
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 16
LTI4 $910
line 1034
;1030:
;1031:	// draw the icons and timers
;1032:	//x = 640 - ICON_SIZE - CHAR_WIDTH * 2;
;1033:	//Set x
;1034:	if ( hud[superhud].element == PowerUp1_Icon ||
ADDRLP4 172
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 172
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 27
EQI4 $940
ADDRLP4 172
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 28
EQI4 $940
ADDRLP4 172
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 29
EQI4 $940
ADDRLP4 172
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 30
NEI4 $932
LABELV $940
line 1037
;1035:		 hud[superhud].element == PowerUp2_Icon ||
;1036:		 hud[superhud].element == PowerUp3_Icon ||
;1037:		 hud[superhud].element == PowerUp4_Icon ) {
line 1038
;1038:		if ( hud[superhud].textalign == 2 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $941
line 1040
;1039:			//align left
;1040:			x = hud[superhud].rect[0];
ADDRLP4 160
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ASGNI4
line 1041
;1041:		} else if ( hud[superhud].textalign == 1 ) {
ADDRGP4 $942
JUMPV
LABELV $941
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $945
line 1043
;1042:			//align center
;1043:			x = ((hud[superhud].rect[0] + hud[superhud].rect[2]) - hud[superhud].fontsize[0]) * .5;
ADDRLP4 176
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 160
CNSTF4 1056964608
ADDRLP4 176
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 176
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
ADDRLP4 176
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
SUBI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 1044
;1044:		} else {
ADDRGP4 $946
JUMPV
LABELV $945
line 1046
;1045:			//align right
;1046:			x = (hud[superhud].rect[0] + hud[superhud].rect[2]) - hud[superhud].fontsize[0];
ADDRLP4 176
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 160
ADDRLP4 176
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 176
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
ADDRLP4 176
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1047
;1047:		}
LABELV $946
LABELV $942
line 1048
;1048:	}
LABELV $932
line 1050
;1049:	//for ( i = 0 ; i < active ; i++ ) {
;1050:	if ( (hud[superhud].element == PowerUp1_Icon || hud[superhud].element == PowerUp1_Time) && 0 < active ) {
ADDRLP4 176
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 176
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 27
EQI4 $960
ADDRLP4 176
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 31
NEI4 $956
LABELV $960
CNSTI4 0
ADDRLP4 136
INDIRI4
GEI4 $956
line 1051
;1051:		i = 0;
ADDRLP4 144
CNSTI4 0
ASGNI4
line 1052
;1052:	} else if ( (hud[superhud].element == PowerUp2_Icon || hud[superhud].element == PowerUp2_Time) && 1 < active ) {
ADDRGP4 $957
JUMPV
LABELV $956
ADDRLP4 180
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 180
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 28
EQI4 $965
ADDRLP4 180
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 32
NEI4 $961
LABELV $965
CNSTI4 1
ADDRLP4 136
INDIRI4
GEI4 $961
line 1053
;1053:		i = 1;
ADDRLP4 144
CNSTI4 1
ASGNI4
line 1054
;1054:	} else if ( (hud[superhud].element == PowerUp3_Icon || hud[superhud].element == PowerUp3_Time) && 2 < active ) {
ADDRGP4 $962
JUMPV
LABELV $961
ADDRLP4 184
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 184
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 29
EQI4 $970
ADDRLP4 184
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 33
NEI4 $966
LABELV $970
CNSTI4 2
ADDRLP4 136
INDIRI4
GEI4 $966
line 1055
;1055:		i = 2;
ADDRLP4 144
CNSTI4 2
ASGNI4
line 1056
;1056:	} else if ( (hud[superhud].element == PowerUp4_Icon || hud[superhud].element == PowerUp4_Time) && 3 < active ) {
ADDRGP4 $967
JUMPV
LABELV $966
ADDRLP4 188
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 188
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 30
EQI4 $975
ADDRLP4 188
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 34
NEI4 $905
LABELV $975
CNSTI4 3
ADDRLP4 136
INDIRI4
GEI4 $905
line 1057
;1057:		i = 3;
ADDRLP4 144
CNSTI4 3
ASGNI4
line 1058
;1058:	} else {
line 1059
;1059:		return;
LABELV $972
LABELV $967
LABELV $962
LABELV $957
line 1062
;1060:	}
;1061:	
;1062:	item = BG_FindItemForPowerup( sorted[i] );
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 192
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 152
ADDRLP4 192
INDIRP4
ASGNP4
line 1064
;1063:
;1064:    if (item) {
ADDRLP4 152
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $976
line 1066
;1065:
;1066:		  color = 1;
ADDRLP4 164
CNSTI4 1
ASGNI4
line 1071
;1067:
;1068://		  y -= ICON_SIZE;
;1069:
;1070:		  
;1071:		trap_R_SetColor( hud[superhud].color );
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1073
;1072:		//Don't draw time for flags.
;1073:		if ( hud[superhud].element == PowerUp1_Time ||
ADDRLP4 196
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 196
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 31
EQI4 $987
ADDRLP4 196
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 32
EQI4 $987
ADDRLP4 196
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 33
EQI4 $987
ADDRLP4 196
INDIRI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 34
NEI4 $979
LABELV $987
line 1076
;1074:			 hud[superhud].element == PowerUp2_Time ||
;1075:			 hud[superhud].element == PowerUp3_Time ||
;1076:			 hud[superhud].element == PowerUp4_Time ) {
line 1079
;1077:				 char	time[24];
;1078:				 
;1079:				 t = ps->powerups[ i ] - cg.time;
ADDRLP4 140
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 148
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 1080
;1080:				 if ( !(t < 0 || t > 999000) ) {
ADDRLP4 140
INDIRI4
CNSTI4 0
LTI4 $989
ADDRLP4 140
INDIRI4
CNSTI4 999000
GTI4 $989
line 1081
;1081:					 return;
ADDRGP4 $905
JUMPV
LABELV $989
line 1083
;1082:				 }
;1083:				Com_sprintf(time, sizeof(time), "%i", sortedTime[ i ] / 1000 );
ADDRLP4 200
ARGP4
CNSTI4 24
ARGI4
ADDRGP4 $108
ARGP4
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1084
;1084:				if ( item->giType != IT_TEAM ) {
ADDRLP4 152
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
EQI4 $905
line 1085
;1085:					CG_DrawStringExt( hud[superhud].rect[0], hud[superhud].rect[1], time, hud[superhud].color, qfalse, qfalse, hud[superhud].fontsize[0], hud[superhud].fontsize[1], 3, 0, superhud );
ADDRLP4 228
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 232
CNSTI4 504
ADDRLP4 228
INDIRI4
MULI4
ASGNI4
ADDRLP4 232
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ARGI4
ADDRLP4 232
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 200
ARGP4
ADDRLP4 232
INDIRI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRLP4 236
CNSTI4 0
ASGNI4
ADDRLP4 236
INDIRI4
ARGI4
ADDRLP4 236
INDIRI4
ARGI4
ADDRLP4 232
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 232
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 236
INDIRI4
ARGI4
ADDRLP4 228
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1086
;1086:				}
line 1087
;1087:				return;
ADDRGP4 $905
JUMPV
LABELV $979
line 1092
;1088:			}
;1089:		 // CG_DrawField( x, y, 2, sortedTime[ i ] / 1000 );
;1090:		  
;1091:
;1092:		  t = ps->powerups[ sorted[i] ];
ADDRLP4 200
CNSTI4 2
ASGNI4
ADDRLP4 140
ADDRLP4 144
INDIRI4
ADDRLP4 200
INDIRI4
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ADDRLP4 200
INDIRI4
LSHI4
ADDRLP4 148
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ASGNI4
line 1093
;1093:		  if ( t - cg.time >= POWERUP_BLINKS * POWERUP_BLINK_TIME ) {
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 5000
LTI4 $1000
line 1094
;1094:			  trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1095
;1095:		  } else {
ADDRGP4 $1001
JUMPV
LABELV $1000
line 1098
;1096:			  vec4_t	modulate;
;1097:
;1098:			  f = (float)( t - cg.time ) / POWERUP_BLINK_TIME;
ADDRLP4 156
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 1099
;1099:			  f -= (int)f;
ADDRLP4 220
ADDRLP4 156
INDIRF4
ASGNF4
ADDRLP4 156
ADDRLP4 220
INDIRF4
ADDRLP4 220
INDIRF4
CVFI4 4
CVIF4 4
SUBF4
ASGNF4
line 1100
;1100:			  modulate[0] = modulate[1] = modulate[2] = modulate[3] = f;
ADDRLP4 224
ADDRLP4 156
INDIRF4
ASGNF4
ADDRLP4 204+12
ADDRLP4 224
INDIRF4
ASGNF4
ADDRLP4 204+8
ADDRLP4 224
INDIRF4
ASGNF4
ADDRLP4 204+4
ADDRLP4 224
INDIRF4
ASGNF4
ADDRLP4 204
ADDRLP4 224
INDIRF4
ASGNF4
line 1101
;1101:			  trap_R_SetColor( modulate );
ADDRLP4 204
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1102
;1102:		  }
LABELV $1001
line 1104
;1103:
;1104:		  if ( cg.powerupActive == sorted[i] && 
ADDRGP4 cg+130556
INDIRI4
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
NEI4 $1007
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+130560
INDIRI4
SUBI4
CNSTI4 200
GEI4 $1007
line 1105
;1105:			  cg.time - cg.powerupTime < PULSE_TIME ) {
line 1106
;1106:			  f = 1.0 - ( ( (float)cg.time - cg.powerupTime ) / PULSE_TIME );
ADDRLP4 156
CNSTF4 1065353216
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg+130560
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1128792064
DIVF4
SUBF4
ASGNF4
line 1107
;1107:			  size = ICON_SIZE * ( 1.0 + ( PULSE_SCALE - 1.0 ) * f );
ADDRLP4 168
CNSTF4 1111490560
CNSTF4 1056964608
ADDRLP4 156
INDIRF4
MULF4
CNSTF4 1065353216
ADDF4
MULF4
ASGNF4
line 1108
;1108:		  } else {
ADDRGP4 $1008
JUMPV
LABELV $1007
line 1109
;1109:			  size = ICON_SIZE;
ADDRLP4 168
CNSTF4 1111490560
ASGNF4
line 1110
;1110:		  }
LABELV $1008
line 1112
;1111:
;1112:		  CG_DrawPic( hud[superhud].rect[0], hud[superhud].rect[1], 
ADDRLP4 152
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 208
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 208
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 208
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 208
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 208
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 204
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1114
;1113:			  hud[superhud].rect[2], hud[superhud].rect[3], trap_R_RegisterShader( item->icon ) );
;1114:    }
LABELV $976
line 1115
;1115:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1117
;1116:
;1117:	return;
LABELV $905
endproc CG_DrawSuperPowerups 240 44
proc CG_HDrawPickupItem 64 44
line 1127
;1118:}
;1119:#endif // MISSIONPACK
;1120:
;1121:/*
;1122:===================
;1123:CG_DrawPickupItem
;1124:===================
;1125:*/
;1126:#ifndef MISSIONPACK
;1127:static void CG_HDrawPickupItem( int superhud ) {
line 1131
;1128:	int		value;
;1129:	float	*fadeColor;
;1130:	float	*fontFade;//Doesn't remove text...
;1131:	int pos_x = 0, w = 0;//, pos_y = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1133
;1132:
;1133:	if ( cg.snap->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1022
line 1134
;1134:		return;
ADDRGP4 $1021
JUMPV
LABELV $1022
line 1137
;1135:	}
;1136:
;1137:	value = cg.itemPickup;
ADDRLP4 0
ADDRGP4 cg+130812
INDIRI4
ASGNI4
line 1138
;1138:	if ( !value ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1026
line 1139
;1139:		return;
ADDRGP4 $1021
JUMPV
LABELV $1026
line 1143
;1140:	}
;1141:
;1142:
;1143:	fadeColor = CG_FadeColor( cg.itemPickupTime, 3000 );
ADDRGP4 cg+130816
INDIRI4
ARGI4
CNSTI4 3000
ARGI4
ADDRLP4 20
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 20
INDIRP4
ASGNP4
line 1144
;1144:	if ( fadeColor ) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1029
line 1145
;1145:		CG_RegisterItemVisuals( value );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 1146
;1146:		if ( cgs.gametype == GT_CTF && bg_itemlist[value].giType == IT_TEAM && cg.itemPickupFlag == PW_BLUEFLAG ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $1031
ADDRLP4 24
CNSTI4 8
ASGNI4
CNSTI4 52
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist+36
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $1031
ADDRGP4 cg+130824
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $1031
line 1148
;1147:			//CG_Printf("DrawPickup: %i -- %i -- set blue\n", bg_itemlist[value].giType, bg_itemlist[value].giTag );
;1148:			if ( cg_adjustTeamColors.integer && cgs.clientinfo[ cg.clientNum ].team != TEAM_BLUE && cgs.clientinfo[ cg.clientNum ].team != TEAM_SPECTATOR && cgs.clientinfo[ cg.clientNum ].team != TEAM_SPECTATOR && strlen(cg_EnemyColors.string) >= cg_adjustTeamColors.integer ) {
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
CNSTI4 0
EQI4 $1036
ADDRLP4 28
CNSTI4 1776
ASGNI4
ADDRLP4 28
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
EQI4 $1036
ADDRLP4 32
CNSTI4 3
ASGNI4
ADDRLP4 28
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
EQI4 $1036
ADDRLP4 28
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
EQI4 $1036
ADDRGP4 cg_EnemyColors+16
ARGP4
ADDRLP4 36
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
LTI4 $1036
line 1149
;1149:				fadeColor[0] = g_color_table[ ColorIndex( cg_EnemyColors.string[cg_adjustTeamColors.integer - 1] ) ][0];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 40
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 40
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
INDIRF4
ASGNF4
line 1150
;1150:				fadeColor[1] = g_color_table[ ColorIndex( cg_EnemyColors.string[cg_adjustTeamColors.integer - 1] ) ][1];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 44
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+4
ADDP4
INDIRF4
ASGNF4
line 1151
;1151:				fadeColor[2] = g_color_table[ ColorIndex( cg_EnemyColors.string[cg_adjustTeamColors.integer - 1] ) ][2];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 48
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 48
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+8
ADDP4
INDIRF4
ASGNF4
line 1152
;1152:			} else if ( cg_adjustTeamColors.integer && cg_forceColors.integer && cgs.clientinfo[ cg.clientNum ].team == TEAM_BLUE && strlen(colors.string) >= cg_adjustTeamColors.integer ) {
ADDRGP4 $1032
JUMPV
LABELV $1036
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $1061
ADDRGP4 cg_forceColors+12
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $1061
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1061
ADDRGP4 colors+16
ARGP4
ADDRLP4 44
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
LTI4 $1061
line 1153
;1153:				fadeColor[0] = g_color_table[ ColorIndex( colors.string[cg_adjustTeamColors.integer - 1] ) ][0];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 colors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 48
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 48
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
INDIRF4
ASGNF4
line 1154
;1154:				fadeColor[1] = g_color_table[ ColorIndex( colors.string[cg_adjustTeamColors.integer - 1] ) ][1];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 colors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 52
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+4
ADDP4
INDIRF4
ASGNF4
line 1155
;1155:				fadeColor[2] = g_color_table[ ColorIndex( colors.string[cg_adjustTeamColors.integer - 1] ) ][2];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 colors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+8
ADDP4
INDIRF4
ASGNF4
line 1156
;1156:			} else if ( cg_adjustTeamColors.integer && cgs.clientinfo[ cg.clientNum ].team == TEAM_BLUE && strlen(cg_TeamColors.string) >= cg_adjustTeamColors.integer ) {
ADDRGP4 $1032
JUMPV
LABELV $1061
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
CNSTI4 0
EQI4 $1032
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1032
ADDRGP4 cg_TeamColors+16
ARGP4
ADDRLP4 48
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
LTI4 $1032
line 1157
;1157:				fadeColor[0] = g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ][0];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 52
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
INDIRF4
ASGNF4
line 1158
;1158:				fadeColor[1] = g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ][1];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+4
ADDP4
INDIRF4
ASGNF4
line 1159
;1159:				fadeColor[2] = g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ][2];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 60
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 60
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+8
ADDP4
INDIRF4
ASGNF4
line 1160
;1160:			}
line 1161
;1161:		} else if ( cgs.gametype == GT_CTF && bg_itemlist[value].giType == IT_TEAM && cg.itemPickupFlag == PW_REDFLAG ) {
ADDRGP4 $1032
JUMPV
LABELV $1031
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $1100
CNSTI4 52
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist+36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $1100
ADDRGP4 cg+130824
INDIRI4
CNSTI4 7
NEI4 $1100
line 1163
;1162:			//CG_Printf("DrawPickup: %i -- %i -- set red\n", bg_itemlist[value].giType, bg_itemlist[value].giTag );
;1163:			if ( cg_adjustTeamColors.integer && cgs.clientinfo[ cg.clientNum ].team != TEAM_RED && cgs.clientinfo[ cg.clientNum ].team != TEAM_SPECTATOR && cgs.clientinfo[ cg.clientNum ].team != TEAM_SPECTATOR && strlen(cg_EnemyColors.string) >= cg_adjustTeamColors.integer ) {
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
CNSTI4 0
EQI4 $1105
ADDRLP4 28
CNSTI4 1776
ASGNI4
ADDRLP4 28
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1105
ADDRLP4 32
CNSTI4 3
ASGNI4
ADDRLP4 28
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
EQI4 $1105
ADDRLP4 28
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
EQI4 $1105
ADDRGP4 cg_EnemyColors+16
ARGP4
ADDRLP4 36
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
LTI4 $1105
line 1164
;1164:				fadeColor[0] = g_color_table[ ColorIndex( cg_EnemyColors.string[cg_adjustTeamColors.integer - 1] ) ][0];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 40
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 40
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
INDIRF4
ASGNF4
line 1165
;1165:				fadeColor[1] = g_color_table[ ColorIndex( cg_EnemyColors.string[cg_adjustTeamColors.integer - 1] ) ][1];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 44
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+4
ADDP4
INDIRF4
ASGNF4
line 1166
;1166:				fadeColor[2] = g_color_table[ ColorIndex( cg_EnemyColors.string[cg_adjustTeamColors.integer - 1] ) ][2];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_EnemyColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 48
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 48
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+8
ADDP4
INDIRF4
ASGNF4
line 1167
;1167:			} else if ( cg_adjustTeamColors.integer && cg_forceColors.integer && cgs.clientinfo[ cg.clientNum ].team == TEAM_RED && strlen(colors.string) >= cg_adjustTeamColors.integer ) {
ADDRGP4 $1101
JUMPV
LABELV $1105
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $1130
ADDRGP4 cg_forceColors+12
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $1130
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1130
ADDRGP4 colors+16
ARGP4
ADDRLP4 44
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
LTI4 $1130
line 1168
;1168:				fadeColor[0] = g_color_table[ ColorIndex( colors.string[cg_adjustTeamColors.integer - 1] ) ][0];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 colors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 48
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 48
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
INDIRF4
ASGNF4
line 1169
;1169:				fadeColor[1] = g_color_table[ ColorIndex( colors.string[cg_adjustTeamColors.integer - 1] ) ][1];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 colors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 52
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+4
ADDP4
INDIRF4
ASGNF4
line 1170
;1170:				fadeColor[2] = g_color_table[ ColorIndex( colors.string[cg_adjustTeamColors.integer - 1] ) ][2];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 colors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+8
ADDP4
INDIRF4
ASGNF4
line 1171
;1171:			} else if ( cg_adjustTeamColors.integer && cgs.clientinfo[ cg.clientNum ].team == TEAM_RED && strlen(cg_TeamColors.string) >= cg_adjustTeamColors.integer ) {
ADDRGP4 $1101
JUMPV
LABELV $1130
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
CNSTI4 0
EQI4 $1101
CNSTI4 1776
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1101
ADDRGP4 cg_TeamColors+16
ARGP4
ADDRLP4 48
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
LTI4 $1101
line 1172
;1172:				fadeColor[0] = g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ][0];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 52
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
INDIRF4
ASGNF4
line 1173
;1173:				fadeColor[1] = g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ][1];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+4
ADDP4
INDIRF4
ASGNF4
line 1174
;1174:				fadeColor[2] = g_color_table[ ColorIndex( cg_TeamColors.string[cg_adjustTeamColors.integer - 1] ) ][2];
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
ADDRGP4 cg_TeamColors+16-1
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 60
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 60
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table+8
ADDP4
INDIRF4
ASGNF4
line 1175
;1175:			}
line 1176
;1176:		} else {
ADDRGP4 $1101
JUMPV
LABELV $1100
line 1177
;1177:			fadeColor[0] = hud[superhud].fade[0];
ADDRLP4 8
INDIRP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+100
ADDP4
INDIRF4
ASGNF4
line 1178
;1178:			fadeColor[1] = hud[superhud].fade[1];
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+100+4
ADDP4
INDIRF4
ASGNF4
line 1179
;1179:			fadeColor[2] = hud[superhud].fade[2];
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+100+8
ADDP4
INDIRF4
ASGNF4
line 1180
;1180:		}
LABELV $1101
LABELV $1032
line 1181
;1181:		trap_R_SetColor( fadeColor );
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1182
;1182:		if ( cg_adjustTeamColors.integer && bg_itemlist[value].giType == IT_TEAM ) {
ADDRGP4 cg_adjustTeamColors+12
INDIRI4
CNSTI4 0
EQI4 $1174
CNSTI4 52
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist+36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $1174
line 1183
;1183:			CG_DrawPic( (float)hud[superhud].rect[0], (float)hud[superhud].rect[1], ICON_SIZE, ICON_SIZE, trap_R_RegisterShader("icons/iconf_fla1") );
ADDRGP4 $758
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 32
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
CNSTF4 1111490560
ASGNF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1184
;1184:		} else {
ADDRGP4 $1175
JUMPV
LABELV $1174
line 1185
;1185:			CG_DrawPic( (float)hud[superhud].rect[0], (float)hud[superhud].rect[1], ICON_SIZE, ICON_SIZE, cg_items[ value ].icon );
ADDRLP4 28
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 28
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 28
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
CNSTF4 1111490560
ASGNF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 32
INDIRF4
ARGF4
CNSTI4 24
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1186
;1186:		}
LABELV $1175
line 1187
;1187:	}
LABELV $1029
line 1190
;1188:
;1189:
;1190:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1185
line 1191
;1191:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1192
;1192:	}
LABELV $1185
line 1194
;1193:
;1194:	fontFade = CG_FadeColor( cg.itemPickupTime, 3000 );
ADDRGP4 cg+130816
INDIRI4
ARGI4
CNSTI4 3000
ARGI4
ADDRLP4 24
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ASGNP4
line 1196
;1195:
;1196:	if ( fontFade ) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1197
line 1197
;1197:		fontFade[0] = hud[superhud].color[0];
ADDRLP4 4
INDIRP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+68
ADDP4
INDIRF4
ASGNF4
line 1198
;1198:		fontFade[1] = hud[superhud].color[1];
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+68+4
ADDP4
INDIRF4
ASGNF4
line 1199
;1199:		fontFade[2] = hud[superhud].color[2];
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+68+8
ADDP4
INDIRF4
ASGNF4
line 1200
;1200:		CG_DrawStringExt(pos_x, hud[superhud].rect[1], bg_itemlist[ value ].pickup_name, fontFade, qfalse, qfalse,
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 28
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 32
CNSTI4 504
ADDRLP4 28
INDIRI4
MULI4
ASGNI4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
CNSTI4 52
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist+28
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1202
;1201:						hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
;1202:	}
LABELV $1197
line 1204
;1203:
;1204:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1206
;1205:	
;1206:	return;
LABELV $1021
endproc CG_HDrawPickupItem 64 44
proc CG_HDrawLagometer 88 44
line 1229
;1207:}
;1208:#endif // MISSIONPACK
;1209:
;1210:
;1211://===========================================================================================
;1212:
;1213:/*
;1214:===============================================================================
;1215:
;1216:LAGOMETER
;1217:
;1218:===============================================================================
;1219:*/
;1220:
;1221:#define	MAX_LAGOMETER_PING	900
;1222:#define	MAX_LAGOMETER_RANGE	300
;1223:
;1224:/*
;1225:==============
;1226:CG_DrawLagometer
;1227:==============
;1228:*/
;1229:static void CG_HDrawLagometer( int superhud ) {
line 1236
;1230:	int		a, x, y, i;
;1231:	float	v;
;1232:	float	ax, ay, aw, ah, mid, range;
;1233:	int		color;
;1234:	float	vscale;
;1235:
;1236:	if ( !cg_lagometer.integer || cgs.localServer ) {
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRGP4 cg_lagometer+12
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1215
ADDRGP4 cgs+31452
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1211
LABELV $1215
line 1237
;1237:		CG_DrawDisconnect();
ADDRGP4 CG_DrawDisconnect
CALLV
pop
line 1238
;1238:		return;
ADDRGP4 $1210
JUMPV
LABELV $1211
line 1248
;1239:	}
;1240:
;1241:	//
;1242:	// draw the graph
;1243:	//
;1244:#ifdef MISSIONPACK
;1245:	x = 640 - 48;
;1246:	y = 480 - 144;
;1247:#else
;1248:	if ( hud[superhud].element == NetGraph ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 24
NEI4 $1216
line 1249
;1249:		x = hud[superhud].rect[0];
ADDRLP4 44
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ASGNI4
line 1250
;1250:		y = hud[superhud].rect[1];
ADDRLP4 48
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ASGNI4
line 1251
;1251:	} else {
ADDRGP4 $1217
JUMPV
LABELV $1216
line 1252
;1252:		x = 640 - 48;
ADDRLP4 44
CNSTI4 592
ASGNI4
line 1253
;1253:		y = 480 - 48;
ADDRLP4 48
CNSTI4 432
ASGNI4
line 1254
;1254:	}
LABELV $1217
line 1257
;1255:#endif
;1256:
;1257:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1259
;1258:
;1259:	if (  hud[superhud].element == NetGraphPing ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 25
NEI4 $1222
line 1260
;1260:			int pos_x = 0, w = 0;//, pos_y = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRLP4 60
CNSTI4 0
ASGNI4
line 1263
;1261:			char	s[6];
;1262:
;1263:			Com_sprintf(s, 5, "%i", cg.snap->ping);
ADDRLP4 64
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 $108
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1264
;1264:			w = CG_DrawStrlen( s ) * hud[superhud].fontsize[0];
ADDRLP4 64
ARGP4
ADDRLP4 72
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
ASGNI4
line 1266
;1265:
;1266:			if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1227
line 1267
;1267:				CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 76
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1268
;1268:			}
LABELV $1227
line 1271
;1269:
;1270:			//we need to "align"
;1271:			CG_DrawStringExt( pos_x, hud[superhud].rect[1], s, hud[superhud].color, qfalse, qfalse,
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 76
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 80
CNSTI4 504
ADDRLP4 76
INDIRI4
MULI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 64
ARGP4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 80
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1273
;1272:								hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
;1273:	}
LABELV $1222
line 1275
;1274:
;1275:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1244
line 1276
;1276:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 56
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1277
;1277:	}
LABELV $1244
line 1279
;1278:
;1279:	if ( hud[superhud].image ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+496
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1255
line 1280
;1280:		CG_DrawPic( hud[superhud].rect[0], hud[superhud].rect[1], 48, 48, hud[superhud].image );
ADDRLP4 56
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1111490560
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+496
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1281
;1281:	}
LABELV $1255
line 1283
;1282:
;1283:	ax = x;
ADDRLP4 24
ADDRLP4 44
INDIRI4
CVIF4 4
ASGNF4
line 1284
;1284:	ay = y;
ADDRLP4 36
ADDRLP4 48
INDIRI4
CVIF4 4
ASGNF4
line 1285
;1285:	aw = 48;
ADDRLP4 12
CNSTF4 1111490560
ASGNF4
line 1286
;1286:	ah = 48;
ADDRLP4 32
CNSTF4 1111490560
ASGNF4
line 1287
;1287:	CG_AdjustFrom640( &ax, &ay, &aw, &ah );
ADDRLP4 24
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 32
ARGP4
ADDRGP4 CG_AdjustFrom640
CALLV
pop
line 1289
;1288:
;1289:	color = -1;
ADDRLP4 20
CNSTI4 -1
ASGNI4
line 1290
;1290:	range = ah / 3;
ADDRLP4 16
ADDRLP4 32
INDIRF4
CNSTF4 1077936128
DIVF4
ASGNF4
line 1291
;1291:	mid = ay + range;
ADDRLP4 40
ADDRLP4 36
INDIRF4
ADDRLP4 16
INDIRF4
ADDF4
ASGNF4
line 1293
;1292:
;1293:	vscale = range / MAX_LAGOMETER_RANGE;
ADDRLP4 28
ADDRLP4 16
INDIRF4
CNSTF4 1133903872
DIVF4
ASGNF4
line 1296
;1294:
;1295:	// draw the frame interpoalte / extrapolate graph
;1296:	for ( a = 0 ; a < aw ; a++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1265
JUMPV
LABELV $1262
line 1297
;1297:		i = ( lagometer.frameCount - 1 - a ) & (LAG_SAMPLES - 1);
ADDRLP4 8
ADDRGP4 lagometer+512
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 127
BANDI4
ASGNI4
line 1298
;1298:		v = lagometer.frameSamples[i];
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1299
;1299:		v *= vscale;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 1300
;1300:		if ( v > 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $1267
line 1301
;1301:			if ( color != 1 ) {
ADDRLP4 20
INDIRI4
CNSTI4 1
EQI4 $1269
line 1302
;1302:				color = 1;
ADDRLP4 20
CNSTI4 1
ASGNI4
line 1303
;1303:				trap_R_SetColor( g_color_table[ColorIndex(COLOR_YELLOW)] );
CNSTI4 51
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1304
;1304:			}
LABELV $1269
line 1305
;1305:			if ( v > range ) {
ADDRLP4 0
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $1271
line 1306
;1306:				v = range;
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1307
;1307:			}
LABELV $1271
line 1308
;1308:			trap_R_DrawStretchPic ( ax + aw - a, mid - v, 1, v, 0, 0, 0, 0, cgs.media.whiteShader );
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 40
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRGP4 cgs+156680+36
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1309
;1309:		} else if ( v < 0 ) {
ADDRGP4 $1268
JUMPV
LABELV $1267
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $1275
line 1310
;1310:			if ( color != 2 ) {
ADDRLP4 20
INDIRI4
CNSTI4 2
EQI4 $1277
line 1311
;1311:				color = 2;
ADDRLP4 20
CNSTI4 2
ASGNI4
line 1312
;1312:				trap_R_SetColor( g_color_table[ColorIndex(COLOR_BLUE)] );
CNSTI4 52
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1313
;1313:			}
LABELV $1277
line 1314
;1314:			v = -v;
ADDRLP4 0
ADDRLP4 0
INDIRF4
NEGF4
ASGNF4
line 1315
;1315:			if ( v > range ) {
ADDRLP4 0
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $1279
line 1316
;1316:				v = range;
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1317
;1317:			}
LABELV $1279
line 1318
;1318:			trap_R_DrawStretchPic( ax + aw - a, mid, 1, v, 0, 0, 0, 0, cgs.media.whiteShader );
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRGP4 cgs+156680+36
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1319
;1319:		}
LABELV $1275
LABELV $1268
line 1320
;1320:	}
LABELV $1263
line 1296
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1265
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
LTF4 $1262
line 1323
;1321:
;1322:	// draw the snapshot latency / drop graph
;1323:	range = ah / 2;
ADDRLP4 16
ADDRLP4 32
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 1324
;1324:	vscale = range / MAX_LAGOMETER_PING;
ADDRLP4 28
ADDRLP4 16
INDIRF4
CNSTF4 1147207680
DIVF4
ASGNF4
line 1326
;1325:
;1326:	for ( a = 0 ; a < aw ; a++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1286
JUMPV
LABELV $1283
line 1327
;1327:		i = ( lagometer.snapshotCount - 1 - a ) & (LAG_SAMPLES - 1);
ADDRLP4 8
ADDRGP4 lagometer+1540
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 127
BANDI4
ASGNI4
line 1328
;1328:		v = lagometer.snapshotSamples[i];
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+1028
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1329
;1329:		if ( v > 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $1289
line 1330
;1330:			if ( lagometer.snapshotFlags[i] & SNAPFLAG_RATE_DELAYED ) {
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 lagometer+516
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1291
line 1331
;1331:				if ( color != 5 ) {
ADDRLP4 20
INDIRI4
CNSTI4 5
EQI4 $1292
line 1332
;1332:					color = 5;	// YELLOW for rate delay
ADDRLP4 20
CNSTI4 5
ASGNI4
line 1333
;1333:					trap_R_SetColor( g_color_table[ColorIndex(COLOR_YELLOW)] );
CNSTI4 51
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1334
;1334:				}
line 1335
;1335:			} else {
ADDRGP4 $1292
JUMPV
LABELV $1291
line 1336
;1336:				if ( color != 3 ) {
ADDRLP4 20
INDIRI4
CNSTI4 3
EQI4 $1296
line 1337
;1337:					color = 3;
ADDRLP4 20
CNSTI4 3
ASGNI4
line 1338
;1338:					trap_R_SetColor( g_color_table[ColorIndex(COLOR_GREEN)] );
CNSTI4 50
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1339
;1339:				}
LABELV $1296
line 1340
;1340:			}
LABELV $1292
line 1341
;1341:			v = v * vscale;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 1342
;1342:			if ( v > range ) {
ADDRLP4 0
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $1298
line 1343
;1343:				v = range;
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1344
;1344:			}
LABELV $1298
line 1345
;1345:			trap_R_DrawStretchPic( ax + aw - a, ay + ah - v, 1, v, 0, 0, 0, 0, cgs.media.whiteShader );
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 36
INDIRF4
ADDRLP4 32
INDIRF4
ADDF4
ADDRLP4 0
INDIRF4
SUBF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRGP4 cgs+156680+36
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1346
;1346:		} else if ( v < 0 ) {
ADDRGP4 $1290
JUMPV
LABELV $1289
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $1302
line 1347
;1347:			if ( color != 4 ) {
ADDRLP4 20
INDIRI4
CNSTI4 4
EQI4 $1304
line 1348
;1348:				color = 4;		// RED for dropped snapshots
ADDRLP4 20
CNSTI4 4
ASGNI4
line 1349
;1349:				trap_R_SetColor( g_color_table[ColorIndex(COLOR_RED)] );
CNSTI4 49
ARGI4
ADDRLP4 56
ADDRGP4 ColorIndex
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1350
;1350:			}
LABELV $1304
line 1351
;1351:			trap_R_DrawStretchPic( ax + aw - a, ay + ah - range, 1, range, 0, 0, 0, 0, cgs.media.whiteShader );
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 36
INDIRF4
ADDRLP4 32
INDIRF4
ADDF4
ADDRLP4 16
INDIRF4
SUBF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRGP4 cgs+156680+36
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 1352
;1352:		}
LABELV $1302
LABELV $1290
line 1353
;1353:	}
LABELV $1284
line 1326
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1286
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
LTF4 $1283
line 1355
;1354:
;1355:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1357
;1356:
;1357:	if ( cg_nopredict.integer || cg_synchronousClients.integer ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRGP4 cg_nopredict+12
INDIRI4
ADDRLP4 56
INDIRI4
NEI4 $1312
ADDRGP4 cg_synchronousClients+12
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $1308
LABELV $1312
line 1359
;1358:		//CG_DrawBigString( ax, ay, "snc", 1.0 );
;1359:		CG_DrawStringExt(ax, ay, "snc", colorBlue, qfalse, qfalse,
ADDRLP4 24
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 36
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 $1313
ARGP4
ADDRGP4 colorBlue
ARGP4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 64
CNSTI4 16
ASGNI4
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1361
;1360:								BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, 0 );
;1361:	}
LABELV $1308
line 1363
;1362:
;1363:	CG_DrawDisconnect();
ADDRGP4 CG_DrawDisconnect
CALLV
pop
line 1364
;1364:}
LABELV $1210
endproc CG_HDrawLagometer 88 44
proc CG_HDrawCrosshairNames 32 44
line 1379
;1365:
;1366:/*
;1367:================================================================================
;1368:
;1369:CROSSHAIR
;1370:
;1371:================================================================================
;1372:*/
;1373:
;1374:/*
;1375:=====================
;1376:CG_DrawCrosshairNames
;1377:=====================
;1378:*/
;1379:static void CG_HDrawCrosshairNames( int superhud ) {
line 1383
;1380:	float		*color;
;1381:	char		*name;
;1382:
;1383:	if ( !cg_drawCrosshair.integer ) {
ADDRGP4 cg_drawCrosshair+12
INDIRI4
CNSTI4 0
NEI4 $1315
line 1384
;1384:		return;
ADDRGP4 $1314
JUMPV
LABELV $1315
line 1386
;1385:	}
;1386:	if ( !cg_drawCrosshairNames.integer ) {
ADDRGP4 cg_drawCrosshairNames+12
INDIRI4
CNSTI4 0
NEI4 $1318
line 1387
;1387:		return;
ADDRGP4 $1314
JUMPV
LABELV $1318
line 1389
;1388:	}
;1389:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $1321
line 1390
;1390:		return;
ADDRGP4 $1314
JUMPV
LABELV $1321
line 1394
;1391:	}
;1392:
;1393:	// scan the known entities to see if the crosshair is sighted on one
;1394:	CG_ScanForCrosshairEntity();
ADDRGP4 CG_ScanForCrosshairEntity
CALLV
pop
line 1397
;1395:
;1396:	// draw the name of the player being looked at
;1397:	color = CG_FadeColor( cg.crosshairClientTime, 1000 );
ADDRGP4 cg+130552
INDIRI4
ARGI4
CNSTI4 1000
ARGI4
ADDRLP4 8
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1398
;1398:	if ( !color ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1325
line 1399
;1399:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1400
;1400:		return;
ADDRGP4 $1314
JUMPV
LABELV $1325
line 1403
;1401:	}
;1402:
;1403:	if ( (cg_drawCrosshairNames.integer > 1 && cgs.gametype < GT_TEAM) || (cg_drawCrosshairNames.integer == 2 && cgs.clientinfo[ cg.crosshairClientNum ].team == cgs.clientinfo[ cg.clientNum ].team && cgs.gametype >= GT_TEAM) ||
ADDRGP4 cg_drawCrosshairNames+12
INDIRI4
CNSTI4 1
LEI4 $1348
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $1349
LABELV $1348
ADDRGP4 cg_drawCrosshairNames+12
INDIRI4
CNSTI4 2
NEI4 $1351
ADDRLP4 12
CNSTI4 1776
ASGNI4
ADDRLP4 12
INDIRI4
ADDRGP4 cg+130548
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
NEI4 $1351
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $1349
LABELV $1351
ADDRLP4 16
CNSTI4 3
ASGNI4
ADDRGP4 cg_drawCrosshairNames+12
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $1327
ADDRLP4 20
CNSTI4 1776
ASGNI4
ADDRLP4 20
INDIRI4
ADDRGP4 cg+130548
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
ADDRGP4 cg+4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
EQI4 $1327
ADDRGP4 cgs+31456
INDIRI4
ADDRLP4 16
INDIRI4
LTI4 $1327
LABELV $1349
line 1404
;1404:		 (cg_drawCrosshairNames.integer == 3 && cgs.clientinfo[ cg.crosshairClientNum ].team != cgs.clientinfo[ cg.clientNum ].team && cgs.gametype >= GT_TEAM) ) {
line 1405
;1405:			return;
ADDRGP4 $1314
JUMPV
LABELV $1327
line 1408
;1406:	}
;1407:
;1408:	name = cgs.clientinfo[ cg.crosshairClientNum ].name;
ADDRLP4 4
CNSTI4 1776
ADDRGP4 cg+130548
INDIRI4
MULI4
ADDRGP4 cgs+40960+4
ADDP4
ASGNP4
line 1411
;1409:
;1410:	//CG_DrawBigString( 320 - w / 2, 170, name, color[3] * 0.5f );
;1411:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1355
line 1412
;1412:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1413
;1413:	}
LABELV $1355
line 1415
;1414:
;1415:	CG_DrawStringExt( 0, 0, name, NULL, qfalse, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
CNSTI4 16
ASGNI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1417
;1416:
;1417:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1418
;1418:}
LABELV $1314
endproc CG_HDrawCrosshairNames 32 44
export CG_DrawChat
proc CG_DrawChat 4 44
line 1427
;1419:
;1420:
;1421://==============================================================================
;1422:/*
;1423:=================
;1424:CG_DrawChat
;1425:=================
;1426:*/
;1427:void CG_DrawChat ( int superhud, int shChatNum ) {
line 1430
;1428:	//This is kinda fun.
;1429:	//
;1430:	if ( chat[shChatNum].time ) {
CNSTI4 260
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 chat+256
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1367
line 1432
;1431:		//CG_Printf("Chat: %s - %i\n", hud[superhud].name, shChatNum);
;1432:		if ( cg.time < (chat[shChatNum].time + hud[superhud].time) ) {
ADDRGP4 cg+107604
INDIRI4
CNSTI4 260
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 chat+256
ADDP4
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+168
ADDP4
INDIRI4
ADDI4
GEI4 $1370
line 1433
;1433:			CG_DrawStringExt(0, 0, chat[shChatNum].msg, colorWhite, qfalse, qfalse, 0, 0, MAX_SAY_TEXT, 0, superhud);
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 260
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 chat
ADDP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 256
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1434
;1434:		} else {
ADDRGP4 $1371
JUMPV
LABELV $1370
line 1435
;1435:			chat[shChatNum].time = 0;
CNSTI4 260
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 chat+256
ADDP4
CNSTI4 0
ASGNI4
line 1436
;1436:		}
LABELV $1371
line 1437
;1437:	}
LABELV $1367
line 1438
;1438:}
LABELV $1366
endproc CG_DrawChat 4 44
proc CG_HDrawSpectator 8 44
line 1445
;1439:
;1440:/*
;1441:=================
;1442:CG_DrawSpectator
;1443:=================
;1444:*/
;1445:static void CG_HDrawSpectator( int superhud) {
line 1446
;1446:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1377
line 1447
;1447:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 0
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1448
;1448:	}
LABELV $1377
line 1449
;1449:	CG_DrawStringExt(320 - 9 * 8, 440, "SPECTATOR", colorWhite, qfalse, qfalse,
CNSTI4 248
ARGI4
CNSTI4 440
ARGI4
ADDRGP4 $1388
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
CNSTI4 16
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1451
;1450:								BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
;1451:}
LABELV $1376
endproc CG_HDrawSpectator 8 44
proc CG_HDrawVote 20 44
line 1458
;1452:
;1453:/*
;1454:=================
;1455:CG_DrawVote
;1456:=================
;1457:*/
;1458:static void CG_HDrawVote( int superhud ) {
line 1462
;1459:	char	*s;
;1460:	int		sec;
;1461:
;1462:	if ( !cgs.voteTime ) {
ADDRGP4 cgs+31676
INDIRI4
CNSTI4 0
NEI4 $1390
line 1463
;1463:		return;
ADDRGP4 $1389
JUMPV
LABELV $1390
line 1472
;1464:	}
;1465:
;1466:	// play a talk beep whenever it is modified
;1467:	/*if ( cgs.voteModified ) {
;1468:		cgs.voteModified = qfalse;
;1469:		trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
;1470:	}*/
;1471:
;1472:	sec = ( VOTE_TIME - ( cg.time - cgs.voteTime ) ) / 1000;
ADDRLP4 0
CNSTI4 30000
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+31676
INDIRI4
SUBI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 1473
;1473:	if ( sec < 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $1395
line 1474
;1474:		sec = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1475
;1475:	}
LABELV $1395
line 1482
;1476:#ifdef MISSIONPACK
;1477:	s = va("VOTE(%i):%s yes:%i no:%i", sec, cgs.voteString, cgs.voteYes, cgs.voteNo);
;1478:	CG_DrawSmallString( 0, 58, s, 1.0F );
;1479:	s = "or press ESC then click Vote";
;1480:	CG_DrawSmallString( 0, 58 + SMALLCHAR_HEIGHT + 2, s, 1.0F );
;1481:#else
;1482:	s = va("VOTE(%i):%s yes:%i no:%i", sec, cgs.voteString, cgs.voteYes, cgs.voteNo );
ADDRGP4 $1397
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 cgs+31688
ARGP4
ADDRGP4 cgs+31680
INDIRI4
ARGI4
ADDRGP4 cgs+31684
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 1484
;1483:
;1484:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1401
line 1485
;1485:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 12
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 12
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1486
;1486:	} 
LABELV $1401
line 1487
;1487:	CG_DrawStringExt( 0, 58, s, colorWhite, qtrue, qtrue, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
CNSTI4 58
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
CNSTI4 8
ARGI4
CNSTI4 16
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1490
;1488:
;1489:#endif
;1490:}
LABELV $1389
endproc CG_HDrawVote 20 44
proc CG_HDrawTeamVote 28 44
line 1497
;1491:
;1492:/*
;1493:=================
;1494:CG_DrawTeamVote
;1495:=================
;1496:*/
;1497:static void CG_HDrawTeamVote( int superhud ) {
line 1501
;1498:	char	*s;
;1499:	int		sec, cs_offset;
;1500:
;1501:	if ( cgs.clientinfo->team == TEAM_RED )
ADDRGP4 cgs+40960+68
INDIRI4
CNSTI4 1
NEI4 $1413
line 1502
;1502:		cs_offset = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1414
JUMPV
LABELV $1413
line 1503
;1503:	else if ( cgs.clientinfo->team == TEAM_BLUE )
ADDRGP4 cgs+40960+68
INDIRI4
CNSTI4 2
NEI4 $1412
line 1504
;1504:		cs_offset = 1;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 1506
;1505:	else
;1506:		return;
LABELV $1418
LABELV $1414
line 1508
;1507:
;1508:	if ( !cgs.teamVoteTime[cs_offset] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32712
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1421
line 1509
;1509:		return;
ADDRGP4 $1412
JUMPV
LABELV $1421
line 1518
;1510:	}
;1511:
;1512:	// play a talk beep whenever it is modified
;1513:	/*if ( cgs.teamVoteModified[cs_offset] ) {
;1514:		cgs.teamVoteModified[cs_offset] = qfalse;
;1515:		trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
;1516:	}*/
;1517:
;1518:	sec = ( VOTE_TIME - ( cg.time - cgs.teamVoteTime[cs_offset] ) ) / 1000;
ADDRLP4 4
CNSTI4 30000
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32712
ADDP4
INDIRI4
SUBI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 1519
;1519:	if ( sec < 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $1426
line 1520
;1520:		sec = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1521
;1521:	}
LABELV $1426
line 1522
;1522:	s = va("TEAMVOTE(%i):%s yes:%i no:%i", sec, cgs.teamVoteString[cs_offset],
ADDRGP4 $1428
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+32736
ADDP4
ARGP4
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRGP4 cgs+32720
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ADDRGP4 cgs+32728
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 20
INDIRP4
ASGNP4
line 1524
;1523:							cgs.teamVoteYes[cs_offset], cgs.teamVoteNo[cs_offset] );
;1524:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1432
line 1525
;1525:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1526
;1526:	}
LABELV $1432
line 1527
;1527:	CG_DrawStringExt( 0, 90, s, colorWhite, qtrue, qfalse, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0, 0, superhud );
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
CNSTI4 90
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
CNSTI4 8
ARGI4
CNSTI4 16
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1528
;1528:}
LABELV $1412
endproc CG_HDrawTeamVote 28 44
proc CG_HDrawFollow 544 44
line 1535
;1529:
;1530:/*
;1531:=================
;1532:CG_DrawFollow
;1533:=================
;1534:*/
;1535:static qboolean CG_HDrawFollow( int superhud ) {
line 1541
;1536://	float		x;
;1537:	vec4_t		color;
;1538:	const char	*name;
;1539:	char	s[512];
;1540:
;1541:	if ( !(cg.snap->ps.pm_flags & PMF_FOLLOW) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1444
line 1542
;1542:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1443
JUMPV
LABELV $1444
line 1544
;1543:	}
;1544:	color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1545
;1545:	color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1546
;1546:	color[2] = 1;
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1547
;1547:	color[3] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1550
;1548:
;1549:
;1550:	name = cgs.clientinfo[ cg.snap->ps.clientNum ].name;
ADDRLP4 528
CNSTI4 1776
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+4
ADDP4
ASGNP4
line 1551
;1551:	Com_sprintf(s, sizeof(s), "Following %s", name);
ADDRLP4 16
ARGP4
CNSTI4 512
ARGI4
ADDRGP4 $1453
ARGP4
ADDRLP4 528
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1553
;1552:
;1553:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1454
line 1554
;1554:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 532
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 532
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 532
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 532
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 532
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 532
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1555
;1555:	}
LABELV $1454
line 1556
;1556:	CG_DrawStringExt( 0, hud[superhud].rect[1], s, hud[superhud].color, qfalse, qfalse,
ADDRLP4 532
CNSTI4 0
ASGNI4
ADDRLP4 532
INDIRI4
ARGI4
ADDRLP4 536
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 540
CNSTI4 504
ADDRLP4 536
INDIRI4
MULI4
ASGNI4
ADDRLP4 540
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 540
INDIRI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRLP4 532
INDIRI4
ARGI4
ADDRLP4 532
INDIRI4
ARGI4
ADDRLP4 540
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 540
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 532
INDIRI4
ARGI4
ADDRLP4 532
INDIRI4
ARGI4
ADDRLP4 536
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1559
;1557:								hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
;1558:
;1559:	return qtrue;
CNSTI4 1
RETI4
LABELV $1443
endproc CG_HDrawFollow 544 44
proc CG_HDrawAmmoWarning 20 44
line 1569
;1560:}
;1561:
;1562:
;1563:
;1564:/*
;1565:=================
;1566:CG_DrawAmmoWarning
;1567:=================
;1568:*/
;1569:static void CG_HDrawAmmoWarning( int superhud ) {
line 1573
;1570:	const char	*s;
;1571:	int			w;
;1572:
;1573:	if ( cg_drawAmmoWarning.integer == 0 ) {
ADDRGP4 cg_drawAmmoWarning+12
INDIRI4
CNSTI4 0
NEI4 $1472
line 1574
;1574:		return;
ADDRGP4 $1471
JUMPV
LABELV $1472
line 1577
;1575:	}
;1576:
;1577:	if ( !cg.lowAmmoWarning ) {
ADDRGP4 cg+130540
INDIRI4
CNSTI4 0
NEI4 $1475
line 1578
;1578:		return;
ADDRGP4 $1471
JUMPV
LABELV $1475
line 1581
;1579:	}
;1580:
;1581:	if ( cg.lowAmmoWarning == 2 ) {
ADDRGP4 cg+130540
INDIRI4
CNSTI4 2
NEI4 $1478
line 1582
;1582:		s = "OUT OF AMMO";
ADDRLP4 0
ADDRGP4 $1481
ASGNP4
line 1583
;1583:	} else {
ADDRGP4 $1479
JUMPV
LABELV $1478
line 1584
;1584:		s = "LOW AMMO WARNING";
ADDRLP4 0
ADDRGP4 $1482
ASGNP4
line 1585
;1585:	}
LABELV $1479
line 1587
;1586:	//CG_DrawBigString(320 - w / 2, 64, s, 1.0F);
;1587:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1483
line 1588
;1588:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 8
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1589
;1589:	}
LABELV $1483
line 1590
;1590:	w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 1591
;1591:	CG_DrawStringExt( 320 - w / 2, 64, s, colorWhite, qfalse, qfalse, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, 0, superhud );
CNSTI4 320
ADDRLP4 4
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ARGI4
CNSTI4 64
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
CNSTI4 16
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1593
;1592:
;1593:}
LABELV $1471
endproc CG_HDrawAmmoWarning 20 44
proc CG_HDrawWarmup 56 44
line 1600
;1594:
;1595:/*
;1596:=================
;1597:CG_DrawWarmup
;1598:=================
;1599:*/
;1600:static void CG_HDrawWarmup( int superhud ) {
line 1610
;1601:	int			w;
;1602:	int			sec;
;1603:	int			i;
;1604:	float scale;
;1605:	clientInfo_t	*ci1, *ci2;
;1606:	int			cw;
;1607:	const char	*s;
;1608:
;1609:	//FIXME: Optimize this.. Conform to CPMA..
;1610:	sec = cg.warmup;
ADDRLP4 4
ADDRGP4 cg+130804
INDIRI4
ASGNI4
line 1611
;1611:	if ( !sec ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1496
line 1612
;1612:		return;
ADDRGP4 $1494
JUMPV
LABELV $1496
line 1615
;1613:	}
;1614:
;1615:	if ( sec < 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $1498
line 1616
;1616:		s = "Waiting for players";
ADDRLP4 12
ADDRGP4 $1500
ASGNP4
line 1617
;1617:		if ( !hud[superhud].element == WarmupInfo ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1505
ADDRLP4 32
CNSTI4 1
ASGNI4
ADDRGP4 $1506
JUMPV
LABELV $1505
ADDRLP4 32
CNSTI4 0
ASGNI4
LABELV $1506
ADDRLP4 32
INDIRI4
CNSTI4 65
NEI4 $1501
line 1618
;1618:			if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1507
line 1619
;1619:				CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 36
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1620
;1620:			}
LABELV $1507
line 1622
;1621:
;1622:			CG_DrawStringExt( 0, hud[superhud].rect[1], s, hud[superhud].color, qfalse, qtrue,
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 40
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 44
CNSTI4 504
ADDRLP4 40
INDIRI4
MULI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 44
INDIRI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 44
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1624
;1623:								hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
;1624:			cg.warmupCount = 0;
ADDRGP4 cg+130808
CNSTI4 0
ASGNI4
line 1625
;1625:			return;
ADDRGP4 $1494
JUMPV
LABELV $1501
line 1627
;1626:		}
;1627:	}
LABELV $1498
line 1629
;1628:
;1629:	if (cgs.gametype == GT_TOURNAMENT) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
NEI4 $1525
line 1631
;1630:		// find the two active players
;1631:		ci1 = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 1632
;1632:		ci2 = NULL;
ADDRLP4 16
CNSTP4 0
ASGNP4
line 1633
;1633:		for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1531
JUMPV
LABELV $1528
line 1634
;1634:			if ( cgs.clientinfo[i].infoValid && cgs.clientinfo[i].team == TEAM_FREE ) {
ADDRLP4 32
CNSTI4 1776
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRI4
ADDRGP4 cgs+40960
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $1533
ADDRLP4 32
INDIRI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $1533
line 1635
;1635:				if ( !ci1 ) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1538
line 1636
;1636:					ci1 = &cgs.clientinfo[i];
ADDRLP4 8
CNSTI4 1776
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40960
ADDP4
ASGNP4
line 1637
;1637:				} else {
ADDRGP4 $1539
JUMPV
LABELV $1538
line 1638
;1638:					ci2 = &cgs.clientinfo[i];
ADDRLP4 16
CNSTI4 1776
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40960
ADDP4
ASGNP4
line 1639
;1639:				}
LABELV $1539
line 1640
;1640:			}
LABELV $1533
line 1641
;1641:		}
LABELV $1529
line 1633
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1531
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $1528
line 1643
;1642:
;1643:		if ( ci1 && ci2 ) {
ADDRLP4 32
CNSTU4 0
ASGNU4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 32
INDIRU4
EQU4 $1526
ADDRLP4 16
INDIRP4
CVPU4 4
ADDRLP4 32
INDIRU4
EQU4 $1526
line 1644
;1644:			s = va( "%s "S_COLOR_WHITE"vs %s", ci1->name, ci2->name );
ADDRGP4 $1544
ARGP4
ADDRLP4 36
CNSTI4 4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ARGP4
ADDRLP4 40
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 40
INDIRP4
ASGNP4
line 1645
;1645:			w = CG_DrawStrlen( s );
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 44
INDIRI4
ASGNI4
line 1646
;1646:			if ( w > 640 / GIANT_WIDTH ) {
ADDRLP4 28
INDIRI4
CNSTI4 20
LEI4 $1545
line 1647
;1647:				cw = 640 / w;
ADDRLP4 24
CNSTI4 640
ADDRLP4 28
INDIRI4
DIVI4
ASGNI4
line 1648
;1648:			} else {
ADDRGP4 $1546
JUMPV
LABELV $1545
line 1649
;1649:				cw = GIANT_WIDTH;
ADDRLP4 24
CNSTI4 32
ASGNI4
line 1650
;1650:			}
LABELV $1546
line 1651
;1651:			CG_DrawStringExt( 320 - w * cw/2, 20,s, colorWhite, qfalse, qtrue, cw, (int)(cw * 1.5f), 0, 0, superhud );
ADDRLP4 48
ADDRLP4 24
INDIRI4
ASGNI4
CNSTI4 320
ADDRLP4 28
INDIRI4
ADDRLP4 48
INDIRI4
MULI4
CNSTI4 2
DIVI4
SUBI4
ARGI4
CNSTI4 20
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
CNSTF4 1069547520
ADDRLP4 48
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1652
;1652:		}
line 1653
;1653:	} else {
ADDRGP4 $1526
JUMPV
LABELV $1525
line 1654
;1654:		if ( hud[superhud].element == GameType ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 21
NEI4 $1547
line 1655
;1655:			if ( cgs.gametype == GT_FFA ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 0
NEI4 $1550
line 1656
;1656:				s = "Free For All";
ADDRLP4 12
ADDRGP4 $1553
ASGNP4
line 1657
;1657:			} else if ( cgs.gametype == GT_TEAM ) {
ADDRGP4 $1551
JUMPV
LABELV $1550
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
NEI4 $1554
line 1658
;1658:				s = "Team Deathmatch";
ADDRLP4 12
ADDRGP4 $1557
ASGNP4
line 1659
;1659:			} else if ( cgs.gametype == GT_CTF ) {
ADDRGP4 $1555
JUMPV
LABELV $1554
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $1558
line 1660
;1660:				s = "Capture the Flag";
ADDRLP4 12
ADDRGP4 $1561
ASGNP4
line 1661
;1661:			} else {
ADDRGP4 $1559
JUMPV
LABELV $1558
line 1662
;1662:				s = "";
ADDRLP4 12
ADDRGP4 $1562
ASGNP4
line 1663
;1663:			}
LABELV $1559
LABELV $1555
LABELV $1551
line 1665
;1664:
;1665:			if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1563
line 1666
;1666:				CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 32
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1667
;1667:			}
LABELV $1563
line 1669
;1668:
;1669:			CG_DrawStringExt( 0, hud[superhud].rect[1], s, hud[superhud].color, qfalse, qtrue,
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 36
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 40
CNSTI4 504
ADDRLP4 36
INDIRI4
MULI4
ASGNI4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRLP4 32
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1671
;1670:								hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
;1671:		}
LABELV $1547
line 1672
;1672:	}
LABELV $1526
line 1674
;1673:
;1674:	sec = ( sec - cg.time ) / 1000;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 1675
;1675:	if ( sec < 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $1581
line 1676
;1676:		cg.warmup = 0;
ADDRGP4 cg+130804
CNSTI4 0
ASGNI4
line 1677
;1677:		sec = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1678
;1678:	}
LABELV $1581
line 1679
;1679:	s = va( "Starts in: %i", sec + 1 );
ADDRGP4 $1584
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
ASGNP4
line 1680
;1680:	if ( sec != cg.warmupCount ) {
ADDRLP4 4
INDIRI4
ADDRGP4 cg+130808
INDIRI4
EQI4 $1585
line 1681
;1681:		cg.warmupCount = sec;
ADDRGP4 cg+130808
ADDRLP4 4
INDIRI4
ASGNI4
line 1682
;1682:		switch ( sec ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1591
ADDRLP4 4
INDIRI4
CNSTI4 1
EQI4 $1594
ADDRLP4 4
INDIRI4
CNSTI4 2
EQI4 $1597
ADDRGP4 $1590
JUMPV
LABELV $1591
line 1684
;1683:		case 0:
;1684:			trap_S_StartLocalSound( cgs.media.count1Sound, CHAN_ANNOUNCER );
ADDRGP4 cgs+156680+1060
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1685
;1685:			break;
ADDRGP4 $1590
JUMPV
LABELV $1594
line 1687
;1686:		case 1:
;1687:			trap_S_StartLocalSound( cgs.media.count2Sound, CHAN_ANNOUNCER );
ADDRGP4 cgs+156680+1056
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1688
;1688:			break;
ADDRGP4 $1590
JUMPV
LABELV $1597
line 1690
;1689:		case 2:
;1690:			trap_S_StartLocalSound( cgs.media.count3Sound, CHAN_ANNOUNCER );
ADDRGP4 cgs+156680+1052
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1691
;1691:			break;
line 1693
;1692:		default:
;1693:			break;
LABELV $1590
line 1695
;1694:		}
;1695:	}
LABELV $1585
line 1696
;1696:	scale = 0.45f;
ADDRLP4 20
CNSTF4 1055286886
ASGNF4
line 1697
;1697:	switch ( cg.warmupCount ) {
ADDRLP4 36
ADDRGP4 cg+130808
INDIRI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $1603
ADDRLP4 36
INDIRI4
CNSTI4 1
EQI4 $1604
ADDRLP4 36
INDIRI4
CNSTI4 2
EQI4 $1605
ADDRGP4 $1600
JUMPV
LABELV $1603
line 1699
;1698:	case 0:
;1699:		cw = 28;
ADDRLP4 24
CNSTI4 28
ASGNI4
line 1700
;1700:		scale = 0.54f;
ADDRLP4 20
CNSTF4 1057635697
ASGNF4
line 1701
;1701:		break;
ADDRGP4 $1601
JUMPV
LABELV $1604
line 1703
;1702:	case 1:
;1703:		cw = 24;
ADDRLP4 24
CNSTI4 24
ASGNI4
line 1704
;1704:		scale = 0.51f;
ADDRLP4 20
CNSTF4 1057132380
ASGNF4
line 1705
;1705:		break;
ADDRGP4 $1601
JUMPV
LABELV $1605
line 1707
;1706:	case 2:
;1707:		cw = 20;
ADDRLP4 24
CNSTI4 20
ASGNI4
line 1708
;1708:		scale = 0.48f;
ADDRLP4 20
CNSTF4 1056293519
ASGNF4
line 1709
;1709:		break;
ADDRGP4 $1601
JUMPV
LABELV $1600
line 1711
;1710:	default:
;1711:		cw = 16;
ADDRLP4 24
CNSTI4 16
ASGNI4
line 1712
;1712:		scale = 0.45f;
ADDRLP4 20
CNSTF4 1055286886
ASGNF4
line 1713
;1713:		break;
LABELV $1601
line 1715
;1714:	}
;1715:	if ( hud[superhud].element == WarmupInfo ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
CNSTI4 65
NEI4 $1606
line 1716
;1716:		if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1609
line 1717
;1717:			CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 40
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1718
;1718:		}
LABELV $1609
line 1720
;1719:
;1720:		CG_DrawStringExt( 0, hud[superhud].rect[1], s, hud[superhud].color, qfalse, qtrue,
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 44
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 48
CNSTI4 504
ADDRLP4 44
INDIRI4
MULI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 48
INDIRI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRLP4 40
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 48
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1722
;1721:							hud[superhud].fontsize[0], hud[superhud].fontsize[1], 0, 0, superhud );
;1722:	}
LABELV $1606
line 1723
;1723:}
LABELV $1494
endproc CG_HDrawWarmup 56 44
export CG_HDrawSpeedometer
proc CG_HDrawSpeedometer 28 44
line 1731
;1724:
;1725:/*
;1726:=================
;1727:CG_DrawSpeedometer
;1728:Spike's Speedometer
;1729:=================
;1730:*/
;1731:void CG_HDrawSpeedometer(int superhud) {
line 1735
;1732:	float speed;
;1733:	char *str;
;1734:
;1735:	speed = 1.0f / Q_rsqrt(cg.snap->ps.velocity[0] * cg.snap->ps.velocity[0] +
ADDRLP4 8
CNSTI4 76
ASGNI4
ADDRLP4 12
CNSTI4 80
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRF4
MULF4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 16
ADDRGP4 Q_rsqrt
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
DIVF4
ASGNF4
line 1738
;1736:					cg.snap->ps.velocity[1] * cg.snap->ps.velocity[1]);
;1737:
;1738:	if(speed > max_speed)
ADDRLP4 0
INDIRF4
ADDRGP4 max_speed
INDIRF4
LEF4 $1631
line 1739
;1739:		max_speed = speed;
ADDRGP4 max_speed
ADDRLP4 0
INDIRF4
ASGNF4
LABELV $1631
line 1741
;1740:
;1741:	str = va("%.3fups", speed);
ADDRGP4 $1633
ARGP4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 1744
;1742:
;1743:
;1744:	if ( hud[superhud].fill ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1634
line 1745
;1745:		CG_FillRect( hud[superhud].rect[0], hud[superhud].rect[1], hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor );
ADDRLP4 24
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1746
;1746:	}
LABELV $1634
line 1748
;1747:
;1748:	CG_DrawStringExt(0, 0, str, 0, qfalse, qfalse, 12, SMALLCHAR_HEIGHT, 0, 0, superhud);
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
CNSTI4 12
ARGI4
CNSTI4 16
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1749
;1749:}
LABELV $1626
endproc CG_HDrawSpeedometer 28 44
export CG_HDrawWeaponSideBar
proc CG_HDrawWeaponSideBar 112 44
line 1758
;1750:
;1751:/*
;1752:=================
;1753:CG_DrawWeaponSideBar
;1754:=================
;1755:*/
;1756:#define STACK_VERTICAL_UP 1
;1757:#define STACK_HORIZONTAL_RIGHT 2
;1758:void CG_HDrawWeaponSideBar(int superhud ) {
line 1760
;1759:	int		i;
;1760:	int		totalWeapons = 0, /*numWepsPerRow,*/ remainingWeps = 0;
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 40
CNSTI4 0
ASGNI4
line 1766
;1761://	vec4_t	vbgColor, vfontColor, vs_bgColor, vs_fontColor;
;1762:	int		x, y, iconx, icony, textx, texty;
;1763://	int		numWeapons, totalHSpace, totalVSpace;
;1764://	int		numRows;//, numCols; //May not need these
;1765:	char	ammo[6];
;1766:	qboolean firstRun = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1772
;1767:
;1768:	//We need to find a startx and a starty to be static until we exit the function
;1769:	//They are for the Revo hax, because stacking up needs to precalc the starty and
;1770:	//right-to-left has to precalc stratx also..
;1771:
;1772:	if ( hud[superhud].textalign == 1 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $1646
line 1775
;1773:		//X is the center point, not the starting point
;1774:		//Figure out how many weapons we can fit in a row before wrapping, if there is any
;1775:		int	curSpace = 0;
ADDRLP4 48
CNSTI4 0
ASGNI4
line 1777
;1776:
;1777:		for ( i = WP_NONE; i < WP_NUM_WEAPONS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1649
line 1779
;1778:			//How many weapons do we have?
;1779:			if ( cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) || (hud[superhud].fill && cg.snap->ps.ammo[i]) ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
ADDRLP4 56
INDIRI4
NEI4 $1658
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $1653
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $1653
LABELV $1658
line 1780
;1780:				totalWeapons++;
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1785
;1781:
;1782:				//FIXME: We can center align vertically in Revo via: STACK_VERTICAL_UP
;1783:
;1784:				//Figure out the current amount of space and subtract the trailing 'buffer'
;1785:				curSpace = (totalWeapons * (hud[superhud].rect[2] + 4) - 4);
ADDRLP4 60
CNSTI4 4
ASGNI4
ADDRLP4 48
ADDRLP4 36
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDRLP4 60
INDIRI4
ADDI4
MULI4
ADDRLP4 60
INDIRI4
SUBI4
ASGNI4
line 1786
;1786:				if ( !((int)hud[superhud].angles[3] & STACK_HORIZONTAL_RIGHT) ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+12
ADDP4
INDIRF4
CVFI4 4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $1661
line 1788
;1787:					//Normal left to right
;1788:					if ( curSpace * .5 + hud[superhud].rect[0] > SCREEN_WIDTH ) {
CNSTF4 1056964608
ADDRLP4 48
INDIRI4
CVIF4 4
MULF4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
CNSTF4 1142947840
LEF4 $1665
line 1790
;1789:						//We're as far over as we can go, figure out the starting point and exit the loop
;1790:						x = hud[superhud].rect[0] - (((totalWeapons - 1) * (hud[superhud].rect[2] + 4) - 4) * .5);
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 68
CNSTI4 4
ASGNI4
ADDRLP4 4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 36
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
ADDI4
MULI4
ADDRLP4 68
INDIRI4
SUBI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1791
;1791:						break;
ADDRGP4 $1647
JUMPV
LABELV $1665
line 1792
;1792:					} else if ( (int)hud[superhud].angles[0] && curSpace * .5 + hud[superhud].rect[0] > (hud[superhud].rect[0] + (int)hud[superhud].angles[0])) {
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
CNSTI4 0
EQI4 $1662
CNSTF4 1056964608
ADDRLP4 48
INDIRI4
CVIF4 4
MULF4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
ADDI4
CVIF4 4
LEF4 $1662
line 1795
;1793:						//We have to check against screen edge anyway...
;1794:						//Check against a forced wrap, figure out the starting point and exit the loop
;1795:						x = hud[superhud].rect[0] - (((totalWeapons - 1) * (hud[superhud].rect[2] + 4) - 4) * .5);
ADDRLP4 68
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 72
CNSTI4 4
ASGNI4
ADDRLP4 4
ADDRLP4 68
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 36
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 68
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDRLP4 72
INDIRI4
ADDI4
MULI4
ADDRLP4 72
INDIRI4
SUBI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1796
;1796:						break;
ADDRGP4 $1647
JUMPV
line 1798
;1797:					}
;1798:				} else {
LABELV $1661
line 1800
;1799:					//Revo special right to left
;1800:					if ( curSpace * .5 + hud[superhud].rect[0] > SCREEN_WIDTH ) {
CNSTF4 1056964608
ADDRLP4 48
INDIRI4
CVIF4 4
MULF4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
CNSTF4 1142947840
LEF4 $1680
line 1802
;1801:						//We're as far over as we can go, figure out the starting point and exit the loop
;1802:						x = hud[superhud].rect[0] + (curSpace - hud[superhud].rect[2] - 4) * .5;
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 48
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
SUBI4
CNSTI4 4
SUBI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1803
;1803:						break;
ADDRGP4 $1647
JUMPV
LABELV $1680
line 1804
;1804:					} else if ( (int)hud[superhud].angles[0] && curSpace * .5 + hud[superhud].rect[0] > (hud[superhud].rect[0] + (int)hud[superhud].angles[0])) {
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
CNSTI4 0
EQI4 $1686
CNSTF4 1056964608
ADDRLP4 48
INDIRI4
CVIF4 4
MULF4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
ADDI4
CVIF4 4
LEF4 $1686
line 1807
;1805:						//We have to check against screen edge anyway...
;1806:						//Check against a forced wrap, figure out the starting point and exit the loop
;1807:						x = hud[superhud].rect[0] + (curSpace - hud[superhud].rect[2] - 4) * .5;
ADDRLP4 68
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 4
ADDRLP4 68
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 48
INDIRI4
ADDRLP4 68
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
SUBI4
CNSTI4 4
SUBI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1808
;1808:						break;
ADDRGP4 $1647
JUMPV
LABELV $1686
line 1811
;1809:					}
;1810:
;1811:				}
LABELV $1662
line 1812
;1812:			}
LABELV $1653
line 1813
;1813:		}
LABELV $1650
line 1777
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 11
LTI4 $1649
line 1814
;1814:	} else {
ADDRGP4 $1647
JUMPV
LABELV $1646
line 1818
;1815:		//Not center aligning -- they go: top to bottom, left to right
;1816:		//if ( !((int)hud[superhud].angles[3] & STACK_HORIZONTAL_RIGHT) ) {
;1817:			//Normal left to right
;1818:			x = hud[superhud].rect[0];
ADDRLP4 4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ASGNI4
line 1823
;1819:		//} else {
;1820:			//Revo special right to left
;1821:			//FIXME: This will require some precalculation like center alignment
;1822:		//}
;1823:	}
LABELV $1647
line 1825
;1824:
;1825:	y = hud[superhud].rect[1];
ADDRLP4 12
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ASGNI4
line 1829
;1826:
;1827:	//CG_Printf("DBG:x:%i y:%i iconx:%i icony:%i textx:%i texty:%i\n", x,y,iconx,icony,textx,texty );
;1828:
;1829:	for ( i = WP_GAUNTLET; i < WP_NUM_WEAPONS; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1698
line 1830
;1830:		if ( cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) || (hud[superhud].fill && cg.snap->ps.ammo[i]) ) {
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
ADDRLP4 52
INDIRI4
NEI4 $1707
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1702
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1702
LABELV $1707
line 1836
;1831:
;1832:			/**********
;1833:			* Drawing *
;1834:			**********/
;1835:			//Background
;1836:			if ( i != cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+108944
INDIRI4
EQI4 $1708
line 1838
;1837:				//Not the weapon selected or holding
;1838:				CG_FillRect(x, y, hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].bgcolor);
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1839
;1839:			} else {
ADDRGP4 $1709
JUMPV
LABELV $1708
line 1841
;1840:				//The weapon selected or holding
;1841:				CG_FillRect(x, y, hud[superhud].rect[2], hud[superhud].rect[3], hud[superhud].color);
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+68
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1842
;1842:			}
LABELV $1709
line 1844
;1843:
;1844:			if ( hud[superhud].textalign == 0 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 0
NEI4 $1721
line 1845
;1845:				iconx = x + hud[superhud].rect[2] - hud[superhud].fontsize[0];
ADDRLP4 56
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 8
ADDRLP4 4
INDIRI4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDI4
ADDRLP4 56
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1846
;1846:				textx = iconx - ( CG_DrawStrlen(ammo) * hud[superhud].fontsize[0] );
ADDRLP4 20
ARGP4
ADDRLP4 60
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 8
INDIRI4
ADDRLP4 60
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
MULI4
SUBI4
ASGNI4
line 1847
;1847:			} else {
ADDRGP4 $1722
JUMPV
LABELV $1721
line 1848
;1848:				iconx = x;
ADDRLP4 8
ADDRLP4 4
INDIRI4
ASGNI4
line 1849
;1849:				textx = iconx + hud[superhud].fontsize[0] + 2;
ADDRLP4 28
ADDRLP4 8
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ADDI4
CNSTI4 2
ADDI4
ASGNI4
line 1850
;1850:			}
LABELV $1722
line 1852
;1851:			
;1852:			icony = texty = y;
ADDRLP4 32
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 16
ADDRLP4 12
INDIRI4
ASGNI4
line 1854
;1853:			//Weapon icon
;1854:			CG_DrawPic( iconx, icony, hud[superhud].fontsize[0], hud[superhud].fontsize[1], cg_weapons[i].weaponIcon );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 60
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 60
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
CNSTI4 136
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1857
;1855:			
;1856:			//no ammo icon
;1857:			if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1733
line 1858
;1858:				CG_DrawPic( iconx, icony, hud[superhud].fontsize[0], hud[superhud].fontsize[1], cgs.media.noammoShader );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 64
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 64
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+156680+328
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1859
;1859:			}
LABELV $1733
line 1862
;1860:
;1861:			//ammo text
;1862:			if ( cg.snap->ps.ammo[i] < 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1741
line 1864
;1863:				//Gauntlet would print -1.. do this as a sanity check.
;1864:				Com_sprintf( ammo, 5, "");
ADDRLP4 20
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 $1562
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1865
;1865:			} else if ( cg.snap->ps.ammo[i] >= 999 ) {
ADDRGP4 $1742
JUMPV
LABELV $1741
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 999
LTI4 $1744
line 1867
;1866:				//Instagib would print 169, no need for it anyway.
;1867:				Com_sprintf(ammo, 5, "999");
ADDRLP4 20
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 $1747
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1868
;1868:			} else {
ADDRGP4 $1745
JUMPV
LABELV $1744
line 1869
;1869:				Com_sprintf(ammo, 5, "%i", cg.snap->ps.ammo[i]);
ADDRLP4 20
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 $108
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1870
;1870:			}
LABELV $1745
LABELV $1742
line 1871
;1871:			CG_DrawStringExt( textx, texty, ammo, colorWhite, qfalse, qtrue, hud[superhud].fontsize[0], hud[superhud].fontsize[1], 3, 0, superhud);
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 20
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 64
CNSTI4 0
ASGNI4
ADDRLP4 64
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 68
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 72
CNSTI4 504
ADDRLP4 68
INDIRI4
MULI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+160
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ADDRGP4 hud+160+4
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 68
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1874
;1872:
;1873:			//Calculate position for the next weapon
;1874:			if ( hud[superhud].textalign == 1 ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+174
ADDP4
INDIRU1
CVUI4 1
CNSTI4 1
NEI4 $1752
line 1876
;1875:				int j;
;1876:				int curSpace = 0, weapons = 0;
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 84
CNSTI4 0
ASGNI4
line 1877
;1877:				for ( j = i; j < WP_NUM_WEAPONS; j++ ) {
ADDRLP4 76
ADDRLP4 0
INDIRI4
ASGNI4
ADDRGP4 $1758
JUMPV
LABELV $1755
line 1879
;1878:					//How many weapons do we have?
;1879:					if ( cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << j ) || (hud[superhud].fill && cg.snap->ps.ammo[j]) ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 76
INDIRI4
LSHI4
BANDI4
ADDRLP4 92
INDIRI4
NEI4 $1764
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
ADDRLP4 92
INDIRI4
EQI4 $1759
ADDRLP4 76
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ADDRLP4 92
INDIRI4
EQI4 $1759
LABELV $1764
line 1881
;1880:						//FIXME: We can center align vertically in Revo via: STACK_VERTICAL_UP
;1881:						weapons++;
ADDRLP4 84
ADDRLP4 84
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1884
;1882:
;1883:						//Figure out the current amount of space and subtract the trailing 'buffer'
;1884:						curSpace = (weapons * (hud[superhud].rect[2] + 4) - 4);
ADDRLP4 96
CNSTI4 4
ASGNI4
ADDRLP4 80
ADDRLP4 84
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDRLP4 96
INDIRI4
ADDI4
MULI4
ADDRLP4 96
INDIRI4
SUBI4
ASGNI4
line 1885
;1885:						if ( !((int)hud[superhud].angles[3] & STACK_HORIZONTAL_RIGHT) ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+12
ADDP4
INDIRF4
CVFI4 4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $1767
line 1887
;1886:							//Normal left to right
;1887:							if ( curSpace * .5 + hud[superhud].rect[0] > SCREEN_WIDTH ) {
CNSTF4 1056964608
ADDRLP4 80
INDIRI4
CVIF4 4
MULF4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
CNSTF4 1142947840
LEF4 $1771
line 1889
;1888:								//We're as far over as we can go, figure out the starting point and exit the loop
;1889:								x = hud[superhud].rect[0] - (((weapons - 1) * (hud[superhud].rect[2] + 4) - 4) * .5);
ADDRLP4 100
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 104
CNSTI4 4
ASGNI4
ADDRLP4 4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 84
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDRLP4 104
INDIRI4
ADDI4
MULI4
ADDRLP4 104
INDIRI4
SUBI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1890
;1890:								break;
ADDRGP4 $1753
JUMPV
LABELV $1771
line 1891
;1891:							} else if ( (int)hud[superhud].angles[0] && curSpace * .5 + hud[superhud].rect[0] > (hud[superhud].rect[0] + (int)hud[superhud].angles[0])) {
ADDRLP4 100
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
CNSTI4 0
EQI4 $1768
CNSTF4 1056964608
ADDRLP4 80
INDIRI4
CVIF4 4
MULF4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
ADDI4
CVIF4 4
LEF4 $1768
line 1894
;1892:								//We have to check against screen edge anyway...
;1893:								//Check against a forced wrap, figure out the starting point and exit the loop
;1894:								x = hud[superhud].rect[0] - (((weapons - 1) * (hud[superhud].rect[2] + 4) - 4) * .5);
ADDRLP4 104
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 108
CNSTI4 4
ASGNI4
ADDRLP4 4
ADDRLP4 104
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 84
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 104
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
ADDRLP4 108
INDIRI4
ADDI4
MULI4
ADDRLP4 108
INDIRI4
SUBI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1895
;1895:								break;
ADDRGP4 $1753
JUMPV
line 1897
;1896:							}
;1897:						} else {
LABELV $1767
line 1899
;1898:							//Revo special right to left
;1899:							if ( curSpace * .5 + hud[superhud].rect[0] > SCREEN_WIDTH ) {
CNSTF4 1056964608
ADDRLP4 80
INDIRI4
CVIF4 4
MULF4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
CNSTF4 1142947840
LEF4 $1786
line 1901
;1900:								//We're as far over as we can go, figure out the starting point and exit the loop
;1901:								x = hud[superhud].rect[0] + (curSpace - hud[superhud].rect[2] - 4) * .5;
ADDRLP4 100
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 80
INDIRI4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
SUBI4
CNSTI4 4
SUBI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1902
;1902:								break;
ADDRGP4 $1753
JUMPV
LABELV $1786
line 1903
;1903:							} else if ( (int)hud[superhud].angles[0] && curSpace * .5 + hud[superhud].rect[0] > (hud[superhud].rect[0] + (int)hud[superhud].angles[0])) {
ADDRLP4 100
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
CNSTI4 0
EQI4 $1792
CNSTF4 1056964608
ADDRLP4 80
INDIRI4
CVIF4 4
MULF4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ADDF4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
ADDRLP4 100
INDIRI4
ADDRGP4 hud+116
ADDP4
INDIRF4
CVFI4 4
ADDI4
CVIF4 4
LEF4 $1792
line 1906
;1904:								//We have to check against screen edge anyway...
;1905:								//Check against a forced wrap, figure out the starting point and exit the loop
;1906:								x = hud[superhud].rect[0] + (curSpace - hud[superhud].rect[2] - 4) * .5;
ADDRLP4 104
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 4
ADDRLP4 104
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDRLP4 80
INDIRI4
ADDRLP4 104
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
SUBI4
CNSTI4 4
SUBI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1907
;1907:								break;
ADDRGP4 $1753
JUMPV
LABELV $1792
line 1909
;1908:							}
;1909:						}
LABELV $1768
line 1910
;1910:					}
LABELV $1759
line 1911
;1911:				}
LABELV $1756
line 1877
ADDRLP4 76
ADDRLP4 76
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1758
ADDRLP4 76
INDIRI4
CNSTI4 11
LTI4 $1755
line 1912
;1912:			} else {
ADDRGP4 $1753
JUMPV
LABELV $1752
line 1915
;1913:				//FIXME? This doesn't wrap too early, does it?
;1914:				//CG_Printf("%i\n",(int)hud[superhud].angles[3]);
;1915:				if ( !((int)hud[superhud].angles[3] & STACK_VERTICAL_UP) ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+12
ADDP4
INDIRF4
CVFI4 4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $1801
line 1916
;1916:					int	yy = y + hud[superhud].rect[3] + 4;
ADDRLP4 76
ADDRLP4 12
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
ADDI4
CNSTI4 4
ADDI4
ASGNI4
line 1918
;1917:
;1918:					if ( yy + hud[superhud].rect[3] > SCREEN_HEIGHT || ( (int)hud[superhud].angles[1] &&
ADDRLP4 84
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRLP4 84
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
ADDI4
CNSTI4 480
GTI4 $1819
ADDRLP4 84
INDIRI4
ADDRGP4 hud+116+4
ADDP4
INDIRF4
CVFI4 4
CNSTI4 0
EQI4 $1807
ADDRLP4 76
INDIRI4
ADDRLP4 84
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
ADDI4
ADDRLP4 84
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
ADDRGP4 hud+116+4
ADDP4
INDIRF4
CVFI4 4
ADDI4
LEI4 $1807
LABELV $1819
line 1919
;1919:						 yy + hud[superhud].rect[3] > hud[superhud].rect[1] + (int)hud[superhud].angles[1]) ) {
line 1921
;1920:							//We have to wrap
;1921:							y = hud[superhud].rect[1];
ADDRLP4 12
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ASGNI4
line 1922
;1922:							if ( !((int)hud[superhud].angles[3] & STACK_HORIZONTAL_RIGHT) ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+12
ADDP4
INDIRF4
CVFI4 4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $1822
line 1923
;1923:								x += hud[superhud].rect[2] + 4;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CNSTI4 4
ADDI4
ADDI4
ASGNI4
line 1924
;1924:							} else {
ADDRGP4 $1802
JUMPV
LABELV $1822
line 1925
;1925:								x -= hud[superhud].rect[2] - 4;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CNSTI4 4
SUBI4
SUBI4
ASGNI4
line 1926
;1926:							}
line 1927
;1927:					} else {
ADDRGP4 $1802
JUMPV
LABELV $1807
line 1928
;1928:						y = yy;
ADDRLP4 12
ADDRLP4 76
INDIRI4
ASGNI4
line 1929
;1929:					}
line 1930
;1930:				} else {
ADDRGP4 $1802
JUMPV
LABELV $1801
line 1932
;1931:					//Revo stack vertically up
;1932:					int	yy = y - hud[superhud].rect[3] - 4;
ADDRLP4 76
ADDRLP4 12
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
SUBI4
CNSTI4 4
SUBI4
ASGNI4
line 1935
;1933:					//CG_Printf("Stack up yy: %i\n", yy);
;1934:
;1935:					if ( yy - hud[superhud].rect[3] < 0 || ( (int)hud[superhud].angles[1] &&
ADDRLP4 84
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 88
CNSTI4 0
ASGNI4
ADDRLP4 76
INDIRI4
ADDRLP4 84
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
SUBI4
ADDRLP4 88
INDIRI4
LTI4 $1842
ADDRLP4 84
INDIRI4
ADDRGP4 hud+116+4
ADDP4
INDIRF4
CVFI4 4
ADDRLP4 88
INDIRI4
EQI4 $1832
ADDRLP4 76
INDIRI4
ADDRLP4 84
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
SUBI4
ADDRLP4 84
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
GEI4 $1832
LABELV $1842
line 1936
;1936:						 yy - hud[superhud].rect[3] < hud[superhud].rect[1]) ) {
line 1938
;1937:							//We have to wrap
;1938:							y = hud[superhud].rect[1];
ADDRLP4 12
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
ASGNI4
line 1939
;1939:							if ( !((int)hud[superhud].angles[3] & STACK_HORIZONTAL_RIGHT) ) {
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+116+12
ADDP4
INDIRF4
CVFI4 4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $1845
line 1940
;1940:								x += hud[superhud].rect[2] + 4;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CNSTI4 4
ADDI4
ADDI4
ASGNI4
line 1941
;1941:							} else {
ADDRGP4 $1833
JUMPV
LABELV $1845
line 1942
;1942:								x -= hud[superhud].rect[2] - 4;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 504
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CNSTI4 4
SUBI4
SUBI4
ASGNI4
line 1943
;1943:							}
line 1944
;1944:					} else {
ADDRGP4 $1833
JUMPV
LABELV $1832
line 1945
;1945:						y = yy;
ADDRLP4 12
ADDRLP4 76
INDIRI4
ASGNI4
line 1946
;1946:					}
LABELV $1833
line 1947
;1947:				}
LABELV $1802
line 1948
;1948:			}
LABELV $1753
line 1950
;1949:
;1950:		}
LABELV $1702
line 1951
;1951:	}
LABELV $1699
line 1829
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 11
LTI4 $1698
line 1952
;1952:}
LABELV $1645
endproc CG_HDrawWeaponSideBar 112 44
export CG_DrawHud2D
proc CG_DrawHud2D 112 44
line 1963
;1953:#undef STACK_VERTICAL_UP
;1954:#undef STACK_HORIZONTAL_RIGHT 
;1955:
;1956:
;1957:/*
;1958:=================
;1959:CG_DrawHud2D
;1960:Doesn't work with TeamArena -- will crash it.
;1961:=================
;1962:*/
;1963:void CG_DrawHud2D( void ) {
line 1967
;1964:	int i;
;1965:
;1966:	// if we are taking a levelshot for the menu, don't draw anything
;1967:	if ( cg.levelShot ) {
ADDRGP4 cg+12
INDIRI4
CNSTI4 0
EQI4 $1854
line 1968
;1968:		return;
ADDRGP4 $1853
JUMPV
LABELV $1854
line 1971
;1969:	}
;1970:
;1971:	if ( cg.snap->ps.pm_type == PM_INTERMISSION ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1857
line 1972
;1972:		CG_DrawIntermission();
ADDRGP4 CG_DrawIntermission
CALLV
pop
line 1973
;1973:		DrawMOTDBox();
ADDRGP4 DrawMOTDBox
CALLI4
pop
line 1974
;1974:		return;
ADDRGP4 $1853
JUMPV
LABELV $1857
line 1977
;1975:	}
;1976:
;1977:	if ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1860
line 1978
;1978:		CG_DrawCrosshair();
ADDRGP4 CG_DrawCrosshair
CALLV
pop
line 1979
;1979:	} else {
ADDRGP4 $1861
JUMPV
LABELV $1860
line 1982
;1980:		//CG_DrawStatusBar();
;1981:
;1982:		CG_DrawCrosshair();
ADDRGP4 CG_DrawCrosshair
CALLV
pop
line 1984
;1983:
;1984:		{//Evo's viewKeyPress...
line 1992
;1985:			qboolean draw_keys;
;1986:			int		x, y, size;
;1987:			char	keyColor[24];
;1988:			char	fontColor[24];
;1989:			char	*sptr;
;1990:			char	token[24];
;1991:					
;1992:			sptr = ch_viewKeyPress.string;
ADDRLP4 28
ADDRGP4 ch_viewKeyPress+16
ASGNP4
line 1994
;1993:
;1994:			CG_ExtractToken(&sptr, token);
ADDRLP4 28
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_ExtractToken
CALLV
pop
line 1995
;1995:			draw_keys = atoi(token);
ADDRLP4 4
ARGP4
ADDRLP4 96
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 96
INDIRI4
ASGNI4
line 1997
;1996:
;1997:			if ( draw_keys ) {
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $1864
line 1998
;1998:				CG_ExtractToken(&sptr, token);
ADDRLP4 28
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_ExtractToken
CALLV
pop
line 1999
;1999:				x = atoi(token);
ADDRLP4 4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 84
ADDRLP4 100
INDIRI4
ASGNI4
line 2001
;2000:
;2001:				CG_ExtractToken(&sptr, token);
ADDRLP4 28
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_ExtractToken
CALLV
pop
line 2002
;2002:				y = atoi(token);
ADDRLP4 4
ARGP4
ADDRLP4 104
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 88
ADDRLP4 104
INDIRI4
ASGNI4
line 2004
;2003:
;2004:				CG_ExtractToken(&sptr, token);
ADDRLP4 28
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_ExtractToken
CALLV
pop
line 2005
;2005:				Com_sprintf(keyColor, sizeof(keyColor), token);
ADDRLP4 36
ARGP4
CNSTI4 24
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2007
;2006:
;2007:				CG_ExtractToken(&sptr, token);
ADDRLP4 28
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_ExtractToken
CALLV
pop
line 2008
;2008:				Com_sprintf(fontColor, sizeof(fontColor), token);
ADDRLP4 60
ARGP4
CNSTI4 24
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2010
;2009:
;2010:				CG_ExtractToken(&sptr, token);
ADDRLP4 28
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_ExtractToken
CALLV
pop
line 2011
;2011:				size = atoi(token);
ADDRLP4 4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 92
ADDRLP4 108
INDIRI4
ASGNI4
line 2013
;2012:
;2013:				CG_DrawKeyPress(draw_keys, x, y, keyColor, fontColor, size);
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 88
INDIRI4
ARGI4
ADDRLP4 36
ARGP4
ADDRLP4 60
ARGP4
ADDRLP4 92
INDIRI4
ARGI4
ADDRGP4 CG_DrawKeyPress
CALLV
pop
line 2014
;2014:			}
LABELV $1864
line 2015
;2015:		}
line 2017
;2016:
;2017:		CG_DrawHoldableItem();
ADDRGP4 CG_DrawHoldableItem
CALLV
pop
line 2019
;2018:
;2019:		CG_DrawReward();
ADDRGP4 CG_DrawReward
CALLV
pop
line 2021
;2020:
;2021:		if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $1866
line 2022
;2022:			CG_DrawTeamInfo();
ADDRGP4 CG_DrawTeamInfo
CALLV
pop
line 2023
;2023:		}
LABELV $1866
line 2024
;2024:	}
LABELV $1861
line 2026
;2025:
;2026:	if ( cg_drawSnapshot.integer ) {
ADDRGP4 cg_drawSnapshot+12
INDIRI4
CNSTI4 0
EQI4 $1869
line 2027
;2027:		CG_DrawSnapshot( 0 );
CNSTF4 0
ARGF4
ADDRGP4 CG_DrawSnapshot
CALLF4
pop
line 2028
;2028:	}
LABELV $1869
line 2029
;2029:	if ( cg_drawClock.integer ) {
ADDRGP4 cg_drawClock+12
INDIRI4
CNSTI4 0
EQI4 $1872
line 2031
;2030:		//This should be done in the hud with Clock {}
;2031:		CG_DrawClock( 60 );
CNSTF4 1114636288
ARGF4
ADDRGP4 CG_DrawClock
CALLF4
pop
line 2032
;2032:	}
LABELV $1872
line 2037
;2033:
;2034:
;2035:	// don't draw center string if scoreboard is up
;2036:	//Score_Weapon();
;2037:	cg.scoreBoardShowing = CG_DrawScoreboard();
ADDRLP4 4
ADDRGP4 CG_DrawScoreboard
CALLI4
ASGNI4
ADDRGP4 cg+120472
ADDRLP4 4
INDIRI4
ASGNI4
line 2038
;2038:	if ( !cg.scoreBoardShowing) {
ADDRGP4 cg+120472
INDIRI4
CNSTI4 0
NEI4 $1876
line 2039
;2039:		CG_DrawCenterString();
ADDRGP4 CG_DrawCenterString
CALLV
pop
line 2040
;2040:	}
LABELV $1876
line 2042
;2041:
;2042:	for ( i = 1; i < (hud_count + 1); i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRGP4 $1882
JUMPV
LABELV $1879
line 2044
;2043:
;2044:		if ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1883
line 2046
;2045:
;2046:			switch ( hud[i].element ) {
ADDRLP4 8
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
CNSTI4 39
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $1890
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
LTI4 $1884
LABELV $1892
ADDRLP4 8
INDIRI4
CNSTI4 49
EQI4 $1891
ADDRGP4 $1884
JUMPV
LABELV $1890
line 2049
;2047:				case SpecMessage:
;2048:					//Should be done
;2049:					CG_HDrawSpectator(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawSpectator
CALLV
pop
line 2050
;2050:					break;
ADDRGP4 $1884
JUMPV
LABELV $1891
line 2053
;2051:				case TargetName:
;2052:					//TargetSatus hasn't been started, we don't have a TargetStatus yet anyway..
;2053:					CG_HDrawCrosshairNames(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawCrosshairNames
CALLV
pop
line 2054
;2054:					break;
line 2056
;2055:			}
;2056:		} else {
ADDRGP4 $1884
JUMPV
LABELV $1883
line 2057
;2057:			switch ( hud[i].element ) {
ADDRLP4 8
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
CNSTI4 21
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $1913
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
GTI4 $1920
LABELV $1919
ADDRLP4 24
CNSTI4 2
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $1897
ADDRLP4 8
INDIRI4
ADDRLP4 24
INDIRI4
LTI4 $1893
LABELV $1921
ADDRLP4 8
INDIRI4
CNSTI4 17
EQI4 $1912
ADDRGP4 $1893
JUMPV
LABELV $1920
ADDRLP4 8
INDIRI4
CNSTI4 40
LTI4 $1922
ADDRLP4 8
INDIRI4
CNSTI4 48
GTI4 $1923
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1924-160
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1924
address $1916
address $1915
address $1915
address $1916
address $1915
address $1915
address $1916
address $1915
address $1915
code
LABELV $1922
ADDRLP4 8
INDIRI4
CNSTI4 26
EQI4 $1917
ADDRGP4 $1893
JUMPV
LABELV $1923
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $1893
ADDRLP4 8
INDIRI4
CNSTI4 67
GTI4 $1893
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1926-256
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1926
address $1914
address $1913
address $1918
address $1897
code
LABELV $1897
line 2060
;2058:				case PostDecorate:
;2059:				case PreDecorate:
;2060:					if ( hud[i].fill ) {
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1898
line 2062
;2061:						//Fill background
;2062:						CG_FillRect( hud[i].rect[0], hud[i].rect[1], hud[i].rect[2], hud[i].rect[3], CG_FigureHUDColor(i) );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_FigureHUDColor
CALLP4
ASGNP4
ADDRLP4 40
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2063
;2063:					}
LABELV $1898
line 2064
;2064:					if ( strlen(hud[i].text) ) {				
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+240
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $1894
line 2066
;2065:					//Draw text
;2066:						CG_DrawStringExt(0, 0, hud[i].text, colorWhite, qfalse, qfalse, 0, 0, 0, 0, i);
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+240
ADDP4
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 2067
;2067:					}
line 2068
;2068:					break;
ADDRGP4 $1894
JUMPV
LABELV $1912
line 2070
;2069:				case FollowMessage:
;2070:					CG_HDrawFollow(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawFollow
CALLI4
pop
line 2071
;2071:					break;
ADDRGP4 $1894
JUMPV
LABELV $1913
line 2074
;2072:				case GameType:
;2073:				case WarmupInfo:
;2074:					CG_HDrawWarmup(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawWarmup
CALLV
pop
line 2075
;2075:					break;
ADDRGP4 $1894
JUMPV
LABELV $1914
line 2077
;2076:				case VoteMessageWorld:
;2077:					CG_HDrawVote(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawVote
CALLV
pop
line 2078
;2078:					CG_HDrawTeamVote(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawTeamVote
CALLV
pop
line 2079
;2079:					break;
ADDRGP4 $1894
JUMPV
LABELV $1915
line 2086
;2080:				case StatusBar_ArmorCount:
;2081:				case StatusBar_ArmorIcon:
;2082:				case StatusBar_AmmoCount:
;2083:				case StatusBar_AmmoIcon:
;2084:				case StatusBar_HealthCount:
;2085:				case StatusBar_HealthIcon:
;2086:					CG_HDrawStatusBar(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawStatusBar
CALLV
pop
line 2087
;2087:					break;
ADDRGP4 $1894
JUMPV
LABELV $1916
line 2091
;2088:				case StatusBar_ArmorBar:
;2089:				case StatusBar_AmmoBar:
;2090:				case StatusBar_HealthBar:
;2091:					CG_DrawStatusBars( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStatusBars
CALLV
pop
line 2092
;2092:					break;
ADDRGP4 $1894
JUMPV
LABELV $1917
line 2095
;2093:				case PlayerSpeed:
;2094:					//This may want to end up referencing the cvar to enable max speed
;2095:					CG_HDrawSpeedometer(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawSpeedometer
CALLV
pop
line 2096
;2096:					break;
ADDRGP4 $1894
JUMPV
LABELV $1918
line 2099
;2097:				case WeaponList:
;2098:					//This isn't as pretty as cpma, it also doesn't wrap
;2099:					CG_HDrawWeaponSideBar(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawWeaponSideBar
CALLV
pop
line 2100
;2100:					break;
LABELV $1893
LABELV $1894
line 2104
;2101:			}
;2102:
;2103:			// don't draw any status if dead or the scoreboard is being explicitly shown
;2104:			if ( !cg.showScores && cg.snap->ps.stats[STAT_HEALTH] > 0 ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 cg+120468
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $1928
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
LEI4 $1928
line 2105
;2105:				switch (hud[i].element) {
ADDRLP4 40
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 48
CNSTI4 3
ASGNI4
ADDRLP4 40
INDIRI4
ADDRLP4 48
INDIRI4
EQI4 $1936
ADDRLP4 40
INDIRI4
ADDRLP4 48
INDIRI4
LTI4 $1932
LABELV $1938
ADDRLP4 40
INDIRI4
CNSTI4 49
EQI4 $1937
ADDRGP4 $1932
JUMPV
LABELV $1936
line 2107
;2106:					case AmmoMessage:
;2107:						CG_HDrawAmmoWarning(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawAmmoWarning
CALLV
pop
line 2108
;2108:						break;
ADDRGP4 $1933
JUMPV
LABELV $1937
line 2111
;2109:					case TargetName:
;2110:						//Should be done, minus TargetStatus
;2111:						CG_HDrawCrosshairNames(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawCrosshairNames
CALLV
pop
line 2112
;2112:						break;
LABELV $1932
LABELV $1933
line 2114
;2113:				}
;2114:			}
LABELV $1928
line 2117
;2115:	    
;2116:			
;2117:		}
LABELV $1884
line 2119
;2118:
;2119:		switch (hud[i].element) {
ADDRLP4 8
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 4
LTI4 $1939
ADDRLP4 8
INDIRI4
CNSTI4 62
GTI4 $1939
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2002-16
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2002
address $1962
address $1962
address $1952
address $1953
address $1954
address $1955
address $1956
address $1957
address $1958
address $1959
address $1939
address $1999
address $1999
address $1939
address $1960
address $1963
address $1961
address $1939
address $2001
address $2001
address $1943
address $1943
address $1939
address $2000
address $2000
address $2000
address $2000
address $2000
address $2000
address $2000
address $2000
address $1981
address $1999
address $1999
address $1999
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1939
address $1944
address $1945
address $1946
address $1947
address $1948
address $1949
address $1950
address $1951
code
LABELV $1943
line 2122
;2120:			case NetGraph:
;2121:			case NetGraphPing:
;2122:				CG_HDrawLagometer(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawLagometer
CALLV
pop
line 2123
;2123:				break;
ADDRGP4 $1940
JUMPV
LABELV $1944
line 2125
;2124:			case Team1:
;2125:				CG_DrawSuperTeamOverlay( i, 0 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2126
;2126:				break;
ADDRGP4 $1940
JUMPV
LABELV $1945
line 2128
;2127:			case Team2:
;2128:				CG_DrawSuperTeamOverlay( i, 1 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2129
;2129:				break;
ADDRGP4 $1940
JUMPV
LABELV $1946
line 2131
;2130:			case Team3:
;2131:				CG_DrawSuperTeamOverlay( i, 2 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2132
;2132:				break;
ADDRGP4 $1940
JUMPV
LABELV $1947
line 2134
;2133:			case Team4:
;2134:				CG_DrawSuperTeamOverlay( i, 3 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2135
;2135:				break;
ADDRGP4 $1940
JUMPV
LABELV $1948
line 2137
;2136:			case Team5:
;2137:				CG_DrawSuperTeamOverlay( i, 4 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2138
;2138:				break;
ADDRGP4 $1940
JUMPV
LABELV $1949
line 2140
;2139:			case Team6:
;2140:				CG_DrawSuperTeamOverlay( i, 5 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2141
;2141:				break;
ADDRGP4 $1940
JUMPV
LABELV $1950
line 2143
;2142:			case Team7:
;2143:				CG_DrawSuperTeamOverlay( i, 6 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2144
;2144:				break;
ADDRGP4 $1940
JUMPV
LABELV $1951
line 2146
;2145:			case Team8:
;2146:				CG_DrawSuperTeamOverlay( i, 7 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 CG_DrawSuperTeamOverlay
CALLV
pop
line 2147
;2147:				break;
ADDRGP4 $1940
JUMPV
LABELV $1952
line 2149
;2148:			case Chat1:
;2149:				CG_DrawChat( i, 0 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2150
;2150:				break;
ADDRGP4 $1940
JUMPV
LABELV $1953
line 2152
;2151:			case Chat2:
;2152:				CG_DrawChat( i, 1 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2153
;2153:				break;
ADDRGP4 $1940
JUMPV
LABELV $1954
line 2155
;2154:			case Chat3:
;2155:				CG_DrawChat( i, 2 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2156
;2156:				break;
ADDRGP4 $1940
JUMPV
LABELV $1955
line 2158
;2157:			case Chat4:
;2158:				CG_DrawChat( i, 3 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2159
;2159:				break;
ADDRGP4 $1940
JUMPV
LABELV $1956
line 2161
;2160:			case Chat5:
;2161:				CG_DrawChat( i, 4 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2162
;2162:				break;
ADDRGP4 $1940
JUMPV
LABELV $1957
line 2164
;2163:			case Chat6:
;2164:				CG_DrawChat( i, 5 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2165
;2165:				break;
ADDRGP4 $1940
JUMPV
LABELV $1958
line 2167
;2166:			case Chat7:
;2167:				CG_DrawChat( i, 6 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2168
;2168:				break;
ADDRGP4 $1940
JUMPV
LABELV $1959
line 2170
;2169:			case Chat8:
;2170:				CG_DrawChat( i, 7 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 CG_DrawChat
CALLV
pop
line 2171
;2171:				break;
ADDRGP4 $1940
JUMPV
LABELV $1960
line 2173
;2172:			case FPS:
;2173:				CG_HDrawFPS( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawFPS
CALLV
pop
line 2174
;2174:				break;
ADDRGP4 $1940
JUMPV
LABELV $1961
line 2176
;2175:			case GameTime:
;2176:				CG_HDrawTimer( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawTimer
CALLV
pop
line 2177
;2177:				break;
ADDRGP4 $1940
JUMPV
LABELV $1962
line 2180
;2178:			case AttackerIcon:
;2179:			case AttackerName:
;2180:				CG_HDrawAttacker( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawAttacker
CALLV
pop
line 2181
;2181:				break;
ADDRGP4 $1940
JUMPV
LABELV $1963
line 2183
;2182:			case FragMessage:
;2183:				if ( cg.fragMessageTime + hud[i].time >= cg.time ) {
ADDRGP4 cg+170316
INDIRI4
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+168
ADDP4
INDIRI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
LTI4 $1940
line 2184
;2184:					if ( hud[i].fill ) {
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1969
line 2185
;2185:						CG_FillRect(hud[i].rect[0], hud[i].rect[1], hud[i].rect[2], hud[i].rect[3], hud[i].bgcolor);
ADDRLP4 16
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2186
;2186:					}
LABELV $1969
line 2187
;2187:					CG_DrawStringExt(0, 0, cg.fragMessageChar, colorWhite, qfalse, qfalse, 0, 0, 0, 0, i);
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 cg+170320
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 2188
;2188:				}
line 2189
;2189:				break;
ADDRGP4 $1940
JUMPV
LABELV $1981
line 2191
;2190:			case RankMessage:
;2191:				if ( cg.rankMessageTime + hud[i].time >= cg.time ) {
ADDRGP4 cg+170448
INDIRI4
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+168
ADDP4
INDIRI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
LTI4 $1940
line 2192
;2192:					if ( hud[i].fill ) {
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 hud+56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1987
line 2193
;2193:						CG_FillRect(hud[i].rect[0], hud[i].rect[1], hud[i].rect[2], hud[i].rect[3], hud[i].bgcolor);
ADDRLP4 16
CNSTI4 504
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144+4
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144+8
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+144+12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
ADDRGP4 hud+84
ADDP4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2194
;2194:					}
LABELV $1987
line 2195
;2195:					CG_DrawStringExt(0, 0, cg.rankMessageChar, colorWhite, qfalse, qfalse, 0, 0, 0, 0, i);
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 cg+170452
ARGP4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 2196
;2196:				}
line 2197
;2197:				break;
ADDRGP4 $1940
JUMPV
LABELV $1999
line 2205
;2198:			case FlagStatus_NME:
;2199:			case FlagStatus_OWN:
;2200:			case Score_NME:
;2201:			case Score_OWN:
;2202:			case Score_Limit:
;2203:				 //TeamCounts aren't here.
;2204:				 //Should be done
;2205:				CG_HDrawScores( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawScores
CALLV
pop
line 2206
;2206:				break;
ADDRGP4 $1940
JUMPV
LABELV $2000
line 2215
;2207:			case PowerUp1_Icon:
;2208:			case PowerUp2_Icon:
;2209:			case PowerUp3_Icon:
;2210:			case PowerUp4_Icon:
;2211:			case PowerUp1_Time:
;2212:			case PowerUp2_Time:
;2213:			case PowerUp3_Time:
;2214:			case PowerUp4_Time:
;2215:				CG_DrawSuperPowerups( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawSuperPowerups
CALLV
pop
line 2216
;2216:				break;
ADDRGP4 $1940
JUMPV
LABELV $2001
line 2220
;2217:			case ItemPickup:
;2218:			case ItemPickupIcon:
;2219:				//FIXME: This function doesn't handle 2 items.
;2220:				CG_HDrawPickupItem( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HDrawPickupItem
CALLV
pop
line 2221
;2221:		}
LABELV $1939
LABELV $1940
line 2225
;2222:		//if ( !Q_stricmp(hud[i].name, "Clock") ) {
;2223:		//	CG_DrawClock( 0 );
;2224:		//}
;2225:	}
LABELV $1880
line 2042
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1882
ADDRLP4 0
INDIRI4
ADDRGP4 hud_count
INDIRI4
CNSTI4 1
ADDI4
LTI4 $1879
line 2226
;2226:	DrawMOTDBox();
ADDRGP4 DrawMOTDBox
CALLI4
pop
line 2227
;2227:}
LABELV $1853
endproc CG_DrawHud2D 112 44
import cpm_lavafrequency
import cpm_slimedamage
import cpm_lavadamage
import cpm_itemsize
import cpm_hittones
import cpm_startpowerups
import cpm_itemrespawnammo
import cpm_itemrespawnBS
import cpm_itemrespawnpowerup
import cpm_itemrespawnhealth
import cpm_knockback_z
import cpm_respawnhealth
import cpm_BSprotection
import CPM_CanGrabArmor
import cpm_armorsystem
import cpm_outofammodelay
import cpm_weaponraise
import cpm_weapondrop
import cpm_RGchange
import cpm_RGbox
import cpm_RGmaxammo
import cpm_LGmaxammo
import cpm_LGknockback
import cpm_RLmaxammo
import cpm_RLspeed
import cpm_GLmaxammo
import cpm_GLreload
import CPM_CanGrabAmmo
import cpm_SSGmaxammo
import cpm_SSGknockback
import cpm_SSGdmg
import cpm_MGweapon
import cpm_MGdmg_tp
import cpm_MGdmg
import cpm_MGbox
import cpm_Gauntletknockback
import CPM_PM_Aircontrol
import pm_friction
import pm_accelerate
import cpm_pm_wishspeed
import cpm_pm_strafeaccelerate
import cpm_pm_aircontrol
import cpm_pm_airstopaccelerate
import cpm_pm_jump_z
import CPM_UpdateSettings
import trap_Trace
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_RealTime
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_Args
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_AddGib
import Q_Isfreeze
import CG_BodyObituary
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawNewScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireGrapple
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_ParseColors
import isEnemy
import isTeammate
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_DrawOBs
import CG_ExtractToken
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import CG_ScanForCrosshairEntity
import CG_DrawTeamInfo
import CG_DrawSnapshot
import CG_DrawScoreboard
import CG_DrawReward
import CG_DrawKeyPress
import CG_DrawIntermission
import CG_DrawHoldableItem
import CG_DrawDisconnect
import CG_DrawCrosshair
import CG_DrawClock
import CG_DrawCenterString
import CG_Alarm
import CG_FigureHUDColor
import DrawMOTDBox
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeFromColorTo
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_AddBoundingBox
import CG_PredictWeaponEffects
import CG_GetFadeTime
import cg_itemFX
import cg_lightningImpact
import cg_smokeGrowth_RL
import cg_smokeGrowth_GL
import cg_smokeRadius_RL
import cg_smokeRadius_GL
import cg_smoke_SG
import cg_damageDraw
import cg_fallKick
import cg_fontFade
import cg_debugModels
import cg_blueName
import cg_redName
import ch_shadowOffset
import cg_oldScoreboard
import cg_crosshairPulse
import cg_autoRecord
import cg_autoScreenshot
import s_ambient
import s_announcer
import cg_noteamchatbeep
import cg_nochatbeep
import cg_railHum
import cg_fixedTeleporterAngles
import cg_fastRespawn_override
import cg_muzzleFlash
import cg_drawDeathMessage
import cg_aimNudge
import cg_aimType
import cg_fullWeaponCycle
import cl_timeNudge
import sex
import ch_viewKeyPress
import ch_weaponSideBar
import ch_OBDetector
import ch_Speedometer
import ch_file
import language
import cg_motdDisplayTime
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_drawBBox
import cg_debugDelag
import cg_delag
import cl_guid
import cl_maxpackets
import snaps
import com_maxfps
import cl_packetdup
import rate
import color2
import color1
import colors
import r_vertexLight
import cg_deadBodyDarken
import cg_adjustTeamColors
import cg_TeamColors
import cg_EnemyColors
import cg_forceColors
import cg_teamModel
import cg_enemyModel
import g_allowHandicap
import g_pro_mode
import g_delagHitscan
import g_gamemode
import g_allowReady
import g_fastSwitch
import g_interference
import g_DynamicGauntletCycle
import weap_bfgCycle
import weap_plasmagunCycle
import weap_railgunCycle
import weap_rocketlauncherCycle
import weap_lightninggunCycle
import weap_grenadelauncherCycle
import weap_shotgunCycle
import weap_machinegunCycle
import weap_gauntletCycle
import weap_enableHook
import cg_enableBreath
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_railStyle
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_pmove_fixed
import sv_lock_pmove
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairColor
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawClock
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import chat
import autoFile
import max_speed
import hud_count
import hud
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import lagometer
import forceModelModificationCount
import BG_ProModePlayerTouchesItem
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import trap_FS_FOpenFile
import CG_FileExists
import findCharacter
import FixedName
import SanitizeString
import ConcatArgs
import trap_Argv
import trap_Argc
import Q_CopyStringUntil
import Q_CleanString
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import stristr
import HelpParse
import GetToken
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import ColorIndex
import color_z
import color_y
import color_x
import color_w
import color_v
import color_u
import color_t
import color_s
import color_r
import color_q
import color_p
import color_o
import color_n
import color_m
import color_l
import color_k
import color_j
import color_i
import color_h
import color_g
import color_f
import color_e
import color_d
import color_c
import color_b
import color_a
import colorMdGrey
import colorOrange
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1747
byte 1 57
byte 1 57
byte 1 57
byte 1 0
align 1
LABELV $1633
byte 1 37
byte 1 46
byte 1 51
byte 1 102
byte 1 117
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $1584
byte 1 83
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $1562
byte 1 0
align 1
LABELV $1561
byte 1 67
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $1557
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 68
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 109
byte 1 97
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $1553
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 65
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $1544
byte 1 37
byte 1 115
byte 1 32
byte 1 94
byte 1 55
byte 1 118
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $1500
byte 1 87
byte 1 97
byte 1 105
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 0
align 1
LABELV $1482
byte 1 76
byte 1 79
byte 1 87
byte 1 32
byte 1 65
byte 1 77
byte 1 77
byte 1 79
byte 1 32
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 0
align 1
LABELV $1481
byte 1 79
byte 1 85
byte 1 84
byte 1 32
byte 1 79
byte 1 70
byte 1 32
byte 1 65
byte 1 77
byte 1 77
byte 1 79
byte 1 0
align 1
LABELV $1453
byte 1 70
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $1428
byte 1 84
byte 1 69
byte 1 65
byte 1 77
byte 1 86
byte 1 79
byte 1 84
byte 1 69
byte 1 40
byte 1 37
byte 1 105
byte 1 41
byte 1 58
byte 1 37
byte 1 115
byte 1 32
byte 1 121
byte 1 101
byte 1 115
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 110
byte 1 111
byte 1 58
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $1397
byte 1 86
byte 1 79
byte 1 84
byte 1 69
byte 1 40
byte 1 37
byte 1 105
byte 1 41
byte 1 58
byte 1 37
byte 1 115
byte 1 32
byte 1 121
byte 1 101
byte 1 115
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 110
byte 1 111
byte 1 58
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $1388
byte 1 83
byte 1 80
byte 1 69
byte 1 67
byte 1 84
byte 1 65
byte 1 84
byte 1 79
byte 1 82
byte 1 0
align 1
LABELV $1313
byte 1 115
byte 1 110
byte 1 99
byte 1 0
align 1
LABELV $792
byte 1 37
byte 1 50
byte 1 105
byte 1 0
align 1
LABELV $758
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 102
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 49
byte 1 0
align 1
LABELV $684
byte 1 37
byte 1 51
byte 1 105
byte 1 32
byte 1 37
byte 1 51
byte 1 105
byte 1 0
align 1
LABELV $673
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 0
align 1
LABELV $592
byte 1 37
byte 1 105
byte 1 58
byte 1 37
byte 1 48
byte 1 50
byte 1 105
byte 1 0
align 1
LABELV $562
byte 1 37
byte 1 105
byte 1 102
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $108
byte 1 37
byte 1 105
byte 1 0
