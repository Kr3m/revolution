lit
align 4
LABELV validOrders
address $78
byte 4 1
address $79
byte 4 1
address $80
byte 4 2
address $81
byte 4 2
address $82
byte 4 3
address $83
byte 4 7
address $84
byte 4 4
address $85
byte 4 5
address $86
byte 4 6
align 4
LABELV numValidOrders
byte 4 9
code
proc CG_NewParseScores 2984 12
file "../cg_servercmds.c"
line 48
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_servercmds.c -- reliably sequenced text commands sent by the server
;4:// these are processed at snapshot transition time, so there will definately
;5:// be a valid snapshot this frame
;6:
;7:#include "cg_local.h"
;8:#include "../../ui/menudef.h" // bk001205 - for Q3_ui as well
;9:#include "..\game\bg_promode.h" // CPM
;10:
;11:typedef struct {
;12:	const char *order;
;13:	int taskNum;
;14:} orderTask_t;
;15:
;16:static const orderTask_t validOrders[] = {
;17:	{ VOICECHAT_GETFLAG,						TEAMTASK_OFFENSE },
;18:	{ VOICECHAT_OFFENSE,						TEAMTASK_OFFENSE },
;19:	{ VOICECHAT_DEFEND,							TEAMTASK_DEFENSE },
;20:	{ VOICECHAT_DEFENDFLAG,					TEAMTASK_DEFENSE },
;21:	{ VOICECHAT_PATROL,							TEAMTASK_PATROL },
;22:	{ VOICECHAT_CAMP,								TEAMTASK_CAMP },
;23:	{ VOICECHAT_FOLLOWME,						TEAMTASK_FOLLOW },
;24:	{ VOICECHAT_RETURNFLAG,					TEAMTASK_RETRIEVE },
;25:	{ VOICECHAT_FOLLOWFLAGCARRIER,	TEAMTASK_ESCORT }
;26:};
;27:
;28:static const int numValidOrders = sizeof(validOrders) / sizeof(orderTask_t);
;29:
;30:#ifdef MISSIONPACK // bk001204
;31:static int CG_ValidOrder(const char *p) {
;32:	int i;
;33:	for (i = 0; i < numValidOrders; i++) {
;34:		if (Q_stricmp(p, validOrders[i].order) == 0) {
;35:			return validOrders[i].taskNum;
;36:		}
;37:	}
;38:	return -1;
;39:}
;40:#endif
;41:
;42:/*
;43:=================
;44:CG_NewParseScores
;45:
;46:=================
;47:*/
;48:static void CG_NewParseScores() {
line 51
;49:	char string[1400];
;50:	byte bytez[1400];
;51:	int i = 0, position = 0, total = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 2808
CNSTI4 0
ASGNI4
line 53
;52:
;53:	trap_Argv( 1, string, sizeof( string ) );
CNSTI4 1
ARGI4
ADDRLP4 1408
ARGP4
CNSTI4 1400
ARGI4
ADDRGP4 trap_Argv
CALLV
pop
line 55
;54:
;55:	memset( cg.scores, 0, sizeof( cg.scores ) );
ADDRGP4 cg+110484
ARGP4
CNSTI4 0
ARGI4
CNSTI4 9984
ARGI4
ADDRGP4 memset
CALLP4
pop
line 56
;56:	memset(bytez, 0, sizeof(bytez));
ADDRLP4 8
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1400
ARGI4
ADDRGP4 memset
CALLP4
pop
line 57
;57:	memcpy(bytez, string, sizeof(bytez));
ADDRLP4 8
ARGP4
ADDRLP4 1408
ARGP4
CNSTI4 1400
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 60
;58:
;59:	//position += 3;
;60:	if ( cg.dbgScoreboard ) {
ADDRGP4 cg+170856
INDIRI4
CNSTI4 0
EQI4 $90
line 61
;61:		CG_Printf("%s\n", string);
ADDRGP4 $93
ARGP4
ADDRLP4 1408
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $94
line 62
;62:		do {
line 63
;63:			CG_Printf("^6DBG:CLT: %i -- %d\n", position, bytez[position++]);
ADDRGP4 $97
ARGP4
ADDRLP4 2812
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 2812
INDIRI4
ARGI4
ADDRLP4 4
ADDRLP4 2812
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 2812
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 64
;64:		} while ( position != 1400 && bytez[position] != 0 );
LABELV $95
ADDRLP4 4
INDIRI4
CNSTI4 1400
EQI4 $98
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 0
NEI4 $94
LABELV $98
line 65
;65:	}
LABELV $90
line 67
;66:	//total = position;
;67:	position = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 70
;68:
;69:	//Grab the first info
;70:	cg.numScores = (int)bytez[position++] - 40;
ADDRLP4 2812
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2812
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 cg+110468
ADDRLP4 2812
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
line 71
;71:	cg.teamScores[0] = (int)bytez[position++] - 40;//Red
ADDRLP4 2816
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2816
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 cg+110476
ADDRLP4 2816
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
line 72
;72:	cg.teamScores[1] = (int)bytez[position++] - 40;//Blue
ADDRLP4 2820
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2820
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 cg+110476+4
ADDRLP4 2820
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
line 73
;73:	cgs.picked_up = (int)bytez[position++] - 40;
ADDRLP4 2824
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2824
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 cgs+157816
ADDRLP4 2824
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
LABELV $104
line 76
;74:
;75:	
;76:	do {
line 78
;77:		//Grab client num
;78:		cg.scores[i].client = (int)bytez[position++] - 40;
ADDRLP4 2828
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2828
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484
ADDP4
ADDRLP4 2828
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
line 80
;79:		//Grab ping
;80:		cg.scores[i].ping = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+8
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 81
;81:		position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 83
;82:		//switch on ping
;83:		switch ( cg.scores[i].ping ) {
ADDRLP4 2836
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+8
ADDP4
INDIRI4
ASGNI4
ADDRLP4 2836
INDIRI4
CNSTI4 4031
EQI4 $122
ADDRLP4 2836
INDIRI4
CNSTI4 4032
EQI4 $116
ADDRGP4 $111
JUMPV
LABELV $116
line 85
;84:			case 4032:
;85:				cg.scores[i].ping = 999;
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+8
ADDP4
CNSTI4 999
ASGNI4
line 86
;86:				cg.scores[i].time = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+12
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 87
;87:				position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 88
;88:				break;
ADDRGP4 $112
JUMPV
LABELV $122
line 91
;89:
;90:			case 4031:
;91:				cg.scores[i].ping = -1;
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+8
ADDP4
CNSTI4 -1
ASGNI4
line 92
;92:				cg.scores[i].time = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+12
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 93
;93:				position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 94
;94:				break;
ADDRGP4 $112
JUMPV
LABELV $111
line 97
;95:
;96:			default:
;97:				cg.scores[i].time = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);		
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+12
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 98
;98:				position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 100
;99:
;100:					switch ( cgs.clientinfo[cg.scores[i].client].team ) {
ADDRLP4 2856
CNSTI4 1776
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ASGNI4
ADDRLP4 2856
INDIRI4
CNSTI4 3
EQI4 $132
ADDRGP4 $131
JUMPV
line 102
;101:						case TEAM_SPECTATOR:
;102:							break;//We have everything
LABELV $131
line 104
;103:						default:
;104:							cg.scores[i].score = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+4
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 105
;105:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 106
;106:							cg.scores[i].scoreFlags = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+116
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 107
;107:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 108
;108:							cgs.clientinfo[cg.scores[i].client].powerups = bytez[position++] - 40;
ADDRLP4 2868
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2868
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
CNSTI4 1776
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+168
ADDP4
ADDRLP4 2868
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
line 109
;109:							cg.scores[i].accuracy = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+120
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 110
;110:							if ( cg.scores[i].accuracy > 100 ) {
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+120
ADDP4
INDIRI4
CNSTI4 100
LEI4 $150
line 111
;111:								cg.scores[i].accuracy -= 100;
ADDRLP4 2876
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+120
ADDP4
ASGNP4
ADDRLP4 2876
INDIRP4
ADDRLP4 2876
INDIRP4
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 112
;112:								cg.scores[i].score *= -1;
ADDRLP4 2880
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+4
ADDP4
ASGNP4
ADDRLP4 2880
INDIRP4
CNSTI4 -1
ADDRLP4 2880
INDIRP4
INDIRI4
MULI4
ASGNI4
line 113
;113:							}
LABELV $150
line 114
;114:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 115
;115:							cg.scores[i].impressiveCount = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+124
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 116
;116:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 117
;117:							cg.scores[i].excellentCount = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+128
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 118
;118:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 119
;119:							cg.scores[i].guantletCount = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+132
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 120
;120:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 121
;121:							cg.scores[i].defendCount = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+136
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 122
;122:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 123
;123:							cg.scores[i].assistCount = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+140
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 124
;124:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 125
;125:							cg.scores[i].perfect = bytez[position++] - 40;
ADDRLP4 2896
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2896
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+144
ADDP4
ADDRLP4 2896
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
line 126
;126:							cg.scores[i].captures = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+20
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 127
;127:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 128
;128:							cg.scores[i].shots[WP_GAUNTLET] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+4
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 129
;129:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 130
;130:							cg.scores[i].shots[WP_MACHINEGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+8
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 131
;131:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 132
;132:							cg.scores[i].shots[WP_SHOTGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+12
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 133
;133:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 134
;134:							cg.scores[i].shots[WP_GRENADE_LAUNCHER] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+16
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 135
;135:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 136
;136:							cg.scores[i].shots[WP_ROCKET_LAUNCHER] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+20
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 137
;137:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 138
;138:							cg.scores[i].shots[WP_LIGHTNING] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+24
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 139
;139:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 140
;140:							cg.scores[i].shots[WP_RAILGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+28
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 141
;141:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 142
;142:							cg.scores[i].shots[WP_PLASMAGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+32
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 143
;143:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 144
;144:							cg.scores[i].shots[WP_BFG] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+24+36
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 145
;145:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 146
;146:							cg.scores[i].hits[WP_GAUNTLET] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+4
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 147
;147:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 148
;148:							cg.scores[i].hits[WP_MACHINEGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+8
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 149
;149:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 150
;150:							cg.scores[i].hits[WP_SHOTGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+12
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 151
;151:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 152
;152:							cg.scores[i].hits[WP_GRENADE_LAUNCHER] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+16
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 153
;153:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 154
;154:							cg.scores[i].hits[WP_ROCKET_LAUNCHER] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+20
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 155
;155:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 156
;156:							cg.scores[i].hits[WP_LIGHTNING] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+24
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 157
;157:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 158
;158:							cg.scores[i].hits[WP_RAILGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+28
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 159
;159:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 160
;160:							cg.scores[i].hits[WP_PLASMAGUN] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+32
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 161
;161:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 162
;162:							cg.scores[i].hits[WP_BFG] = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+68+36
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 163
;163:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 164
;164:							cg.scores[i].deaths = (bytez[position] - 64) * 63 + (bytez[position+1] - 64);
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+112
ADDP4
CNSTI4 63
ADDRLP4 4
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
MULI4
CNSTI4 4032
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 8+1
ADDP4
INDIRU1
CVUI4 1
CNSTI4 64
SUBI4
ADDI4
ASGNI4
line 165
;165:							position += 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 166
;166:							cg.scores[i].specnum = bytez[position++] - 40;
ADDRLP4 2980
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 2980
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+152
ADDP4
ADDRLP4 2980
INDIRI4
ADDRLP4 8
ADDP4
INDIRU1
CVUI4 1
CNSTI4 40
SUBI4
ASGNI4
line 167
;167:					}
LABELV $132
line 168
;168:		}
LABELV $112
line 170
;169:
;170:		cgs.clientinfo[ cg.scores[i].client ].score = cg.scores[i].score;
ADDRLP4 2844
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
CNSTI4 1776
ADDRLP4 2844
INDIRI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+128
ADDP4
ADDRLP4 2844
INDIRI4
ADDRGP4 cg+110484+4
ADDP4
INDIRI4
ASGNI4
line 171
;171:		cg.scores[i].team = cgs.clientinfo[cg.scores[i].client].team;
ADDRLP4 2848
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 2848
INDIRI4
ADDRGP4 cg+110484+16
ADDP4
CNSTI4 1776
ADDRLP4 2848
INDIRI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ASGNI4
line 172
;172:		cg.numTeamPlayers[cg.scores[i].team]++;
ADDRLP4 2852
CNSTI4 156
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+110484+16
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+170836
ADDP4
ASGNP4
ADDRLP4 2852
INDIRP4
ADDRLP4 2852
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 176
;173:		//if ( cg.dbgScoreboard ) {
;174:			//CG_Printf("i: %i < cg.%i && position: %i < total: %i\n", i, cg.numScores, position, total);
;175:		//}
;176:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 177
;177:	} while (i < cg.numScores);// && position < total);
LABELV $105
ADDRLP4 0
INDIRI4
ADDRGP4 cg+110468
INDIRI4
LTI4 $104
line 178
;178:}
LABELV $87
endproc CG_NewParseScores 2984 12
proc CG_ParseScores 316 20
line 188
;179:
;180:
;181:/*
;182:=================
;183:CG_ParseScores
;184:
;185:=================
;186:*/
;187:#define NUM1	32
;188:static void CG_ParseScores( void ) {
line 190
;189:	int		i, powerups;
;190:	byte	do_we_memset = 0;
ADDRLP4 4
CNSTU1 0
ASGNU1
line 193
;191:
;192:
;193:	do_we_memset = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 12
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 194
;194:	if ( do_we_memset == 99 ) {
ADDRLP4 4
INDIRU1
CVUI4 1
CNSTI4 99
NEI4 $270
line 195
;195:			cg.numScores = atoi( CG_Argv( 2 ) );
CNSTI4 2
ARGI4
ADDRLP4 20
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110468
ADDRLP4 24
INDIRI4
ASGNI4
line 196
;196:		if ( cg.numScores > MAX_CLIENTS ) {
ADDRGP4 cg+110468
INDIRI4
CNSTI4 64
LEI4 $273
line 197
;197:			cg.numScores = MAX_CLIENTS;
ADDRGP4 cg+110468
CNSTI4 64
ASGNI4
line 198
;198:		}
LABELV $273
line 200
;199:
;200:		cg.teamScores[0] = atoi( CG_Argv( 3 ) );//Red
CNSTI4 3
ARGI4
ADDRLP4 28
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110476
ADDRLP4 32
INDIRI4
ASGNI4
line 201
;201:		cg.teamScores[1] = atoi( CG_Argv( 4 ) );//Blue
CNSTI4 4
ARGI4
ADDRLP4 36
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110476+4
ADDRLP4 40
INDIRI4
ASGNI4
line 203
;202:
;203:		cgs.picked_up = atoi( CG_Argv( 5 ) );
CNSTI4 5
ARGI4
ADDRLP4 44
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+157816
ADDRLP4 48
INDIRI4
ASGNI4
line 204
;204:		memset( cg.scores, 0, sizeof( cg.scores ) );
ADDRGP4 cg+110484
ARGP4
CNSTI4 0
ARGI4
CNSTI4 9984
ARGI4
ADDRGP4 memset
CALLP4
pop
line 205
;205:		cg.numScoreParse = 0;
ADDRGP4 cg+162081
CNSTU1 0
ASGNU1
line 206
;206:		CG_Printf("^3%i %i %i %i\n", cg.numScores, cg.teamScores[0], cg.teamScores[1], cgs.picked_up);
ADDRGP4 $284
ARGP4
ADDRGP4 cg+110468
INDIRI4
ARGI4
ADDRGP4 cg+110476
INDIRI4
ARGI4
ADDRGP4 cg+110476+4
INDIRI4
ARGI4
ADDRGP4 cgs+157816
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 207
;207:	} else {
ADDRGP4 $271
JUMPV
LABELV $270
line 208
;208:		i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 210
;209:
;210:		cg.scores[cg.numScoreParse].client = atoi( CG_Argv( i * NUM1 + 1 ) );
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 20
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 211
;211:		cg.scores[cg.numScoreParse].score = atoi( CG_Argv( i * NUM1 + 2 ) );
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 28
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+4
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 212
;212:		cg.scores[cg.numScoreParse].ping = atoi( CG_Argv( i * NUM1 + 3 ) );
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+8
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 213
;213:		cg.scores[cg.numScoreParse].time = atoi( CG_Argv( i * NUM1 + 4 ) );
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+12
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 214
;214:		cg.scores[cg.numScoreParse].scoreFlags = atoi( CG_Argv( i * NUM1 + 5 ) );
ADDRLP4 52
CNSTI4 5
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 52
INDIRI4
LSHI4
ADDRLP4 52
INDIRI4
ADDI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+116
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 215
;215:		powerups = atoi( CG_Argv( i * NUM1 + 6 ) );
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 64
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 68
INDIRI4
ASGNI4
line 216
;216:		cg.scores[cg.numScoreParse].accuracy = atoi(CG_Argv(i * NUM1 + 7));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 72
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+120
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 217
;217:		cg.scores[cg.numScoreParse].impressiveCount = atoi(CG_Argv(i * NUM1 + 8));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+124
ADDP4
ADDRLP4 84
INDIRI4
ASGNI4
line 218
;218:		cg.scores[cg.numScoreParse].excellentCount = atoi(CG_Argv(i * NUM1 + 9));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 9
ADDI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+128
ADDP4
ADDRLP4 92
INDIRI4
ASGNI4
line 219
;219:		cg.scores[cg.numScoreParse].guantletCount = atoi(CG_Argv(i * NUM1 + 10));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 10
ADDI4
ARGI4
ADDRLP4 96
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+132
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 220
;220:		cg.scores[cg.numScoreParse].defendCount = atoi(CG_Argv(i * NUM1 + 11));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 11
ADDI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+136
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 221
;221:		cg.scores[cg.numScoreParse].assistCount = atoi(CG_Argv(i * NUM1 + 12));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 112
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+140
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 222
;222:		cg.scores[cg.numScoreParse].perfect = atoi(CG_Argv(i * NUM1 + 13));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 13
ADDI4
ARGI4
ADDRLP4 120
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+144
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 223
;223:		cg.scores[cg.numScoreParse].captures = atoi(CG_Argv(i * NUM1 + 14));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 14
ADDI4
ARGI4
ADDRLP4 128
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+20
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 224
;224:		cg.scores[cg.numScoreParse].shots[WP_GAUNTLET] = atoi(CG_Argv(i * NUM1 + 15));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 136
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 140
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+4
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 225
;225:		cg.scores[cg.numScoreParse].shots[WP_MACHINEGUN] = atoi(CG_Argv(i * NUM1 + 16));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 16
ADDI4
ARGI4
ADDRLP4 144
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 148
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+8
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 226
;226:		cg.scores[cg.numScoreParse].shots[WP_SHOTGUN] = atoi(CG_Argv(i * NUM1 + 17));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 17
ADDI4
ARGI4
ADDRLP4 152
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+12
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 227
;227:		cg.scores[cg.numScoreParse].shots[WP_GRENADE_LAUNCHER] = atoi(CG_Argv(i * NUM1 + 18));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 18
ADDI4
ARGI4
ADDRLP4 160
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 164
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+16
ADDP4
ADDRLP4 164
INDIRI4
ASGNI4
line 228
;228:		cg.scores[cg.numScoreParse].shots[WP_ROCKET_LAUNCHER] = atoi(CG_Argv(i * NUM1 + 19));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 19
ADDI4
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRLP4 172
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+20
ADDP4
ADDRLP4 172
INDIRI4
ASGNI4
line 229
;229:		cg.scores[cg.numScoreParse].shots[WP_LIGHTNING] = atoi(CG_Argv(i * NUM1 + 20));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 20
ADDI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+24
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 230
;230:		cg.scores[cg.numScoreParse].shots[WP_RAILGUN] = atoi(CG_Argv(i * NUM1 + 21));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 21
ADDI4
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+28
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 231
;231:		cg.scores[cg.numScoreParse].shots[WP_PLASMAGUN] = atoi(CG_Argv(i * NUM1 + 22));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 22
ADDI4
ARGI4
ADDRLP4 192
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+32
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 232
;232:		cg.scores[cg.numScoreParse].shots[WP_BFG] = atoi(CG_Argv(i * NUM1 + 23));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 23
ADDI4
ARGI4
ADDRLP4 200
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+24+36
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 233
;233:		cg.scores[cg.numScoreParse].hits[WP_GAUNTLET] = atoi(CG_Argv(i * NUM1 + 24));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 24
ADDI4
ARGI4
ADDRLP4 208
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRLP4 212
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+4
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 234
;234:		cg.scores[cg.numScoreParse].hits[WP_MACHINEGUN] = atoi(CG_Argv(i * NUM1 + 25));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 25
ADDI4
ARGI4
ADDRLP4 216
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+8
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 235
;235:		cg.scores[cg.numScoreParse].hits[WP_SHOTGUN] = atoi(CG_Argv(i * NUM1 + 26));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 26
ADDI4
ARGI4
ADDRLP4 224
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+12
ADDP4
ADDRLP4 228
INDIRI4
ASGNI4
line 236
;236:		cg.scores[cg.numScoreParse].hits[WP_GRENADE_LAUNCHER] = atoi(CG_Argv(i * NUM1 + 27));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 27
ADDI4
ARGI4
ADDRLP4 232
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRLP4 236
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+16
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 237
;237:		cg.scores[cg.numScoreParse].hits[WP_ROCKET_LAUNCHER] = atoi(CG_Argv(i * NUM1 + 28));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 28
ADDI4
ARGI4
ADDRLP4 240
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 244
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+20
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 238
;238:		cg.scores[cg.numScoreParse].hits[WP_LIGHTNING] = atoi(CG_Argv(i * NUM1 + 29));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 29
ADDI4
ARGI4
ADDRLP4 248
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 248
INDIRP4
ARGP4
ADDRLP4 252
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+24
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 239
;239:		cg.scores[cg.numScoreParse].hits[WP_RAILGUN] = atoi(CG_Argv(i * NUM1 + 30));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 30
ADDI4
ARGI4
ADDRLP4 256
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 256
INDIRP4
ARGP4
ADDRLP4 260
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+28
ADDP4
ADDRLP4 260
INDIRI4
ASGNI4
line 240
;240:		cg.scores[cg.numScoreParse].hits[WP_PLASMAGUN] = atoi(CG_Argv(i * NUM1 + 31));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 31
ADDI4
ARGI4
ADDRLP4 264
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 264
INDIRP4
ARGP4
ADDRLP4 268
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+32
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 241
;241:		cg.scores[cg.numScoreParse].hits[WP_BFG] = atoi(CG_Argv(i * NUM1 + 32));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 272
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 276
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+68+36
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 242
;242:		cg.scores[cg.numScoreParse].deaths = atoi(CG_Argv(i * NUM1 + 33));
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 33
ADDI4
ARGI4
ADDRLP4 280
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 284
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+112
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 243
;243:		cg.scores[cg.numScoreParse].specnum = atoi(CG_Argv(i * NUM1 + 34)); //Lucron: specspy
ADDRLP4 0
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 34
ADDI4
ARGI4
ADDRLP4 288
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 292
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+152
ADDP4
ADDRLP4 292
INDIRI4
ASGNI4
line 245
;244:
;245:		if ( cg.scores[cg.numScoreParse].client < 0 || cg.scores[cg.numScoreParse].client >= MAX_CLIENTS ) {
ADDRLP4 296
CNSTI4 156
ASGNI4
ADDRLP4 296
INDIRI4
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
CNSTI4 0
LTI4 $412
ADDRLP4 296
INDIRI4
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
CNSTI4 64
LTI4 $406
LABELV $412
line 246
;246:			cg.scores[cg.numScoreParse].client = 0;
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484
ADDP4
CNSTI4 0
ASGNI4
line 247
;247:		}
LABELV $406
line 248
;248:		cgs.clientinfo[ cg.scores[cg.numScoreParse].client ].score = cg.scores[cg.numScoreParse].score;
ADDRLP4 300
CNSTI4 156
ASGNI4
CNSTI4 1776
ADDRLP4 300
INDIRI4
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+128
ADDP4
ADDRLP4 300
INDIRI4
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+4
ADDP4
INDIRI4
ASGNI4
line 249
;249:		cgs.clientinfo[ cg.scores[cg.numScoreParse].client ].powerups = powerups;
CNSTI4 1776
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+168
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 250
;250:		cg.scores[cg.numScoreParse].team = cgs.clientinfo[cg.scores[cg.numScoreParse].client].team;
ADDRLP4 304
CNSTI4 156
ASGNI4
ADDRLP4 304
INDIRI4
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+16
ADDP4
CNSTI4 1776
ADDRLP4 304
INDIRI4
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+40960+68
ADDP4
INDIRI4
ASGNI4
line 251
;251:		cg.numTeamPlayers[cg.scores[cg.numScoreParse].team]++;
ADDRLP4 308
CNSTI4 156
ADDRGP4 cg+162081
INDIRU1
CVUI4 1
MULI4
ADDRGP4 cg+110484+16
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+170836
ADDP4
ASGNP4
ADDRLP4 308
INDIRP4
ADDRLP4 308
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 252
;252:		cg.numScoreParse++;
ADDRLP4 312
ADDRGP4 cg+162081
ASGNP4
ADDRLP4 312
INDIRP4
ADDRLP4 312
INDIRP4
INDIRU1
CVUI4 1
CNSTI4 1
ADDI4
CVIU4 4
CVUU1 4
ASGNU1
line 253
;253:	}
LABELV $271
line 258
;254:#ifdef MISSIONPACK
;255:	CG_SetScoreSelection(NULL);
;256:#endif
;257:
;258:}
LABELV $269
endproc CG_ParseScores 316 20
proc CG_UpdCvar 192 12
line 266
;259:
;260:/*
;261:=================
;262:CG_UpdCvar
;263:
;264:=================
;265:*/
;266:static void CG_UpdCvar( void ) {
line 269
;267:	int		cvarNum, value;
;268:
;269:	cvarNum = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 270
;270:	value = atoi( CG_Argv( 2 ) );
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 271
;271:	if ( cvarNum == 1 && rate.integer < value ) {
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $439
ADDRGP4 rate+12
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $439
line 273
;272:		//Update rate
;273:		trap_SendConsoleCommand(va("rate %i", value));
ADDRGP4 $442
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 275
;274:		//Setup the new minimum for clamping and such
;275:		cgs.minRate = value;
ADDRGP4 cgs+157804
ADDRLP4 0
INDIRI4
ASGNI4
line 276
;276:	} else if ( cvarNum == 2 ) {
ADDRGP4 $440
JUMPV
LABELV $439
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $444
line 277
;277:		if ( value > -2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 -2
LEI4 $446
line 278
;278:			trap_SendConsoleCommand(va("cg_railHum %i", value));
ADDRGP4 $448
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 279
;279:		}
LABELV $446
line 280
;280:		cgs.railHum = value;
ADDRGP4 cgs+157808
ADDRLP4 0
INDIRI4
ASGNI4
line 282
;281:
;282:	} else {
ADDRGP4 $445
JUMPV
LABELV $444
line 284
;283:		char	cvar_name[128], cvar_value[32];
;284:		Q_strncpyz( cvar_name, CG_Argv( 1 ), sizeof(cvar_name) );
CNSTI4 1
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
ARGP4
ADDRLP4 184
INDIRP4
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 285
;285:		Q_strncpyz( cvar_value, CG_Argv( 2 ), sizeof(cvar_value) );
CNSTI4 2
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 152
ARGP4
ADDRLP4 188
INDIRP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 286
;286:		trap_Cvar_Set(cvar_name, cvar_value);
ADDRLP4 24
ARGP4
ADDRLP4 152
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 287
;287:	}
LABELV $445
LABELV $440
line 289
;288:
;289:}
LABELV $438
endproc CG_UpdCvar 192 12
export CG_ConnUCv
proc CG_ConnUCv 32 12
line 296
;290:#define NUM_CONN_VARS 14 //13+1
;291:/*
;292:=================
;293:CG_ConnUCv()
;294:=================
;295:*/
;296:void CG_ConnUCv() {
line 298
;297:	int cvarValue;
;298:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $451
line 301
;299:	char cvar_value[8];
;300:
;301:	do {
line 302
;302:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 303
;303:		cvarValue = atoi( CG_Argv( i ) );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 20
INDIRI4
ASGNI4
line 304
;304:		memset(cvar_value, 0, sizeof(cvar_value));
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 8
ARGI4
ADDRGP4 memset
CALLP4
pop
line 305
;305:		Q_strncpyz( cvar_value, CG_Argv( i ), sizeof(cvar_value) );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
CNSTI4 8
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 306
;306:		if ( i == 1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $454
line 308
;307:			//Update rate
;308:			if ( rate.integer < cvarValue ) {
ADDRGP4 rate+12
INDIRI4
ADDRLP4 12
INDIRI4
GEI4 $456
line 309
;309:				trap_SendConsoleCommand(va("rate %i", cvarValue));
ADDRGP4 $442
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 310
;310:			}
LABELV $456
line 312
;311:			//Setup the new minimum for clamping and such
;312:			cgs.minRate = cvarValue;
ADDRGP4 cgs+157804
ADDRLP4 12
INDIRI4
ASGNI4
line 313
;313:		} else if ( i == 2 ) {
ADDRGP4 $455
JUMPV
LABELV $454
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $460
line 314
;314:			if ( cvarValue > -2 ) {
ADDRLP4 12
INDIRI4
CNSTI4 -2
LEI4 $462
line 315
;315:				trap_SendConsoleCommand(va("cg_railHum %i", cvarValue));
ADDRGP4 $448
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 316
;316:			}
LABELV $462
line 317
;317:			cgs.railHum = cvarValue;
ADDRGP4 cgs+157808
ADDRLP4 12
INDIRI4
ASGNI4
line 318
;318:		} else if ( i == 3 ) {
ADDRGP4 $461
JUMPV
LABELV $460
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $465
line 319
;319:			trap_Cvar_Set("weap_gauntletCycle", cvar_value);
ADDRGP4 $467
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 320
;320:		} else if ( i == 4 ) {
ADDRGP4 $466
JUMPV
LABELV $465
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $468
line 321
;321:			trap_Cvar_Set("weap_machinegunCycle", cvar_value);
ADDRGP4 $470
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 322
;322:		} else if ( i == 5 ) {
ADDRGP4 $469
JUMPV
LABELV $468
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $471
line 323
;323:			trap_Cvar_Set("weap_shotgunCycle", cvar_value);
ADDRGP4 $473
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 324
;324:		} else if ( i == 6 ) {
ADDRGP4 $472
JUMPV
LABELV $471
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $474
line 325
;325:			trap_Cvar_Set("weap_grenadelauncherCycle", cvar_value);
ADDRGP4 $476
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 326
;326:		} else if ( i == 7 ) {
ADDRGP4 $475
JUMPV
LABELV $474
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $477
line 327
;327:			trap_Cvar_Set("weap_lightninggunCycle", cvar_value);
ADDRGP4 $479
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 328
;328:		} else if ( i == 8 ) {
ADDRGP4 $478
JUMPV
LABELV $477
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $480
line 329
;329:			trap_Cvar_Set("weap_rocketlauncherCycle", cvar_value);
ADDRGP4 $482
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 330
;330:		} else if ( i == 9 ) {
ADDRGP4 $481
JUMPV
LABELV $480
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $483
line 331
;331:			trap_Cvar_Set("weap_railgunCycle", cvar_value);
ADDRGP4 $485
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 332
;332:		} else if ( i == 10 ) {
ADDRGP4 $484
JUMPV
LABELV $483
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $486
line 333
;333:			trap_Cvar_Set("weap_plasmagunCycle", cvar_value);
ADDRGP4 $488
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 334
;334:		} else if ( i == 11 ) {
ADDRGP4 $487
JUMPV
LABELV $486
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $489
line 335
;335:			trap_Cvar_Set("weap_bfgCycle", cvar_value);
ADDRGP4 $491
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 336
;336:		} else if ( i == 12 ) {
ADDRGP4 $490
JUMPV
LABELV $489
ADDRLP4 0
INDIRI4
CNSTI4 12
NEI4 $492
line 337
;337:			trap_Cvar_Set("g_DynamicGauntletCycle", cvar_value);
ADDRGP4 $494
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 338
;338:		} else if ( i == 13 ) {
ADDRGP4 $493
JUMPV
LABELV $492
ADDRLP4 0
INDIRI4
CNSTI4 13
NEI4 $495
line 339
;339:			cgs.allowedWeapons = cvarValue;
ADDRGP4 cgs+157812
ADDRLP4 12
INDIRI4
ASGNI4
line 340
;340:		}
LABELV $495
LABELV $493
LABELV $490
LABELV $487
LABELV $484
LABELV $481
LABELV $478
LABELV $475
LABELV $472
LABELV $469
LABELV $466
LABELV $461
LABELV $455
line 342
;341:
;342:	} while ( i < NUM_CONN_VARS );
LABELV $452
ADDRLP4 0
INDIRI4
CNSTI4 14
LTI4 $451
line 344
;343:
;344:}
LABELV $450
endproc CG_ConnUCv 32 12
proc CG_ParseTeamInfo 68 4
line 352
;345:
;346:/*
;347:=================
;348:CG_ParseTeamInfo
;349:
;350:=================
;351:*/
;352:static void CG_ParseTeamInfo( void ) {
line 356
;353:	int		i;
;354:	int		client;
;355:
;356:	numSortedTeamPlayers = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 numSortedTeamPlayers
ADDRLP4 12
INDIRI4
ASGNI4
line 358
;357:
;358:	for ( i = 0 ; i < numSortedTeamPlayers ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $502
JUMPV
LABELV $499
line 359
;359:		client = atoi( CG_Argv( i * 6 + 2 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 361
;360:
;361:		sortedTeamPlayers[i] = client;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 363
;362:
;363:		cgs.clientinfo[ client ].location = atoi( CG_Argv( i * 6 + 3 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1776
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40960+132
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 364
;364:		cgs.clientinfo[ client ].health = atoi( CG_Argv( i * 6 + 4 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1776
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40960+136
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 365
;365:		cgs.clientinfo[ client ].armor = atoi( CG_Argv( i * 6 + 5 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1776
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40960+140
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 366
;366:		cgs.clientinfo[ client ].curWeapon = atoi( CG_Argv( i * 6 + 6 ) );
ADDRLP4 48
CNSTI4 6
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 48
INDIRI4
ADDI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1776
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40960+144
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
line 367
;367:		cgs.clientinfo[ client ].powerups = atoi( CG_Argv( i * 6 + 7 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1776
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+40960+168
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 368
;368:	}
LABELV $500
line 358
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $502
ADDRLP4 0
INDIRI4
ADDRGP4 numSortedTeamPlayers
INDIRI4
LTI4 $499
line 369
;369:}
LABELV $498
endproc CG_ParseTeamInfo 68 4
export CG_ParseServerinfo
proc CG_ParseServerinfo 104 16
line 380
;370:
;371:
;372:/*
;373:================
;374:CG_ParseServerinfo
;375:
;376:This is called explicitly when the gamestate is first received,
;377:and whenever the server updates any serverinfo flagged cvars
;378:================
;379:*/
;380:void CG_ParseServerinfo( void ) {
line 384
;381:	const char	*info;
;382:	char	*mapname;
;383:
;384:	info = CG_ConfigString( CS_SERVERINFO );
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 385
;385:	cgs.gametype = atoi( Info_ValueForKey( info, "g_gametype" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $515
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31456
ADDRLP4 16
INDIRI4
ASGNI4
line 386
;386:	trap_Cvar_Set("g_gametype", va("%i", cgs.gametype));
ADDRGP4 $516
ARGP4
ADDRGP4 cgs+31456
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $515
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 387
;387:	cgs.dmflags = atoi( Info_ValueForKey( info, "dmflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $519
ARGP4
ADDRLP4 24
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31460
ADDRLP4 28
INDIRI4
ASGNI4
line 388
;388:	cgs.teamflags = atoi( Info_ValueForKey( info, "teamflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $521
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31464
ADDRLP4 36
INDIRI4
ASGNI4
line 389
;389:	cgs.fraglimit = atoi( Info_ValueForKey( info, "fraglimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $523
ARGP4
ADDRLP4 40
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31468
ADDRLP4 44
INDIRI4
ASGNI4
line 390
;390:	cgs.capturelimit = atoi( Info_ValueForKey( info, "capturelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $525
ARGP4
ADDRLP4 48
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31472
ADDRLP4 52
INDIRI4
ASGNI4
line 391
;391:	cgs.timelimit = atoi( Info_ValueForKey( info, "timelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $527
ARGP4
ADDRLP4 56
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31476
ADDRLP4 60
INDIRI4
ASGNI4
line 392
;392:	cgs.maxclients = atoi( Info_ValueForKey( info, "sv_maxclients" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $529
ARGP4
ADDRLP4 64
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31480
ADDRLP4 68
INDIRI4
ASGNI4
line 393
;393:	mapname = Info_ValueForKey( info, "mapname" );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $530
ARGP4
ADDRLP4 72
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 72
INDIRP4
ASGNP4
line 394
;394:	Com_sprintf( cgs.mapname, sizeof( cgs.mapname ), "maps/%s.bsp", mapname );
ADDRGP4 cgs+31484
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $533
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 395
;395:	Q_strncpyz( cgs.redTeam, Info_ValueForKey( info, "g_redTeam" ), sizeof(cgs.redTeam) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $535
ARGP4
ADDRLP4 76
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31548
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 396
;396:	trap_Cvar_Set("g_redTeam", cgs.redTeam);
ADDRGP4 $535
ARGP4
ADDRGP4 cgs+31548
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 397
;397:	Q_strncpyz( cgs.blueTeam, Info_ValueForKey( info, "g_blueTeam" ), sizeof(cgs.blueTeam) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $539
ARGP4
ADDRLP4 80
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31612
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 398
;398:	trap_Cvar_Set("g_blueTeam", cgs.blueTeam);
ADDRGP4 $539
ARGP4
ADDRGP4 cgs+31612
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 402
;399:
;400://unlagged - server options
;401:	// we'll need this for deciding whether or not to predict weapon effects
;402:	cgs.delagHitscan = atoi( Info_ValueForKey( info, "g_delagHitscan" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $543
ARGP4
ADDRLP4 84
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+157800
ADDRLP4 88
INDIRI4
ASGNI4
line 403
;403:	trap_Cvar_Set("g_delagHitscan", va("%i", cgs.delagHitscan));
ADDRGP4 $516
ARGP4
ADDRGP4 cgs+157800
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $543
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 405
;404://unlagged - server options
;405:	cgs.minRate = atoi( Info_ValueForKey( info, "sv_minRate" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $546
ARGP4
ADDRLP4 96
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+157804
ADDRLP4 100
INDIRI4
ASGNI4
line 406
;406:}
LABELV $513
endproc CG_ParseServerinfo 104 16
proc CG_ParseWarmup 24 8
line 413
;407:
;408:/*
;409:==================
;410:CG_ParseWarmup
;411:==================
;412:*/
;413:static void CG_ParseWarmup( void ) {
line 417
;414:	const char	*info;
;415:	int			warmup;
;416:
;417:	info = CG_ConfigString( CS_WARMUP );
CNSTI4 5
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 419
;418:
;419:	warmup = atoi( info );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 420
;420:	cg.warmupCount = -1;
ADDRGP4 cg+130808
CNSTI4 -1
ASGNI4
line 422
;421:
;422:	if ( warmup == 0 && cg.warmup ) {
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $549
ADDRGP4 cg+130804
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $549
line 424
;423:
;424:	} else if ( warmup > 0 && cg.warmup <= 0 ) {
ADDRGP4 $550
JUMPV
LABELV $549
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $552
ADDRGP4 cg+130804
INDIRI4
ADDRLP4 20
INDIRI4
GTI4 $552
line 430
;425:#ifdef MISSIONPACK
;426:		if (cgs.gametype >= GT_CTF && cgs.gametype <= GT_HARVESTER) {
;427:			trap_S_StartLocalSound( cgs.media.countPrepareTeamSound, CHAN_ANNOUNCER );
;428:		} else
;429:#endif
;430:		{
line 431
;431:			trap_S_StartLocalSound( cgs.media.countPrepareSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+156680+1068
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 432
;432:		}
line 433
;433:	}
LABELV $552
LABELV $550
line 435
;434:
;435:	cg.warmup = warmup;
ADDRGP4 cg+130804
ADDRLP4 0
INDIRI4
ASGNI4
line 436
;436:}
LABELV $547
endproc CG_ParseWarmup 24 8
export CG_SetConfigValues
proc CG_SetConfigValues 36 4
line 445
;437:
;438:/*
;439:================
;440:CG_SetConfigValues
;441:
;442:Called on load to set the initial values from configure strings
;443:================
;444:*/
;445:void CG_SetConfigValues( void ) {
line 448
;446:	const char *s;
;447:
;448:	cgs.scores1 = atoi( CG_ConfigString( CS_SCORES1 ) );
CNSTI4 6
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34788
ADDRLP4 8
INDIRI4
ASGNI4
line 449
;449:	cgs.scores2 = atoi( CG_ConfigString( CS_SCORES2 ) );
CNSTI4 7
ARGI4
ADDRLP4 12
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34792
ADDRLP4 16
INDIRI4
ASGNI4
line 450
;450:	cgs.levelStartTime = atoi( CG_ConfigString( CS_LEVEL_START_TIME ) );
CNSTI4 21
ARGI4
ADDRLP4 20
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34784
ADDRLP4 24
INDIRI4
ASGNI4
line 451
;451:	if( cgs.gametype == GT_CTF ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $562
line 452
;452:		s = CG_ConfigString( CS_FLAGSTATUS );
CNSTI4 23
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 453
;453:		cgs.flags[TEAM_RED-1] = s[0] - '0';
ADDRGP4 cgs+34796
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 454
;454:		cgs.flags[TEAM_BLUE-1] = s[1] - '0';
ADDRGP4 cgs+34796+4
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 455
;455:	}
LABELV $562
line 462
;456:#ifdef MISSIONPACK
;457:	else if( cgs.gametype == GT_1FCTF ) {
;458:		s = CG_ConfigString( CS_FLAGSTATUS );
;459:		cgs.flagStatus = s[0] - '0';
;460:	}
;461:#endif
;462:	cg.warmup = atoi( CG_ConfigString( CS_WARMUP ) );
CNSTI4 5
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+130804
ADDRLP4 32
INDIRI4
ASGNI4
line 463
;463:}
LABELV $558
endproc CG_SetConfigValues 36 4
export CG_ShaderStateChanged
proc CG_ShaderStateChanged 188 12
line 470
;464:
;465:/*
;466:=====================
;467:CG_ShaderStateChanged
;468:=====================
;469:*/
;470:void CG_ShaderStateChanged(void) {
line 477
;471:	char originalShader[MAX_QPATH];
;472:	char newShader[MAX_QPATH];
;473:	char timeOffset[16];
;474:	const char *o;
;475:	char *n,*t;
;476:
;477:	o = CG_ConfigString( CS_SHADERSTATE );
CNSTI4 24
ARGI4
ADDRLP4 156
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
ADDRGP4 $571
JUMPV
LABELV $570
line 478
;478:	while (o && *o) {
line 479
;479:		n = strstr(o, "=");
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $573
ARGP4
ADDRLP4 160
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 160
INDIRP4
ASGNP4
line 480
;480:		if (n && *n) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $572
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $572
line 481
;481:			strncpy(originalShader, o, n-o);
ADDRLP4 12
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 482
;482:			originalShader[n-o] = 0;
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 483
;483:			n++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 484
;484:			t = strstr(n, ":");
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 172
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 172
INDIRP4
ASGNP4
line 485
;485:			if (t && *t) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $572
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $572
line 486
;486:				strncpy(newShader, n, t-n);
ADDRLP4 76
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 487
;487:				newShader[t-n] = 0;
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 76
ADDP4
CNSTI1 0
ASGNI1
line 488
;488:			} else {
line 489
;489:				break;
LABELV $578
line 491
;490:			}
;491:			t++;
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 492
;492:			o = strstr(t, "@");
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $579
ARGP4
ADDRLP4 180
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 180
INDIRP4
ASGNP4
line 493
;493:			if (o) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $575
line 494
;494:				strncpy(timeOffset, t, o-t);
ADDRLP4 140
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 495
;495:				timeOffset[o-t] = 0;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 140
ADDP4
CNSTI1 0
ASGNI1
line 496
;496:				o++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 497
;497:				trap_R_RemapShader( originalShader, newShader, timeOffset );
ADDRLP4 12
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 498
;498:			}
line 499
;499:		} else {
line 500
;500:			break;
LABELV $575
line 502
;501:		}
;502:	}
LABELV $571
line 478
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $582
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $570
LABELV $582
LABELV $572
line 503
;503:}
LABELV $569
endproc CG_ShaderStateChanged 188 12
proc CG_ConfigStringModified 44 8
line 511
;504:
;505:/*
;506:================
;507:CG_ConfigStringModified
;508:
;509:================
;510:*/
;511:static void CG_ConfigStringModified( void ) {
line 515
;512:	const char	*str;
;513:	int		num;
;514:
;515:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 519
;516:
;517:	// get the gamestate from the client system, which will have the
;518:	// new configstring already integrated
;519:	trap_GetGameState( &cgs.gameState );
ADDRGP4 cgs
ARGP4
ADDRGP4 trap_GetGameState
CALLV
pop
line 522
;520:
;521:	// look up the individual string that was modified
;522:	str = CG_ConfigString( num );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 525
;523:
;524:	// do something with it if necessary
;525:	if ( num == CS_MUSIC ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $584
line 526
;526:		CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 527
;527:	} else if ( num == CS_SERVERINFO ) {
ADDRGP4 $585
JUMPV
LABELV $584
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $586
line 528
;528:		CG_ParseServerinfo();
ADDRGP4 CG_ParseServerinfo
CALLV
pop
line 529
;529:	} else if ( num == CS_WARMUP ) {
ADDRGP4 $587
JUMPV
LABELV $586
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $588
line 530
;530:		CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 531
;531:	} else if ( num == CS_SCORES1 ) {
ADDRGP4 $589
JUMPV
LABELV $588
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $590
line 532
;532:		cgs.scores1 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34788
ADDRLP4 20
INDIRI4
ASGNI4
line 533
;533:	} else if ( num == CS_SCORES2 ) {
ADDRGP4 $591
JUMPV
LABELV $590
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $593
line 534
;534:		cgs.scores2 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34792
ADDRLP4 20
INDIRI4
ASGNI4
line 535
;535:	} else if ( num == CS_LEVEL_START_TIME ) {
ADDRGP4 $594
JUMPV
LABELV $593
ADDRLP4 0
INDIRI4
CNSTI4 21
NEI4 $596
line 536
;536:		cgs.levelStartTime = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34784
ADDRLP4 20
INDIRI4
ASGNI4
line 565
;537:	/*} else if ( num == CS_VOTE_TIME ) {
;538:		cgs.voteTime = atoi( str );
;539:		cgs.voteModified = qtrue;
;540:	} else if ( num == CS_VOTE_YES ) {
;541:		cgs.voteYes = atoi( str );
;542:		cgs.voteModified = qtrue;
;543:	} else if ( num == CS_VOTE_NO ) {
;544:		cgs.voteNo = atoi( str );
;545:		cgs.voteModified = qtrue;
;546:	} else if ( num == CS_VOTE_STRING ) {
;547:		Q_strncpyz( cgs.voteString, str, sizeof( cgs.voteString ) );*/
;548:#ifdef MISSIONPACK
;549:		trap_S_StartLocalSound( cgs.media.voteNow, CHAN_ANNOUNCER );
;550:#endif //MISSIONPACK
;551:	/*} else if ( num >= CS_TEAMVOTE_TIME && num <= CS_TEAMVOTE_TIME + 1) {
;552:		cgs.teamVoteTime[num-CS_TEAMVOTE_TIME] = atoi( str );
;553:		cgs.teamVoteModified[num-CS_TEAMVOTE_TIME] = qtrue;
;554:	} else if ( num >= CS_TEAMVOTE_YES && num <= CS_TEAMVOTE_YES + 1) {
;555:		cgs.teamVoteYes[num-CS_TEAMVOTE_YES] = atoi( str );
;556:		cgs.teamVoteModified[num-CS_TEAMVOTE_YES] = qtrue;
;557:	} else if ( num >= CS_TEAMVOTE_NO && num <= CS_TEAMVOTE_NO + 1) {
;558:		cgs.teamVoteNo[num-CS_TEAMVOTE_NO] = atoi( str );
;559:		cgs.teamVoteModified[num-CS_TEAMVOTE_NO] = qtrue;
;560:	} else if ( num >= CS_TEAMVOTE_STRING && num <= CS_TEAMVOTE_STRING + 1) {
;561:		Q_strncpyz( cgs.teamVoteString[num-CS_TEAMVOTE_STRING], str, sizeof( cgs.teamVoteString ) );*/
;562:#ifdef MISSIONPACK
;563:		trap_S_StartLocalSound( cgs.media.voteNow, CHAN_ANNOUNCER );
;564:#endif
;565:	} else if ( num == CS_INTERMISSION ) {
ADDRGP4 $597
JUMPV
LABELV $596
ADDRLP4 0
INDIRI4
CNSTI4 22
NEI4 $599
line 566
;566:		cg.intermissionStarted = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+24
ADDRLP4 20
INDIRI4
ASGNI4
line 567
;567:	} else if ( num >= CS_MODELS && num < CS_MODELS+MAX_MODELS ) {
ADDRGP4 $600
JUMPV
LABELV $599
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $602
ADDRLP4 0
INDIRI4
CNSTI4 288
GEI4 $602
line 568
;568:		cgs.gameModels[ num-CS_MODELS ] = trap_R_RegisterModel( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34812-128
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 569
;569:	} else if ( num >= CS_SOUNDS && num < CS_SOUNDS+MAX_MODELS ) {
ADDRGP4 $603
JUMPV
LABELV $602
ADDRLP4 0
INDIRI4
CNSTI4 288
LTI4 $606
ADDRLP4 0
INDIRI4
CNSTI4 544
GEI4 $606
line 570
;570:		if ( str[0] != '*' ) {	// player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $607
line 571
;571:			cgs.gameSounds[ num-CS_SOUNDS] = trap_S_RegisterSound( str, qfalse );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 28
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+35836-1152
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 572
;572:		}
line 573
;573:	} else if ( num >= CS_PLAYERS && num < CS_PLAYERS+MAX_CLIENTS ) {
ADDRGP4 $607
JUMPV
LABELV $606
ADDRLP4 0
INDIRI4
CNSTI4 544
LTI4 $612
ADDRLP4 0
INDIRI4
CNSTI4 608
GEI4 $612
line 574
;574:		CG_NewClientInfo( num - CS_PLAYERS );
ADDRLP4 0
INDIRI4
CNSTI4 544
SUBI4
ARGI4
ADDRGP4 CG_NewClientInfo
CALLV
pop
line 575
;575:		CG_BuildSpectatorString();
ADDRGP4 CG_BuildSpectatorString
CALLV
pop
line 576
;576:	} else if ( num == CS_FLAGSTATUS ) {
ADDRGP4 $613
JUMPV
LABELV $612
ADDRLP4 0
INDIRI4
CNSTI4 23
NEI4 $614
line 577
;577:		if( cgs.gametype == GT_CTF ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 4
NEI4 $615
line 579
;578:			// format is rb where its red/blue, 0 is at base, 1 is taken, 2 is dropped
;579:			cgs.flags[TEAM_RED-1] = str[0] - '0';
ADDRGP4 cgs+34796
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 580
;580:			cgs.flags[TEAM_BLUE-1] = str[1] - '0';
ADDRGP4 cgs+34796+4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 581
;581:		}
line 587
;582:#ifdef MISSIONPACK
;583:		else if( cgs.gametype == GT_1FCTF ) {
;584:			cgs.flagStatus = str[0] - '0';
;585:		}
;586:#endif
;587:	}
ADDRGP4 $615
JUMPV
LABELV $614
line 588
;588:	else if ( num == CS_SHADERSTATE ) {
ADDRLP4 0
INDIRI4
CNSTI4 24
NEI4 $622
line 589
;589:		CG_ShaderStateChanged();
ADDRGP4 CG_ShaderStateChanged
CALLV
pop
line 590
;590:	}
ADDRGP4 $623
JUMPV
LABELV $622
line 592
;591:	// CPM
;592:		else if ( num == CS_PRO_MODE )
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $624
line 593
;593:		{
line 594
;594:			CPM_UpdateSettings( (atoi(str)) ? ((cgs.gametype == GT_TEAM) ? 2 : 1) : 0 );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $629
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
NEI4 $631
ADDRLP4 36
CNSTI4 2
ASGNI4
ADDRGP4 $632
JUMPV
LABELV $631
ADDRLP4 36
CNSTI4 1
ASGNI4
LABELV $632
ADDRLP4 32
ADDRLP4 36
INDIRI4
ASGNI4
ADDRGP4 $630
JUMPV
LABELV $629
ADDRLP4 32
CNSTI4 0
ASGNI4
LABELV $630
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 CPM_UpdateSettings
CALLV
pop
line 595
;595:		}
LABELV $624
LABELV $623
LABELV $615
LABELV $613
LABELV $607
LABELV $603
LABELV $600
LABELV $597
LABELV $594
LABELV $591
LABELV $589
LABELV $587
LABELV $585
line 598
;596:	// !CPM
;597:		
;598:}
LABELV $583
endproc CG_ConfigStringModified 44 8
proc CG_AddToTeamChat 60 0
line 607
;599:
;600:
;601:/*
;602:=======================
;603:CG_AddToTeamChat
;604:
;605:=======================
;606:*/
;607:static void CG_AddToTeamChat( const char *str ) {
line 613
;608:	int len;
;609:	char *p, *ls;
;610:	int lastcolor;
;611:	int chatHeight;
;612:
;613:	if (cg_teamChatHeight.integer < TEAMCHAT_HEIGHT) {
ADDRGP4 cg_teamChatHeight+12
INDIRI4
CNSTI4 8
GEI4 $634
line 614
;614:		chatHeight = cg_teamChatHeight.integer;
ADDRLP4 12
ADDRGP4 cg_teamChatHeight+12
INDIRI4
ASGNI4
line 615
;615:	} else {
ADDRGP4 $635
JUMPV
LABELV $634
line 616
;616:		chatHeight = TEAMCHAT_HEIGHT;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 617
;617:	}
LABELV $635
line 619
;618:
;619:	if (chatHeight <= 0 || cg_teamChatTime.integer <= 0) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $641
ADDRGP4 cg_teamChatTime+12
INDIRI4
ADDRLP4 20
INDIRI4
GTI4 $638
LABELV $641
line 621
;620:		// team chat disabled, dump into normal chat
;621:		cgs.teamChatPos = cgs.teamLastChatPos = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 cgs+156588
ADDRLP4 24
INDIRI4
ASGNI4
ADDRGP4 cgs+156584
ADDRLP4 24
INDIRI4
ASGNI4
line 622
;622:		return;
ADDRGP4 $633
JUMPV
LABELV $638
line 625
;623:	}
;624:
;625:	len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 627
;626:
;627:	p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+156584
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+154624
ADDP4
ASGNP4
line 628
;628:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 630
;629:
;630:	lastcolor = '7';
ADDRLP4 16
CNSTI4 55
ASGNI4
line 632
;631:
;632:	ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $647
JUMPV
LABELV $646
line 633
;633:	while (*str) {
line 634
;634:		if (len > TEAMCHAT_WIDTH - 1) {
ADDRLP4 4
INDIRI4
CNSTI4 79
LEI4 $649
line 635
;635:			if (ls) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $651
line 636
;636:				str -= (p - ls);
ADDRFP4 0
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 637
;637:				str++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 638
;638:				p -= (p - ls);
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 639
;639:			}
LABELV $651
line 640
;640:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 642
;641:
;642:			cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+156584
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+156552
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 644
;643:
;644:			cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+156584
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 645
;645:			p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+156584
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+154624
ADDP4
ASGNP4
line 646
;646:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 647
;647:			*p++ = Q_COLOR_ESCAPE;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI1 94
ASGNI1
line 648
;648:			*p++ = lastcolor;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 16
INDIRI4
CVII1 4
ASGNI1
line 649
;649:			len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 650
;650:			ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 651
;651:		}
LABELV $649
line 653
;652:
;653:		if ( Q_IsColorString( str ) ) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $659
ADDRLP4 28
CNSTI4 94
ASGNI4
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 28
INDIRI4
NEI4 $659
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $659
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $659
line 654
;654:			*p++ = *str++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI1
ASGNI1
line 655
;655:			lastcolor = *str;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 656
;656:			*p++ = *str++;
ADDRLP4 48
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 56
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ASGNP4
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 52
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI1
ASGNI1
line 657
;657:			continue;
ADDRGP4 $647
JUMPV
LABELV $659
line 659
;658:		}
;659:		if (*str == ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
NEI4 $661
line 660
;660:			ls = p;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 661
;661:		}
LABELV $661
line 662
;662:		*p++ = *str++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI1
ASGNI1
line 663
;663:		len++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 664
;664:	}
LABELV $647
line 633
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $646
line 665
;665:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 667
;666:
;667:	cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+156584
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+156552
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 668
;668:	cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+156584
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 670
;669:
;670:	if (cgs.teamChatPos - cgs.teamLastChatPos > chatHeight)
ADDRGP4 cgs+156584
INDIRI4
ADDRGP4 cgs+156588
INDIRI4
SUBI4
ADDRLP4 12
INDIRI4
LEI4 $667
line 671
;671:		cgs.teamLastChatPos = cgs.teamChatPos - chatHeight;
ADDRGP4 cgs+156588
ADDRGP4 cgs+156584
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
LABELV $667
line 672
;672:}
LABELV $633
endproc CG_AddToTeamChat 60 0
proc CG_MapRestart 0 8
line 685
;673:
;674:/*
;675:===============
;676:CG_MapRestart
;677:
;678:The server has issued a map_restart, so the next snapshot
;679:is completely new and should not be interpolated to.
;680:
;681:A tournement restart will clear everything, but doesn't
;682:require a reload of all the media
;683:===============
;684:*/
;685:static void CG_MapRestart( void ) {
line 686
;686:	if ( cg_showmiss.integer ) {
ADDRGP4 cg_showmiss+12
INDIRI4
CNSTI4 0
EQI4 $674
line 687
;687:		CG_Printf( "CG_MapRestart\n" );
ADDRGP4 $677
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 688
;688:	}
LABELV $674
line 690
;689:
;690:	CG_InitLocalEntities();
ADDRGP4 CG_InitLocalEntities
CALLV
pop
line 691
;691:	CG_InitMarkPolys();
ADDRGP4 CG_InitMarkPolys
CALLV
pop
line 692
;692:	CG_ClearParticles ();
ADDRGP4 CG_ClearParticles
CALLV
pop
line 695
;693:
;694:	// make sure the "3 frags left" warnings play again
;695:	cg.fraglimitWarnings = 0;
ADDRGP4 cg+107620
CNSTI4 0
ASGNI4
line 697
;696:
;697:	cg.timelimitWarnings = 0;
ADDRGP4 cg+107616
CNSTI4 0
ASGNI4
line 699
;698:
;699:	cg.intermissionStarted = qfalse;
ADDRGP4 cg+24
CNSTI4 0
ASGNI4
line 701
;700:
;701:	cgs.voteTime = 0;
ADDRGP4 cgs+31676
CNSTI4 0
ASGNI4
line 703
;702:
;703:	cg.mapRestart = qtrue;
ADDRGP4 cg+107624
CNSTI4 1
ASGNI4
line 705
;704:
;705:	CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 707
;706:
;707:	trap_S_ClearLoopingSounds(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 trap_S_ClearLoopingSounds
CALLV
pop
line 712
;708:
;709:	// we really should clear more parts of cg here and stop sounds
;710:
;711:	// play the "fight" sound if this is a restart without warmup
;712:	if ( cg.warmup == 0 /* && cgs.gametype == GT_TOURNAMENT */) {
ADDRGP4 cg+130804
INDIRI4
CNSTI4 0
NEI4 $683
line 713
;713:		trap_S_StartLocalSound( cgs.media.countFightSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+156680+1064
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 715
;714:		//CG_CenterPrint( "FIGHT!", 120, GIANTCHAR_WIDTH*2 );
;715:	}
LABELV $683
line 724
;716:#ifdef MISSIONPACK
;717:	if (cg_singlePlayerActive.integer) {
;718:		trap_Cvar_Set("ui_matchStartTime", va("%i", cg.time));
;719:		if (cg_recordSPDemo.integer && cg_recordSPDemoName.string && *cg_recordSPDemoName.string) {
;720:			trap_SendConsoleCommand(va("set g_synchronousclients 1 ; record %s \n", cg_recordSPDemoName.string));
;721:		}
;722:	}
;723:#endif
;724:	trap_Cvar_Set("cg_thirdPerson", "0");
ADDRGP4 $688
ARGP4
ADDRGP4 $689
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 725
;725:}
LABELV $673
endproc CG_MapRestart 0 8
export CG_ParseVoiceChats
proc CG_ParseVoiceChats 16508 16
line 764
;726:
;727:#define MAX_VOICEFILESIZE	16384
;728:#define MAX_VOICEFILES		8
;729:#define MAX_VOICECHATS		64
;730:#define MAX_VOICESOUNDS		64
;731:#define MAX_CHATSIZE		64
;732:#define MAX_HEADMODELS		64
;733:
;734:typedef struct voiceChat_s
;735:{
;736:	char id[64];
;737:	int numSounds;
;738:	sfxHandle_t sounds[MAX_VOICESOUNDS];
;739:	char chats[MAX_VOICESOUNDS][MAX_CHATSIZE];
;740:} voiceChat_t;
;741:
;742:typedef struct voiceChatList_s
;743:{
;744:	char name[64];
;745:	int gender;
;746:	int numVoiceChats;
;747:	voiceChat_t voiceChats[MAX_VOICECHATS];
;748:} voiceChatList_t;
;749:
;750:typedef struct headModelVoiceChat_s
;751:{
;752:	char headmodel[64];
;753:	int voiceChatNum;
;754:} headModelVoiceChat_t;
;755:
;756:voiceChatList_t voiceChatLists[MAX_VOICEFILES];
;757:headModelVoiceChat_t headModelVoiceChat[MAX_HEADMODELS];
;758:
;759:/*
;760:=================
;761:CG_ParseVoiceChats
;762:=================
;763:*/
;764:int CG_ParseVoiceChats( const char *filename, voiceChatList_t *voiceChatList, int maxVoiceChats ) {
line 774
;765:	int	len, i;
;766:	fileHandle_t f;
;767:	char buf[MAX_VOICEFILESIZE];
;768:	char **p, *ptr;
;769:	char *token;
;770:	voiceChat_t *voiceChats;
;771:	qboolean compress;
;772:	sfxHandle_t sound;
;773:
;774:	compress = qtrue;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 775
;775:	if (cg_buildScript.integer) {
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $691
line 776
;776:		compress = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 777
;777:	}
LABELV $691
line 779
;778:
;779:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16420
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 16420
INDIRI4
ASGNI4
line 780
;780:	if ( !f ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $694
line 781
;781:		trap_Print( va( S_COLOR_RED "voice chat file not found: %s\n", filename ) );
ADDRGP4 $696
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16424
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16424
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 782
;782:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $690
JUMPV
LABELV $694
line 784
;783:	}
;784:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 24
INDIRI4
CNSTI4 16384
LTI4 $697
line 785
;785:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $699
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16424
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16424
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 786
;786:		trap_FS_FCloseFile( f );
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 787
;787:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $690
JUMPV
LABELV $697
line 790
;788:	}
;789:
;790:	trap_FS_Read( buf, len, f );
ADDRLP4 32
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 791
;791:	buf[len] = 0;
ADDRLP4 24
INDIRI4
ADDRLP4 32
ADDP4
CNSTI1 0
ASGNI1
line 792
;792:	trap_FS_FCloseFile( f );
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 794
;793:
;794:	ptr = buf;
ADDRLP4 16416
ADDRLP4 32
ASGNP4
line 795
;795:	p = &ptr;
ADDRLP4 12
ADDRLP4 16416
ASGNP4
line 797
;796:
;797:	Com_sprintf(voiceChatList->name, sizeof(voiceChatList->name), "%s", filename);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $700
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 798
;798:	voiceChats = voiceChatList->voiceChats;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
line 799
;799:	for ( i = 0; i < maxVoiceChats; i++ ) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $704
JUMPV
LABELV $701
line 800
;800:		voiceChats[i].id[0] = 0;
CNSTI4 4420
ADDRLP4 20
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 801
;801:	}
LABELV $702
line 799
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $704
ADDRLP4 20
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $701
line 802
;802:	token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16424
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16424
INDIRP4
ASGNP4
line 803
;803:	if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $707
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $705
LABELV $707
line 804
;804:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $690
JUMPV
LABELV $705
line 806
;805:	}
;806:	if (!Q_stricmp(token, "female")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $710
ARGP4
ADDRLP4 16432
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16432
INDIRI4
CNSTI4 0
NEI4 $708
line 807
;807:		voiceChatList->gender = GENDER_FEMALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 808
;808:	}
ADDRGP4 $709
JUMPV
LABELV $708
line 809
;809:	else if (!Q_stricmp(token, "male")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $713
ARGP4
ADDRLP4 16436
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16436
INDIRI4
CNSTI4 0
NEI4 $711
line 810
;810:		voiceChatList->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 811
;811:	}
ADDRGP4 $712
JUMPV
LABELV $711
line 812
;812:	else if (!Q_stricmp(token, "neuter")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $716
ARGP4
ADDRLP4 16440
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16440
INDIRI4
CNSTI4 0
NEI4 $714
line 813
;813:		voiceChatList->gender = GENDER_NEUTER;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 2
ASGNI4
line 814
;814:	}
ADDRGP4 $715
JUMPV
LABELV $714
line 815
;815:	else {
line 816
;816:		trap_Print( va( S_COLOR_RED "expected gender not found in voice chat file: %s\n", filename ) );
ADDRGP4 $717
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16444
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16444
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 817
;817:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $690
JUMPV
LABELV $715
LABELV $712
LABELV $709
line 820
;818:	}
;819:
;820:	voiceChatList->numVoiceChats = 0;
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $719
JUMPV
LABELV $718
line 821
;821:	while ( 1 ) {
line 822
;822:		token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16444
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16444
INDIRP4
ASGNP4
line 823
;823:		if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $723
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $721
LABELV $723
line 824
;824:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $690
JUMPV
LABELV $721
line 826
;825:		}
;826:		Com_sprintf(voiceChats[voiceChatList->numVoiceChats].id, sizeof( voiceChats[voiceChatList->numVoiceChats].id ), "%s", token);
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 827
;827:		token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16452
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16452
INDIRP4
ASGNP4
line 828
;828:		if (Q_stricmp(token, "{")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $726
ARGP4
ADDRLP4 16456
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16456
INDIRI4
CNSTI4 0
EQI4 $724
line 829
;829:			trap_Print( va( S_COLOR_RED "expected { found %s in voice chat file: %s\n", token, filename ) );
ADDRGP4 $727
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16460
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16460
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 830
;830:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $690
JUMPV
LABELV $724
line 832
;831:		}
;832:		voiceChats[voiceChatList->numVoiceChats].numSounds = 0;
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $729
JUMPV
LABELV $728
line 833
;833:		while(1) {
line 834
;834:			token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16460
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16460
INDIRP4
ASGNP4
line 835
;835:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $733
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $731
LABELV $733
line 836
;836:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $690
JUMPV
LABELV $731
line 838
;837:			}
;838:			if (!Q_stricmp(token, "}"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $736
ARGP4
ADDRLP4 16468
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16468
INDIRI4
CNSTI4 0
NEI4 $734
line 839
;839:				break;
ADDRGP4 $730
JUMPV
LABELV $734
line 840
;840:			sound = trap_S_RegisterSound( token, compress );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16472
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16472
INDIRI4
ASGNI4
line 841
;841:			voiceChats[voiceChatList->numVoiceChats].sounds[voiceChats[voiceChatList->numVoiceChats].numSounds] = sound;
ADDRLP4 16476
CNSTI4 68
ASGNI4
ADDRLP4 16480
CNSTI4 4420
ADDRFP4 4
INDIRP4
ADDRLP4 16476
INDIRI4
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16480
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16480
INDIRP4
ADDRLP4 16476
INDIRI4
ADDP4
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 842
;842:			token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16484
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16484
INDIRP4
ASGNP4
line 843
;843:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $739
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $737
LABELV $739
line 844
;844:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $690
JUMPV
LABELV $737
line 846
;845:			}
;846:			Com_sprintf(voiceChats[voiceChatList->numVoiceChats].chats[
ADDRLP4 16492
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16496
CNSTI4 64
ASGNI4
ADDRLP4 16492
INDIRP4
ADDRLP4 16496
INDIRI4
ADDP4
INDIRI4
CNSTI4 6
LSHI4
ADDRLP4 16492
INDIRP4
CNSTI4 324
ADDP4
ADDP4
ARGP4
ADDRLP4 16496
INDIRI4
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 848
;847:							voiceChats[voiceChatList->numVoiceChats].numSounds], MAX_CHATSIZE, "%s", token);
;848:			if (sound)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $740
line 849
;849:				voiceChats[voiceChatList->numVoiceChats].numSounds++;
ADDRLP4 16500
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 16500
INDIRP4
ADDRLP4 16500
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $740
line 850
;850:			if (voiceChats[voiceChatList->numVoiceChats].numSounds >= MAX_VOICESOUNDS)
ADDRLP4 16504
CNSTI4 64
ASGNI4
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ADDRLP4 16504
INDIRI4
ADDP4
INDIRI4
ADDRLP4 16504
INDIRI4
LTI4 $742
line 851
;851:				break;
ADDRGP4 $730
JUMPV
LABELV $742
line 852
;852:		}
LABELV $729
line 833
ADDRGP4 $728
JUMPV
LABELV $730
line 853
;853:		voiceChatList->numVoiceChats++;
ADDRLP4 16460
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 16460
INDIRP4
ADDRLP4 16460
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 854
;854:		if (voiceChatList->numVoiceChats >= maxVoiceChats)
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $744
line 855
;855:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $690
JUMPV
LABELV $744
line 856
;856:	}
LABELV $719
line 821
ADDRGP4 $718
JUMPV
line 857
;857:	return qtrue;
CNSTI4 1
RETI4
LABELV $690
endproc CG_ParseVoiceChats 16508 16
export CG_LoadVoiceChats
proc CG_LoadVoiceChats 8 0
line 865
;858:}
;859:
;860:/*
;861:=================
;862:CG_LoadVoiceChats
;863:=================
;864:*/
;865:void CG_LoadVoiceChats( void ) {
line 868
;866:	int size;
;867:
;868:	size = trap_MemoryRemaining();
ADDRLP4 4
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 887
;869://freeze
;870:#ifdef MISSIONPACK
;871://freeze
;872:	CG_ParseVoiceChats( "scripts/female1.voice", &voiceChatLists[0], MAX_VOICECHATS );
;873:	CG_ParseVoiceChats( "scripts/female2.voice", &voiceChatLists[1], MAX_VOICECHATS );
;874:	CG_ParseVoiceChats( "scripts/female3.voice", &voiceChatLists[2], MAX_VOICECHATS );
;875:	CG_ParseVoiceChats( "scripts/male1.voice", &voiceChatLists[3], MAX_VOICECHATS );
;876:	CG_ParseVoiceChats( "scripts/male2.voice", &voiceChatLists[4], MAX_VOICECHATS );
;877:	CG_ParseVoiceChats( "scripts/male3.voice", &voiceChatLists[5], MAX_VOICECHATS );
;878:	CG_ParseVoiceChats( "scripts/male4.voice", &voiceChatLists[6], MAX_VOICECHATS );
;879:	CG_ParseVoiceChats( "scripts/male5.voice", &voiceChatLists[7], MAX_VOICECHATS );
;880://freeze
;881://#else
;882://	CG_ParseVoiceChats( "scripts/female4.voice", &voiceChatLists[ 0 ], MAX_VOICECHATS );
;883://	CG_ParseVoiceChats( "scripts/male6.voice", &voiceChatLists[ 1 ], MAX_VOICECHATS );
;884:#endif
;885://freeze
;886://	CG_Printf("voice chat memory size = %d\n", size - trap_MemoryRemaining());
;887:}
LABELV $746
endproc CG_LoadVoiceChats 8 0
export CG_HeadModelVoiceChats
proc CG_HeadModelVoiceChats 16424 16
line 894
;888:
;889:/*
;890:=================
;891:CG_HeadModelVoiceChats
;892:=================
;893:*/
;894:int CG_HeadModelVoiceChats( char *filename ) {
line 901
;895:	int	len, i;
;896:	fileHandle_t f;
;897:	char buf[MAX_VOICEFILESIZE];
;898:	char **p, *ptr;
;899:	char *token;
;900:
;901:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16408
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16408
INDIRI4
ASGNI4
line 902
;902:	if ( !f ) {
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $748
line 904
;903:		//trap_Print( va( "voice chat file not found: %s\n", filename ) );
;904:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $747
JUMPV
LABELV $748
line 906
;905:	}
;906:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 8
INDIRI4
CNSTI4 16384
LTI4 $750
line 907
;907:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $699
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16412
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16412
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 908
;908:		trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 909
;909:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $747
JUMPV
LABELV $750
line 912
;910:	}
;911:
;912:	trap_FS_Read( buf, len, f );
ADDRLP4 16
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 913
;913:	buf[len] = 0;
ADDRLP4 8
INDIRI4
ADDRLP4 16
ADDP4
CNSTI1 0
ASGNI1
line 914
;914:	trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 916
;915:
;916:	ptr = buf;
ADDRLP4 16404
ADDRLP4 16
ASGNP4
line 917
;917:	p = &ptr;
ADDRLP4 16400
ADDRLP4 16404
ASGNP4
line 919
;918:
;919:	token = COM_ParseExt(p, qtrue);
ADDRLP4 16400
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16412
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16412
INDIRP4
ASGNP4
line 920
;920:	if (!token || token[0] == 0) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $754
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $752
LABELV $754
line 921
;921:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $747
JUMPV
LABELV $752
line 924
;922:	}
;923:
;924:	for ( i = 0; i < MAX_VOICEFILES; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $755
line 925
;925:		if ( !Q_stricmp(token, voiceChatLists[i].name) ) {
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
ARGP4
ADDRLP4 16420
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16420
INDIRI4
CNSTI4 0
NEI4 $759
line 926
;926:			return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $747
JUMPV
LABELV $759
line 928
;927:		}
;928:	}
LABELV $756
line 924
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LTI4 $755
line 932
;929:
;930:	//FIXME: maybe try to load the .voice file which name is stored in token?
;931:
;932:	return -1;
CNSTI4 -1
RETI4
LABELV $747
endproc CG_HeadModelVoiceChats 16424 16
export CG_GetVoiceChat
proc CG_GetVoiceChat 16 8
line 941
;933:}
;934:
;935:
;936:/*
;937:=================
;938:CG_GetVoiceChat
;939:=================
;940:*/
;941:int CG_GetVoiceChat( voiceChatList_t *voiceChatList, const char *id, sfxHandle_t *snd, char **chat) {
line 944
;942:	int i, rnd;
;943:
;944:	for ( i = 0; i < voiceChatList->numVoiceChats; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $765
JUMPV
LABELV $762
line 945
;945:		if ( !Q_stricmp( id, voiceChatList->voiceChats[i].id ) ) {
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $766
line 946
;946:			rnd = random() * voiceChatList->voiceChats[i].numSounds;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 64
ADDP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 947
;947:			*snd = voiceChatList->voiceChats[i].sounds[rnd];
ADDRFP4 8
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 68
ADDP4
ADDP4
INDIRI4
ASGNI4
line 948
;948:			*chat = voiceChatList->voiceChats[i].chats[rnd];
ADDRFP4 12
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 6
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 324
ADDP4
ADDP4
ASGNP4
line 949
;949:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $761
JUMPV
LABELV $766
line 951
;950:		}
;951:	}
LABELV $763
line 944
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $765
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
LTI4 $762
line 952
;952:	return qfalse;
CNSTI4 0
RETI4
LABELV $761
endproc CG_GetVoiceChat 16 8
export CG_VoiceChatListForClient
proc CG_VoiceChatListForClient 164 20
line 960
;953:}
;954:
;955:/*
;956:=================
;957:CG_VoiceChatListForClient
;958:=================
;959:*/
;960:voiceChatList_t *CG_VoiceChatListForClient( int clientNum ) {
line 965
;961:	clientInfo_t *ci;
;962:	int voiceChatNum, i, j, k, gender;
;963:	char filename[MAX_QPATH], headModelName[MAX_QPATH];
;964:
;965:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 152
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 0
LTI4 $771
ADDRLP4 152
INDIRI4
CNSTI4 64
LTI4 $769
LABELV $771
line 966
;966:		clientNum = 0;
ADDRFP4 0
CNSTI4 0
ASGNI4
line 967
;967:	}
LABELV $769
line 968
;968:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 148
CNSTI4 1776
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40960
ADDP4
ASGNP4
line 970
;969:
;970:	for ( k = 0; k < 2; k++ ) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $773
line 971
;971:		if ( k == 0 ) {
ADDRLP4 144
INDIRI4
CNSTI4 0
NEI4 $777
line 972
;972:			if (ci->headModelName[0] == '*') {
ADDRLP4 148
INDIRP4
CNSTI4 348
ADDP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $779
line 973
;973:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName+1, ci->headSkinName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $781
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 349
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 412
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 974
;974:			}
ADDRGP4 $778
JUMPV
LABELV $779
line 975
;975:			else {
line 976
;976:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName, ci->headSkinName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $781
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 348
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 412
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 977
;977:			}
line 978
;978:		}
ADDRGP4 $778
JUMPV
LABELV $777
line 979
;979:		else {
line 980
;980:			if (ci->headModelName[0] == '*') {
ADDRLP4 148
INDIRP4
CNSTI4 348
ADDP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $782
line 981
;981:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName+1 );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 349
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 982
;982:			}
ADDRGP4 $783
JUMPV
LABELV $782
line 983
;983:			else {
line 984
;984:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 348
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 985
;985:			}
LABELV $783
line 986
;986:		}
LABELV $778
line 988
;987:		// find the voice file for the head model the client uses
;988:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $784
line 989
;989:			if (!Q_stricmp(headModelVoiceChat[i].headmodel, headModelName)) {
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 156
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $788
line 990
;990:				break;
ADDRGP4 $786
JUMPV
LABELV $788
line 992
;991:			}
;992:		}
LABELV $785
line 988
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $784
LABELV $786
line 993
;993:		if (i < MAX_HEADMODELS) {
ADDRLP4 0
INDIRI4
CNSTI4 64
GEI4 $790
line 994
;994:			return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
CNSTI4 282952
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $768
JUMPV
LABELV $790
line 997
;995:		}
;996:		// find a <headmodelname>.vc file
;997:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $793
line 998
;998:			if (!strlen(headModelVoiceChat[i].headmodel)) {
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $797
line 999
;999:				Com_sprintf(filename, sizeof(filename), "scripts/%s.vc", headModelName);
ADDRLP4 76
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $799
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1000
;1000:				voiceChatNum = CG_HeadModelVoiceChats(filename);
ADDRLP4 76
ARGP4
ADDRLP4 160
ADDRGP4 CG_HeadModelVoiceChats
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 160
INDIRI4
ASGNI4
line 1001
;1001:				if (voiceChatNum == -1)
ADDRLP4 72
INDIRI4
CNSTI4 -1
NEI4 $800
line 1002
;1002:					break;
ADDRGP4 $795
JUMPV
LABELV $800
line 1003
;1003:				Com_sprintf(headModelVoiceChat[i].headmodel, sizeof ( headModelVoiceChat[i].headmodel ),
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1005
;1004:							"%s", headModelName);
;1005:				headModelVoiceChat[i].voiceChatNum = voiceChatNum;
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 1006
;1006:				return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
CNSTI4 282952
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $768
JUMPV
LABELV $797
line 1008
;1007:			}
;1008:		}
LABELV $794
line 997
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $793
LABELV $795
line 1009
;1009:	}
LABELV $774
line 970
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 2
LTI4 $773
line 1010
;1010:	gender = ci->gender;
ADDRLP4 140
ADDRLP4 148
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ASGNI4
line 1011
;1011:	for (k = 0; k < 2; k++) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $804
line 1013
;1012:		// just pick the first with the right gender
;1013:		for ( i = 0; i < MAX_VOICEFILES; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $808
line 1014
;1014:			if (strlen(voiceChatLists[i].name)) {
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
EQI4 $812
line 1015
;1015:				if (voiceChatLists[i].gender == gender) {
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists+64
ADDP4
INDIRI4
ADDRLP4 140
INDIRI4
NEI4 $814
line 1017
;1016:					// store this head model with voice chat for future reference
;1017:					for ( j = 0; j < MAX_HEADMODELS; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $817
line 1018
;1018:						if (!strlen(headModelVoiceChat[j].headmodel)) {
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 160
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 0
NEI4 $821
line 1019
;1019:							Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1021
;1020:									"%s", headModelName);
;1021:							headModelVoiceChat[j].voiceChatNum = i;
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1022
;1022:							break;
ADDRGP4 $819
JUMPV
LABELV $821
line 1024
;1023:						}
;1024:					}
LABELV $818
line 1017
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $817
LABELV $819
line 1025
;1025:					return &voiceChatLists[i];
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $768
JUMPV
LABELV $814
line 1027
;1026:				}
;1027:			}
LABELV $812
line 1028
;1028:		}
LABELV $809
line 1013
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LTI4 $808
line 1030
;1029:		// fall back to male gender because we don't have neuter in the mission pack
;1030:		if (gender == GENDER_MALE)
ADDRLP4 140
INDIRI4
CNSTI4 0
NEI4 $824
line 1031
;1031:			break;
ADDRGP4 $806
JUMPV
LABELV $824
line 1032
;1032:		gender = GENDER_MALE;
ADDRLP4 140
CNSTI4 0
ASGNI4
line 1033
;1033:	}
LABELV $805
line 1011
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 2
LTI4 $804
LABELV $806
line 1035
;1034:	// store this head model with voice chat for future reference
;1035:	for ( j = 0; j < MAX_HEADMODELS; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $826
line 1036
;1036:		if (!strlen(headModelVoiceChat[j].headmodel)) {
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $830
line 1037
;1037:			Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1039
;1038:					"%s", headModelName);
;1039:			headModelVoiceChat[j].voiceChatNum = 0;
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
CNSTI4 0
ASGNI4
line 1040
;1040:			break;
ADDRGP4 $828
JUMPV
LABELV $830
line 1042
;1041:		}
;1042:	}
LABELV $827
line 1035
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $826
LABELV $828
line 1044
;1043:	// just return the first voice chat list
;1044:	return &voiceChatLists[0];
ADDRGP4 voiceChatLists
RETP4
LABELV $768
endproc CG_VoiceChatListForClient 164 20
export CG_PlayVoiceChat
proc CG_PlayVoiceChat 0 0
line 1065
;1045:}
;1046:
;1047:#define MAX_VOICECHATBUFFER		32
;1048:
;1049:typedef struct bufferedVoiceChat_s
;1050:{
;1051:	int clientNum;
;1052:	sfxHandle_t snd;
;1053:	int voiceOnly;
;1054:	char cmd[MAX_SAY_TEXT];
;1055:	char message[MAX_SAY_TEXT];
;1056:} bufferedVoiceChat_t;
;1057:
;1058:bufferedVoiceChat_t voiceChatBuffer[MAX_VOICECHATBUFFER];
;1059:
;1060:/*
;1061:=================
;1062:CG_PlayVoiceChat
;1063:=================
;1064:*/
;1065:void CG_PlayVoiceChat( bufferedVoiceChat_t *vchat ) {
line 1101
;1066:
;1067:#ifdef MISSIONPACK
;1068:
;1069:	// if we are going into the intermission, don't start any voices
;1070:	if ( cg.intermissionStarted ) {
;1071:		return;
;1072:	}
;1073:
;1074:	if ( !cg_noVoiceChats.integer ) {
;1075:		trap_S_StartLocalSound( vchat->snd, CHAN_VOICE);
;1076://freeze
;1077://#ifdef MISSIONPACK
;1078://freeze
;1079:		if (vchat->clientNum != cg.snap->ps.clientNum) {
;1080:			int orderTask = CG_ValidOrder(vchat->cmd);
;1081:			if (orderTask > 0) {
;1082:				cgs.acceptOrderTime = cg.time + 5000;
;1083:				Q_strncpyz(cgs.acceptVoice, vchat->cmd, sizeof(cgs.acceptVoice));
;1084:				cgs.acceptTask = orderTask;
;1085:				cgs.acceptLeader = vchat->clientNum;
;1086:			}
;1087:			// see if this was an order
;1088:			CG_ShowResponseHead();
;1089:		}
;1090://freeze
;1091://#endif
;1092://freeze
;1093:	}
;1094:	if (!vchat->voiceOnly && !cg_noVoiceText.integer) {
;1095:		CG_AddToTeamChat( vchat->message );
;1096:		CG_Printf( "%s\n", vchat->message );
;1097:	}
;1098:	voiceChatBuffer[cg.voiceChatBufferOut].snd = 0;
;1099:
;1100:#endif
;1101:}
LABELV $833
endproc CG_PlayVoiceChat 0 0
export CG_PlayBufferedVoiceChats
proc CG_PlayBufferedVoiceChats 0 0
line 1108
;1102:
;1103:/*
;1104:=====================
;1105:CG_PlayBufferedVoieChats
;1106:=====================
;1107:*/
;1108:void CG_PlayBufferedVoiceChats( void ) {
line 1121
;1109:
;1110:#ifdef MISSIONPACK
;1111:	if ( cg.voiceChatTime < cg.time ) {
;1112:		if (cg.voiceChatBufferOut != cg.voiceChatBufferIn && voiceChatBuffer[cg.voiceChatBufferOut].snd) {
;1113:			//
;1114:			CG_PlayVoiceChat(&voiceChatBuffer[cg.voiceChatBufferOut]);
;1115:			//
;1116:			cg.voiceChatBufferOut = (cg.voiceChatBufferOut + 1) % MAX_VOICECHATBUFFER;
;1117:			cg.voiceChatTime = cg.time + 1000;
;1118:		}
;1119:	}
;1120:#endif
;1121:}
LABELV $834
endproc CG_PlayBufferedVoiceChats 0 0
export CG_AddBufferedVoiceChat
proc CG_AddBufferedVoiceChat 0 0
line 1128
;1122:
;1123:/*
;1124:=====================
;1125:CG_AddBufferedVoiceChat
;1126:=====================
;1127:*/
;1128:void CG_AddBufferedVoiceChat( bufferedVoiceChat_t *vchat ) {
line 1146
;1129:
;1130:#ifdef MISSIONPACK
;1131:
;1132:	// if we are going into the intermission, don't start any voices
;1133:	if ( cg.intermissionStarted ) {
;1134:		return;
;1135:	}
;1136:
;1137:	memcpy(&voiceChatBuffer[cg.voiceChatBufferIn], vchat, sizeof(bufferedVoiceChat_t));
;1138:	cg.voiceChatBufferIn = (cg.voiceChatBufferIn + 1) % MAX_VOICECHATBUFFER;
;1139:	if (cg.voiceChatBufferIn == cg.voiceChatBufferOut) {
;1140:		CG_PlayVoiceChat( &voiceChatBuffer[cg.voiceChatBufferOut] );
;1141:		cg.voiceChatBufferOut++;
;1142:	}
;1143:
;1144:#endif
;1145:
;1146:}
LABELV $835
endproc CG_AddBufferedVoiceChat 0 0
export CG_VoiceChatLocal
proc CG_VoiceChatLocal 0 0
line 1153
;1147:
;1148:/*
;1149:=================
;1150:CG_VoiceChatLocal
;1151:=================
;1152:*/
;1153:void CG_VoiceChatLocal( int mode, qboolean voiceOnly, int clientNum, int color, const char *cmd ) {
line 1209
;1154:
;1155:#ifdef MISSIONPACK
;1156:
;1157:	char *chat;
;1158:	voiceChatList_t *voiceChatList;
;1159:	clientInfo_t *ci;
;1160:	sfxHandle_t snd;
;1161:	bufferedVoiceChat_t vchat;
;1162:
;1163:	// if we are going into the intermission, don't start any voices
;1164:	if ( cg.intermissionStarted ) {
;1165:		return;
;1166:	}
;1167:
;1168:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
;1169:		clientNum = 0;
;1170:	}
;1171:	ci = &cgs.clientinfo[ clientNum ];
;1172:
;1173:	cgs.currentVoiceClient = clientNum;
;1174:
;1175:	voiceChatList = CG_VoiceChatListForClient( clientNum );
;1176:
;1177:	if ( CG_GetVoiceChat( voiceChatList, cmd, &snd, &chat ) ) {
;1178:		//
;1179:		if ( mode == SAY_TEAM || !cg_teamChatsOnly.integer ) {
;1180:			vchat.clientNum = clientNum;
;1181:			vchat.snd = snd;
;1182:			vchat.voiceOnly = voiceOnly;
;1183:			Q_strncpyz(vchat.cmd, cmd, sizeof(vchat.cmd));
;1184:			if ( mode == SAY_TELL ) {
;1185:				Com_sprintf(vchat.message, sizeof(vchat.message), "[%s]: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;1186:			}
;1187:			else if ( mode == SAY_TEAM ) {
;1188://freeze
;1189:				const char	*p = CG_ConfigString( CS_LOCATIONS + ci->location );
;1190:
;1191:				if ( !p || !*p ) {
;1192://freeze
;1193:				Com_sprintf(vchat.message, sizeof(vchat.message), "(%s): %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;1194://freeze
;1195:				} else {
;1196:					Com_sprintf( vchat.message, sizeof ( vchat.message ), "(%s) (%s): %c%c%s", ci->name, p, Q_COLOR_ESCAPE, color, chat );
;1197:				}
;1198://freeze
;1199:			}
;1200:			else {
;1201:				Com_sprintf(vchat.message, sizeof(vchat.message), "%s: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;1202:			}
;1203:			CG_AddBufferedVoiceChat(&vchat);
;1204:		}
;1205:	}
;1206:
;1207:#endif
;1208:
;1209:}
LABELV $836
endproc CG_VoiceChatLocal 0 0
export CG_VoiceChat
proc CG_VoiceChat 0 0
line 1216
;1210:
;1211:/*
;1212:=================
;1213:CG_VoiceChat
;1214:=================
;1215:*/
;1216:void CG_VoiceChat( int mode ) {
line 1241
;1217:
;1218:#ifdef MISSIONPACK
;1219:
;1220:	const char *cmd;
;1221:	int clientNum, color;
;1222:	qboolean voiceOnly;
;1223:
;1224:	voiceOnly = atoi(CG_Argv(1));
;1225:	clientNum = atoi(CG_Argv(2));
;1226:	color = atoi(CG_Argv(3));
;1227:	cmd = CG_Argv(4);
;1228:
;1229:	if (cg_noTaunt.integer != 0) {
;1230:		if (!strcmp(cmd, VOICECHAT_KILLINSULT)  || !strcmp(cmd, VOICECHAT_TAUNT) || \
;1231:			!strcmp(cmd, VOICECHAT_DEATHINSULT) || !strcmp(cmd, VOICECHAT_KILLGAUNTLET) || \
;1232:			!strcmp(cmd, VOICECHAT_PRAISE)) {
;1233:			return;
;1234:		}
;1235:	}
;1236:
;1237:	CG_VoiceChatLocal( mode, voiceOnly, clientNum, color, cmd );
;1238:
;1239:#endif
;1240:
;1241:}
LABELV $837
endproc CG_VoiceChat 0 0
proc CG_RemoveChatEscapeChar 16 0
line 1248
;1242:
;1243:/*
;1244:=================
;1245:CG_RemoveChatEscapeChar
;1246:=================
;1247:*/
;1248:static void CG_RemoveChatEscapeChar( char *text ) {
line 1251
;1249:	int i, l;
;1250:
;1251:	l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1252
;1252:	for ( i = 0; text[i]; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $842
JUMPV
LABELV $839
line 1253
;1253:		if (text[i] == '\x19')
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 25
NEI4 $843
line 1254
;1254:			continue;
ADDRGP4 $840
JUMPV
LABELV $843
line 1255
;1255:		text[l++] = text[i];
ADDRLP4 8
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 1256
;1256:	}
LABELV $840
line 1252
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $842
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $839
line 1257
;1257:	text[l] = '\0';
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 1258
;1258:}
LABELV $838
endproc CG_RemoveChatEscapeChar 16 0
proc CG_HandleMiss 4 8
line 1262
;1259:
;1260:
;1261:static void CG_HandleMiss( int clientsMissed )
;1262:{
line 1265
;1263://	int i;
;1264:
;1265:	if (cg_aimType.integer == 2 || cg_aimType.integer == 3)
ADDRGP4 cg_aimType+12
INDIRI4
CNSTI4 2
EQI4 $850
ADDRGP4 cg_aimType+12
INDIRI4
CNSTI4 3
NEI4 $846
LABELV $850
line 1266
;1266:	{
line 1267
;1267:		if (clientsMissed >= 0 && clientsMissed < 32)
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $851
ADDRLP4 0
INDIRI4
CNSTI4 32
GEI4 $851
line 1268
;1268:		{
line 1270
;1269://			cg_entities[clientsMissed].deathTime = 0;
;1270:			trap_S_StartLocalSound( cgs.media.deniedSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+156680+880
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1271
;1271:		}
LABELV $851
line 1272
;1272:	}
LABELV $846
line 1288
;1273:
;1274:
;1275:
;1276://	if (cg_aimType.integer == 3)
;1277://	{
;1278://		for (i=0;i<32;i++)
;1279://		{
;1280://			if ((clientsMissed >> i) & 1)
;1281://			{
;1282:////				cg_entities[i].deathTime = 0;
;1283://			}
;1284://		}
;1285://		trap_S_StartLocalSound( cgs.media.deniedSound, CHAN_ANNOUNCER );
;1286://	}
;1287:	
;1288:}
LABELV $845
endproc CG_HandleMiss 4 8
export CG_HandleVote
proc CG_HandleVote 1036 16
line 1290
;1289:
;1290:void CG_HandleVote(char *cmd) {
line 1292
;1291:	char *token;
;1292:	token = COM_Parse(&cmd);
ADDRFP4 0
ARGP4
ADDRLP4 4
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1296
;1293:
;1294:	//CG_Printf("HandleVote: %s\n", cmd);
;1295:
;1296:	if ( !cgs.voteTime ) { //FIXME: It's possible to get the yes/no totals sent before this
ADDRGP4 cgs+31676
INDIRI4
CNSTI4 0
NEI4 $856
line 1299
;1297:		char msg[MAX_STRING_TOKENS];
;1298://		char *token1;
;1299:		cgs.voteTime = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1032
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31676
ADDRLP4 1032
INDIRI4
ASGNI4
line 1300
;1300:		Q_strncpyz(msg, cmd, sizeof(msg));
ADDRLP4 8
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1302
;1301:		//CG_Printf("DBG: VoteDisplay: %s %s -- %s\n", token, token1, msg);
;1302:		Com_sprintf(cgs.voteString, sizeof(cgs.voteString), "%s", msg);
ADDRGP4 cgs+31688
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1303
;1303:		cgs.voteYes = 1;
ADDRGP4 cgs+31680
CNSTI4 1
ASGNI4
line 1304
;1304:	} else {
ADDRGP4 $857
JUMPV
LABELV $856
line 1305
;1305:		if ( atoi(token) == -1 ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 -1
NEI4 $863
line 1306
;1306:			cgs.voteTime = 0;
ADDRGP4 cgs+31676
CNSTI4 0
ASGNI4
line 1307
;1307:			cgs.voteYes = 0;
ADDRGP4 cgs+31680
CNSTI4 0
ASGNI4
line 1308
;1308:			cgs.voteNo = 0;
ADDRGP4 cgs+31684
CNSTI4 0
ASGNI4
line 1309
;1309:			memset(cgs.voteString, 0, sizeof(cgs.voteString));
ADDRGP4 cgs+31688
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1024
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1310
;1310:		} else {
ADDRGP4 $864
JUMPV
LABELV $863
line 1311
;1311:			trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+156680+804
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1312
;1312:			cgs.voteYes = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31680
ADDRLP4 12
INDIRI4
ASGNI4
line 1313
;1313:			cgs.voteNo = atoi( cmd );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31684
ADDRLP4 16
INDIRI4
ASGNI4
line 1314
;1314:		}
LABELV $864
line 1315
;1315:	}
LABELV $857
line 1317
;1316:	//CG_Printf("DBG: VoteDisplay: %s %i %i %i\n", cgs.voteString, cgs.voteTime, cgs.voteYes, cgs.voteNo);
;1317:}
LABELV $855
endproc CG_HandleVote 1036 16
export CG_HandleTeamVote
proc CG_HandleTeamVote 1048 16
line 1319
;1318:
;1319:void CG_HandleTeamVote(char *cmd) {
line 1322
;1320:	int team;
;1321:	char *token;
;1322:	token = COM_Parse(&cmd);
ADDRFP4 0
ARGP4
ADDRLP4 8
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 1323
;1323:	team = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 1325
;1324:
;1325:	token = COM_Parse(&cmd);
ADDRFP4 0
ARGP4
ADDRLP4 16
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 1326
;1326:	if ( !cgs.teamVoteTime[team] ) { //FIXME: It's possible to get the yes/no totals sent before this
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32712
ADDP4
INDIRI4
CNSTI4 0
NEI4 $875
line 1328
;1327:		char msg[MAX_STRING_TOKENS];
;1328:		cgs.teamVoteTime[team] = atoi( token );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 1044
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32712
ADDP4
ADDRLP4 1044
INDIRI4
ASGNI4
line 1329
;1329:		Q_strncpyz(msg, cmd, sizeof(msg));
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1330
;1330:		Com_sprintf(cgs.teamVoteString[team], sizeof(cgs.teamVoteString[team]), "%s", msg);
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+32736
ADDP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $700
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1331
;1331:		cgs.teamVoteYes[team] = 1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32720
ADDP4
CNSTI4 1
ASGNI4
line 1332
;1332:	} else {
ADDRGP4 $876
JUMPV
LABELV $875
line 1333
;1333:		if ( atoi(token) == -1 ) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 -1
NEI4 $882
line 1335
;1334:			//CG_Printf("DBG: team: %i\n", team);
;1335:			cgs.teamVoteTime[team] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32712
ADDP4
CNSTI4 0
ASGNI4
line 1336
;1336:			cgs.teamVoteYes[team] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32720
ADDP4
CNSTI4 0
ASGNI4
line 1337
;1337:			cgs.teamVoteNo[team] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32728
ADDP4
CNSTI4 0
ASGNI4
line 1338
;1338:			memset(cgs.teamVoteString[team], 0, sizeof(cgs.teamVoteString[team]));
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+32736
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1024
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1339
;1339:		} else {
ADDRGP4 $883
JUMPV
LABELV $882
line 1340
;1340:			trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+156680+804
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1341
;1341:			cgs.teamVoteYes[team] = atoi( token );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32720
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1342
;1342:			cgs.teamVoteNo[team] = atoi( cmd );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32728
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 1343
;1343:		}
LABELV $883
line 1344
;1344:	}
LABELV $876
line 1345
;1345:}
LABELV $874
endproc CG_HandleTeamVote 1048 16
export CG_DisplayVoteCmds
proc CG_DisplayVoteCmds 16 8
line 1347
;1346:
;1347:void CG_DisplayVoteCmds ( char *string ) {
line 1349
;1348:	char *token;
;1349:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1351
;1350:
;1351:	CG_Printf(""S_COLOR_CYAN"Vote commands are:\n\n");
ADDRGP4 $894
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1353
;1352:
;1353:	token = COM_Parse(&string);
ADDRFP4 0
ARGP4
ADDRLP4 8
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
ADDRGP4 $896
JUMPV
LABELV $895
line 1354
;1354:	while ( token[0] ) {
line 1355
;1355:		if ( i == 2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $898
line 1356
;1356:			CG_Printf(""S_COLOR_CYAN"%s\n", token);
ADDRGP4 $900
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1357
;1357:		} else {
ADDRGP4 $899
JUMPV
LABELV $898
line 1358
;1358:			CG_Printf(""S_COLOR_CYAN"%24s", token);
ADDRGP4 $901
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1359
;1359:		}
LABELV $899
line 1360
;1360:		token = COM_Parse(&string);
ADDRFP4 0
ARGP4
ADDRLP4 12
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ASGNP4
line 1361
;1361:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1362
;1362:		if ( i == 3 ) {
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $902
line 1363
;1363:			i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1365
;1364:			//CG_Printf("\n");
;1365:		}
LABELV $902
line 1366
;1366:	}
LABELV $896
line 1354
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $895
line 1367
;1367:	CG_Printf("\n");
ADDRGP4 $904
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1368
;1368:}
LABELV $893
endproc CG_DisplayVoteCmds 16 8
proc CG_motd 32 8
line 1370
;1369:
;1370:static void CG_motd( void ) {
line 1373
;1371://	int		i;
;1372:
;1373:	strcpy(cg.sv_motd1, CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+162116
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1374
;1374:	strcpy(cg.sv_motd2, CG_Argv( 2 ) );
CNSTI4 2
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+163140
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1375
;1375:	strcpy(cg.sv_motd3, CG_Argv( 3 ) );
CNSTI4 3
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+164164
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1376
;1376:	strcpy(cg.sv_motd4, CG_Argv( 4 ) );
CNSTI4 4
ARGI4
ADDRLP4 12
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+165188
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1377
;1377:	strcpy(cg.sv_motd5, CG_Argv( 5 ) );
CNSTI4 5
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+166212
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1378
;1378:	strcpy(cg.sv_motd6, CG_Argv( 6 ) );
CNSTI4 6
ARGI4
ADDRLP4 20
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+167236
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1379
;1379:	strcpy(cg.sv_motd7, CG_Argv( 7 ) );
CNSTI4 7
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+168260
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1380
;1380:	strcpy(cg.sv_motd8, CG_Argv( 8 ) );
CNSTI4 8
ARGI4
ADDRLP4 28
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 cg+169284
ARGP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1382
;1381:
;1382:	cg.motdScrollTime = cg.time + 1000;
ADDRGP4 cg+170308
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1383
;1383:	cg.motdDisplayTime = cg.time + (cg_motdDisplayTime.integer * 1000);
ADDRGP4 cg+170312
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDRGP4 cg_motdDisplayTime+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1384
;1384:}
LABELV $905
endproc CG_motd 32 8
export CG_HandleReady
proc CG_HandleReady 12 12
line 1386
;1385:
;1386:void CG_HandleReady( int clientNum, qboolean readyState ) {
line 1387
;1387:	CG_Printf("%s" S_COLOR_WHITE " is%s ready.\n", cgs.clientinfo[clientNum].name, readyState?(""):(" not"));
ADDRGP4 $920
ARGP4
CNSTI4 1776
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40960+4
ADDP4
ARGP4
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $926
ADDRLP4 0
ADDRGP4 $923
ASGNP4
ADDRGP4 $927
JUMPV
LABELV $926
ADDRLP4 0
ADDRGP4 $924
ASGNP4
LABELV $927
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1388
;1388:	CG_CenterPrint(va("%s" S_COLOR_WHITE " is%s ready.\n", cgs.clientinfo[clientNum].name, readyState?(""):(" not")),
ADDRGP4 $920
ARGP4
CNSTI4 1776
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+40960+4
ADDP4
ARGP4
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $931
ADDRLP4 4
ADDRGP4 $923
ASGNP4
ADDRGP4 $932
JUMPV
LABELV $931
ADDRLP4 4
ADDRGP4 $924
ASGNP4
LABELV $932
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1390
;1389:		SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH);
;1390:}
LABELV $919
endproc CG_HandleReady 12 12
data
export smsg
align 1
LABELV smsg
byte 1 0
skip 47
code
proc CG_ServerCommand 1380 12
line 1403
;1391:
;1392:	
;1393:	char	smsg[48] = {0};
;1394:
;1395:/*
;1396:=================
;1397:CG_ServerCommand
;1398:
;1399:The string has been tokenized and can be retrieved with
;1400:Cmd_Argc() / Cmd_Argv()
;1401:=================
;1402:*/
;1403:static void CG_ServerCommand( void ) {
line 1406
;1404:	const char	*cmd;
;1405:	char		text[MAX_SAY_TEXT];
;1406:	cmd = CG_Argv(0);
CNSTI4 0
ARGI4
ADDRLP4 260
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 260
INDIRP4
ASGNP4
line 1408
;1407:
;1408:	if ( !cmd[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $934
line 1410
;1409:		// server claimed the command
;1410:		return;
ADDRGP4 $933
JUMPV
LABELV $934
line 1413
;1411:	}
;1412:
;1413:	if ( !strcmp( cmd, "motd" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $938
ARGP4
ADDRLP4 264
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 264
INDIRI4
CNSTI4 0
NEI4 $936
line 1414
;1414:		CG_motd();
ADDRGP4 CG_motd
CALLV
pop
line 1415
;1415:		return;
ADDRGP4 $933
JUMPV
LABELV $936
line 1418
;1416:	}
;1417:
;1418:	if ( !strcmp( cmd, "miss" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $941
ARGP4
ADDRLP4 268
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 268
INDIRI4
CNSTI4 0
NEI4 $939
line 1419
;1419:		CG_HandleMiss( atoi(CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 272
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 276
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 276
INDIRI4
ARGI4
ADDRGP4 CG_HandleMiss
CALLV
pop
line 1420
;1420:		return;
ADDRGP4 $933
JUMPV
LABELV $939
line 1423
;1421:	}
;1422:
;1423:	if ( !strcmp( cmd, "cp" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $944
ARGP4
ADDRLP4 272
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 0
NEI4 $942
line 1424
;1424:		CG_CenterPrint( CG_Argv(1), SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH );
CNSTI4 1
ARGI4
ADDRLP4 276
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 276
INDIRP4
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1425
;1425:		return;
ADDRGP4 $933
JUMPV
LABELV $942
line 1428
;1426:	}
;1427:
;1428:	if ( !strcmp( cmd, "cs" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $947
ARGP4
ADDRLP4 276
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 276
INDIRI4
CNSTI4 0
NEI4 $945
line 1429
;1429:		CG_ConfigStringModified();
ADDRGP4 CG_ConfigStringModified
CALLV
pop
line 1430
;1430:		return;
ADDRGP4 $933
JUMPV
LABELV $945
line 1433
;1431:	}
;1432:
;1433:	if ( !strcmp( cmd, "print" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $950
ARGP4
ADDRLP4 280
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $948
line 1434
;1434:		CG_Printf( "%s", CG_Argv(1) );
CNSTI4 1
ARGI4
ADDRLP4 284
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $700
ARGP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1444
;1435:#ifdef MISSIONPACK
;1436:		cmd = CG_Argv(1);			// yes, this is obviously a hack, but so is the way we hear about
;1437:									// votes passing or failing
;1438:		if ( !Q_stricmpn( cmd, "vote failed", 11 ) || !Q_stricmpn( cmd, "team vote failed", 16 )) {
;1439:			trap_S_StartLocalSound( cgs.media.voteFailed, CHAN_ANNOUNCER );
;1440:		} else if ( !Q_stricmpn( cmd, "vote passed", 11 ) || !Q_stricmpn( cmd, "team vote passed", 16 ) ) {
;1441:			trap_S_StartLocalSound( cgs.media.votePassed, CHAN_ANNOUNCER );
;1442:		}
;1443:#endif
;1444:		return;
ADDRGP4 $933
JUMPV
LABELV $948
line 1447
;1445:	}
;1446:
;1447:	if ( !strcmp( cmd, "chat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $953
ARGP4
ADDRLP4 284
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 0
NEI4 $951
line 1448
;1448:		if ( ((cg_teamChatsOnly.integer == 0) || (cg.intermissionStarted && cg_teamChatsOnly.integer == 2)) ) {
ADDRLP4 288
CNSTI4 0
ASGNI4
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
ADDRLP4 288
INDIRI4
EQI4 $959
ADDRGP4 cg+24
INDIRI4
ADDRLP4 288
INDIRI4
EQI4 $933
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 2
NEI4 $933
LABELV $959
line 1449
;1449:			if ( !cg_nochatbeep.integer ) {
ADDRGP4 cg_nochatbeep+12
INDIRI4
CNSTI4 0
NEI4 $960
line 1450
;1450:				trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+156680+804
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1451
;1451:			}
LABELV $960
line 1452
;1452:			Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 292
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 292
INDIRP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1453
;1453:			CG_RemoveChatEscapeChar( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1454
;1454:			CG_Printf( "%s \n", text );
ADDRGP4 $965
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1456
;1455:
;1456:			if ( hud_count && strlen(ch_file.string) ) {
ADDRGP4 hud_count
INDIRI4
CNSTI4 0
EQI4 $933
ADDRGP4 ch_file+16
ARGP4
ADDRLP4 296
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
EQI4 $933
line 1459
;1457:				int i;
;1458:				//Clear message 8 is exists
;1459:				if (chat[MAX_CHATS-1].time) {
ADDRGP4 chat+1820+256
INDIRI4
CNSTI4 0
EQI4 $969
line 1460
;1460:					chat[MAX_CHATS-1].time = 0;
ADDRGP4 chat+1820+256
CNSTI4 0
ASGNI4
line 1461
;1461:					memset(chat[MAX_CHATS-1].msg, 0, sizeof(chat[MAX_CHATS-1].msg) );
ADDRGP4 chat+1820
ARGP4
CNSTI4 0
ARGI4
CNSTI4 256
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1462
;1462:				}
LABELV $969
line 1465
;1463:
;1464:				//Move existing messages
;1465:				for ( i = (MAX_CHATS - 2); i != -1; i-- ) {
ADDRLP4 300
CNSTI4 6
ASGNI4
LABELV $977
line 1466
;1466:					if ( chat[i].time ) {
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ADDRGP4 chat+256
ADDP4
INDIRI4
CNSTI4 0
EQI4 $981
line 1468
;1467:						//Move info
;1468:						Q_strncpyz(chat[i+1].msg, chat[i].msg, MAX_SAY_TEXT);
ADDRLP4 304
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ASGNI4
ADDRLP4 304
INDIRI4
ADDRGP4 chat+260
ADDP4
ARGP4
ADDRLP4 304
INDIRI4
ADDRGP4 chat
ADDP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1470
;1469:						//memcpy(chat[i+1].msg, chat[i].msg, sizeof(chat[i+1].msg) );
;1470:						chat[i+1].time = chat[i].time;
ADDRLP4 308
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ASGNI4
ADDRLP4 308
INDIRI4
ADDRGP4 chat+260+256
ADDP4
ADDRLP4 308
INDIRI4
ADDRGP4 chat+256
ADDP4
INDIRI4
ASGNI4
line 1474
;1471:						//CG_Printf("ShiftFrom:%i:%i:%s\n", i, chat[i].time, chat[i].msg);
;1472:						//CG_Printf("ShiftTo:%i:%i:%s\n", i+1, chat[i+1].time, chat[i+1].msg);
;1473:						//Clear old info.
;1474:						chat[i].time = 0;
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ADDRGP4 chat+256
ADDP4
CNSTI4 0
ASGNI4
line 1475
;1475:						memset(chat[i].msg, 0, sizeof(chat[i].msg) );
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ADDRGP4 chat
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 256
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1476
;1476:					}
LABELV $981
line 1477
;1477:				}
LABELV $978
line 1465
ADDRLP4 300
ADDRLP4 300
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 300
INDIRI4
CNSTI4 -1
NEI4 $977
line 1480
;1478:
;1479:				//Assign the new message
;1480:				Q_strncpyz(chat[0].msg, text, MAX_SAY_TEXT);
ADDRGP4 chat
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1481
;1481:				chat[0].time = cg.time;
ADDRGP4 chat+256
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1483
;1482:				//chat_count++;
;1483:			}
line 1484
;1484:		}
line 1485
;1485:		return;
ADDRGP4 $933
JUMPV
LABELV $951
line 1488
;1486:	}
;1487:
;1488:	if ( !strcmp( cmd, "tchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $993
ARGP4
ADDRLP4 288
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 288
INDIRI4
CNSTI4 0
NEI4 $991
line 1489
;1489:		if ( !cg_noteamchatbeep.integer) {
ADDRGP4 cg_noteamchatbeep+12
INDIRI4
CNSTI4 0
NEI4 $994
line 1490
;1490:			trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+156680+804
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1491
;1491:		}
LABELV $994
line 1492
;1492:		Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 292
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 292
INDIRP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1493
;1493:		CG_RemoveChatEscapeChar( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1494
;1494:		CG_AddToTeamChat( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 1495
;1495:		CG_Printf( "%s \n", text );
ADDRGP4 $965
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1497
;1496:		
;1497:		if ( hud_count && strlen(ch_file.string) ) {
ADDRGP4 hud_count
INDIRI4
CNSTI4 0
EQI4 $933
ADDRGP4 ch_file+16
ARGP4
ADDRLP4 296
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
EQI4 $933
line 1500
;1498:				int i;
;1499:				//Clear message 8 is exists
;1500:				if (chat[MAX_CHATS-1].time) {
ADDRGP4 chat+1820+256
INDIRI4
CNSTI4 0
EQI4 $1002
line 1501
;1501:					chat[MAX_CHATS-1].time = 0;
ADDRGP4 chat+1820+256
CNSTI4 0
ASGNI4
line 1502
;1502:					memset(chat[MAX_CHATS-1].msg, 0, sizeof(chat[MAX_CHATS-1].msg) );
ADDRGP4 chat+1820
ARGP4
CNSTI4 0
ARGI4
CNSTI4 256
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1503
;1503:				}
LABELV $1002
line 1506
;1504:
;1505:				//Move existing messages
;1506:				for ( i = (MAX_CHATS - 2); i != -1; i-- ) {
ADDRLP4 300
CNSTI4 6
ASGNI4
LABELV $1010
line 1507
;1507:					if ( chat[i].time ) {
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ADDRGP4 chat+256
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1014
line 1509
;1508:						//Move info
;1509:						Q_strncpyz(chat[i+1].msg, chat[i].msg, MAX_SAY_TEXT);
ADDRLP4 304
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ASGNI4
ADDRLP4 304
INDIRI4
ADDRGP4 chat+260
ADDP4
ARGP4
ADDRLP4 304
INDIRI4
ADDRGP4 chat
ADDP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1511
;1510:						//memcpy(chat[i+1].msg, chat[i].msg, sizeof(chat[i+1].msg) );
;1511:						chat[i+1].time = chat[i].time;
ADDRLP4 308
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ASGNI4
ADDRLP4 308
INDIRI4
ADDRGP4 chat+260+256
ADDP4
ADDRLP4 308
INDIRI4
ADDRGP4 chat+256
ADDP4
INDIRI4
ASGNI4
line 1515
;1512:						//CG_Printf("ShiftFrom:%i:%i:%s\n", i, chat[i].time, chat[i].msg);
;1513:						//CG_Printf("ShiftTo:%i:%i:%s\n", i+1, chat[i+1].time, chat[i+1].msg);
;1514:						//Clear old info.
;1515:						chat[i].time = 0;
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ADDRGP4 chat+256
ADDP4
CNSTI4 0
ASGNI4
line 1516
;1516:						memset(chat[i].msg, 0, sizeof(chat[i].msg) );
CNSTI4 260
ADDRLP4 300
INDIRI4
MULI4
ADDRGP4 chat
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 256
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1517
;1517:					}
LABELV $1014
line 1518
;1518:				}
LABELV $1011
line 1506
ADDRLP4 300
ADDRLP4 300
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 300
INDIRI4
CNSTI4 -1
NEI4 $1010
line 1521
;1519:
;1520:				//Assign the new message
;1521:				Q_strncpyz(chat[0].msg, text, MAX_SAY_TEXT);
ADDRGP4 chat
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1522
;1522:				chat[0].time = cg.time;
ADDRGP4 chat+256
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1524
;1523:				//chat_count++;
;1524:			}
line 1525
;1525:		return;
ADDRGP4 $933
JUMPV
LABELV $991
line 1527
;1526:	}
;1527:	if ( !strcmp( cmd, "vchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1026
ARGP4
ADDRLP4 292
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 292
INDIRI4
CNSTI4 0
NEI4 $1024
line 1528
;1528:		CG_VoiceChat( SAY_ALL );
CNSTI4 0
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1529
;1529:		return;
ADDRGP4 $933
JUMPV
LABELV $1024
line 1532
;1530:	}
;1531:
;1532:	if ( !strcmp( cmd, "vtchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1029
ARGP4
ADDRLP4 296
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
NEI4 $1027
line 1533
;1533:		CG_VoiceChat( SAY_TEAM );
CNSTI4 1
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1534
;1534:		return;
ADDRGP4 $933
JUMPV
LABELV $1027
line 1537
;1535:	}
;1536:
;1537:	if ( !strcmp( cmd, "vtell" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1032
ARGP4
ADDRLP4 300
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 300
INDIRI4
CNSTI4 0
NEI4 $1030
line 1538
;1538:		CG_VoiceChat( SAY_TELL );
CNSTI4 2
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1539
;1539:		return;
ADDRGP4 $933
JUMPV
LABELV $1030
line 1542
;1540:	}
;1541:
;1542:	if ( !strcmp( cmd, "s1s" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1035
ARGP4
ADDRLP4 304
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 304
INDIRI4
CNSTI4 0
NEI4 $1033
line 1543
;1543:		CG_NewParseScores((char *)cmd);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_NewParseScores
CALLV
pop
line 1544
;1544:		return;
ADDRGP4 $933
JUMPV
LABELV $1033
line 1547
;1545:	}
;1546:
;1547:	if ( !strcmp( cmd, "scores" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1038
ARGP4
ADDRLP4 308
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 308
INDIRI4
CNSTI4 0
NEI4 $1036
line 1548
;1548:		CG_ParseScores();
ADDRGP4 CG_ParseScores
CALLV
pop
line 1549
;1549:		return;
ADDRGP4 $933
JUMPV
LABELV $1036
line 1552
;1550:	}
;1551:
;1552:	if ( !strcmp( cmd, "updcvar" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1041
ARGP4
ADDRLP4 312
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 312
INDIRI4
CNSTI4 0
NEI4 $1039
line 1553
;1553:		CG_UpdCvar();
ADDRGP4 CG_UpdCvar
CALLV
pop
line 1554
;1554:		return;
ADDRGP4 $933
JUMPV
LABELV $1039
line 1557
;1555:	}
;1556:
;1557:	if ( !strcmp( cmd, "connUCv" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1044
ARGP4
ADDRLP4 316
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 316
INDIRI4
CNSTI4 0
NEI4 $1042
line 1558
;1558:		CG_ConnUCv();
ADDRGP4 CG_ConnUCv
CALLV
pop
line 1559
;1559:			return;
ADDRGP4 $933
JUMPV
LABELV $1042
line 1562
;1560:	}
;1561:
;1562:	if ( !strcmp( cmd, "tinfo" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1047
ARGP4
ADDRLP4 320
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 320
INDIRI4
CNSTI4 0
NEI4 $1045
line 1563
;1563:		CG_ParseTeamInfo();
ADDRGP4 CG_ParseTeamInfo
CALLV
pop
line 1564
;1564:		return;
ADDRGP4 $933
JUMPV
LABELV $1045
line 1567
;1565:	}
;1566:
;1567:	if ( !strcmp( cmd, "map_restart" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1050
ARGP4
ADDRLP4 324
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 324
INDIRI4
CNSTI4 0
NEI4 $1048
line 1568
;1568:		CG_MapRestart();
ADDRGP4 CG_MapRestart
CALLV
pop
line 1569
;1569:		return;
ADDRGP4 $933
JUMPV
LABELV $1048
line 1572
;1570:	}
;1571:
;1572:  if ( Q_stricmp (cmd, "remapShader") == 0 ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1053
ARGP4
ADDRLP4 328
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 328
INDIRI4
CNSTI4 0
NEI4 $1051
line 1573
;1573:		if (trap_Argc() == 4) {
ADDRLP4 332
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 332
INDIRI4
CNSTI4 4
NEI4 $1054
line 1574
;1574:			trap_R_RemapShader(CG_Argv(1), CG_Argv(2), CG_Argv(3));
CNSTI4 1
ARGI4
ADDRLP4 336
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 2
ARGI4
ADDRLP4 340
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 3
ARGI4
ADDRLP4 344
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 336
INDIRP4
ARGP4
ADDRLP4 340
INDIRP4
ARGP4
ADDRLP4 344
INDIRP4
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 1575
;1575:		}
LABELV $1054
line 1576
;1576:	}
LABELV $1051
line 1579
;1577:
;1578:	// loaddeferred can be both a servercmd and a consolecmd
;1579:	if ( !strcmp( cmd, "loaddefered" ) ) {	// FIXME: spelled wrong, but not changing for demo
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1058
ARGP4
ADDRLP4 332
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 332
INDIRI4
CNSTI4 0
NEI4 $1056
line 1580
;1580:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 1581
;1581:		return;
ADDRGP4 $933
JUMPV
LABELV $1056
line 1586
;1582:	}
;1583:
;1584:	// clientLevelShot is sent before taking a special screenshot for
;1585:	// the menu system during development
;1586:	if ( !strcmp( cmd, "clientLevelShot" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1061
ARGP4
ADDRLP4 336
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 336
INDIRI4
CNSTI4 0
NEI4 $1059
line 1587
;1587:		cg.levelShot = qtrue;
ADDRGP4 cg+12
CNSTI4 1
ASGNI4
line 1588
;1588:		return;
ADDRGP4 $933
JUMPV
LABELV $1059
line 1592
;1589:	}
;1590:
;1591:	//vote commands
;1592:	if ( !strcmp( cmd, "vtc" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1065
ARGP4
ADDRLP4 340
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 340
INDIRI4
CNSTI4 0
NEI4 $1063
line 1594
;1593:		char	cmdlist[MAX_STRING_TOKENS];
;1594:		Q_strncpyz( cmdlist, CG_Argv(1), MAX_STRING_TOKENS );
CNSTI4 1
ARGI4
ADDRLP4 1368
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 344
ARGP4
ADDRLP4 1368
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1596
;1595:		//CG_Printf("%s", cmdlist);
;1596:		CG_DisplayVoteCmds(cmdlist);
ADDRLP4 344
ARGP4
ADDRGP4 CG_DisplayVoteCmds
CALLV
pop
line 1597
;1597:		return;
ADDRGP4 $933
JUMPV
LABELV $1063
line 1600
;1598:	}
;1599:	//vote
;1600:	if ( !strcmp( cmd, "vt" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1068
ARGP4
ADDRLP4 344
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 344
INDIRI4
CNSTI4 0
NEI4 $1066
line 1602
;1601:		char	cmdlist[MAX_STRING_TOKENS];
;1602:		Q_strncpyz( cmdlist, CG_Argv(1), MAX_STRING_TOKENS );
CNSTI4 1
ARGI4
ADDRLP4 1372
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 348
ARGP4
ADDRLP4 1372
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1603
;1603:		CG_HandleVote(cmdlist);
ADDRLP4 348
ARGP4
ADDRGP4 CG_HandleVote
CALLV
pop
line 1604
;1604:		return;
ADDRGP4 $933
JUMPV
LABELV $1066
line 1607
;1605:	}
;1606:	//teamvote
;1607:	if ( !strcmp( cmd, "tv" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1071
ARGP4
ADDRLP4 348
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 348
INDIRI4
CNSTI4 0
NEI4 $1069
line 1609
;1608:		char	cmdlist[MAX_STRING_TOKENS];
;1609:		Q_strncpyz( cmdlist, CG_Argv(1), MAX_STRING_TOKENS );
CNSTI4 1
ARGI4
ADDRLP4 1376
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 352
ARGP4
ADDRLP4 1376
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1611
;1610:		//CG_Printf("DBG: %s\n", cmdlist);
;1611:		CG_HandleTeamVote( cmdlist );
ADDRLP4 352
ARGP4
ADDRGP4 CG_HandleTeamVote
CALLV
pop
line 1612
;1612:		return;
ADDRGP4 $933
JUMPV
LABELV $1069
line 1615
;1613:	}
;1614:	//ready
;1615:	if ( !strcmp( cmd, "rd" )) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1074
ARGP4
ADDRLP4 352
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 352
INDIRI4
CNSTI4 0
NEI4 $1072
line 1616
;1616:		CG_HandleReady( atoi(CG_Argv(1)), qtrue );
CNSTI4 1
ARGI4
ADDRLP4 356
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 356
INDIRP4
ARGP4
ADDRLP4 360
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 360
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_HandleReady
CALLV
pop
line 1617
;1617:		return;
ADDRGP4 $933
JUMPV
LABELV $1072
line 1621
;1618:	}
;1619:
;1620:	//ready
;1621:	if ( !strcmp( cmd, "nrd" )) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1077
ARGP4
ADDRLP4 356
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 356
INDIRI4
CNSTI4 0
NEI4 $1075
line 1622
;1622:		CG_HandleReady( atoi(CG_Argv(1)), qfalse );
CNSTI4 1
ARGI4
ADDRLP4 360
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 360
INDIRP4
ARGP4
ADDRLP4 364
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 364
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_HandleReady
CALLV
pop
line 1623
;1623:		return;
ADDRGP4 $933
JUMPV
LABELV $1075
line 1626
;1624:	}
;1625:
;1626:	if ( !strcmp( cmd, "play" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1080
ARGP4
ADDRLP4 360
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 360
INDIRI4
CNSTI4 0
NEI4 $1078
line 1627
;1627:		trap_SendConsoleCommand(va("play %s \n", CG_Argv(1)));
CNSTI4 1
ARGI4
ADDRLP4 364
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $1081
ARGP4
ADDRLP4 364
INDIRP4
ARGP4
ADDRLP4 368
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 368
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1628
;1628:		return;
ADDRGP4 $933
JUMPV
LABELV $1078
line 1631
;1629:	}
;1630:
;1631:	CG_Printf( "Unknown client game command: %s\n", cmd );
ADDRGP4 $1082
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1632
;1632:}
LABELV $933
endproc CG_ServerCommand 1380 12
export CG_ExecuteNewServerCommands
proc CG_ExecuteNewServerCommands 12 4
line 1643
;1633:
;1634:
;1635:/*
;1636:====================
;1637:CG_ExecuteNewServerCommands
;1638:
;1639:Execute all of the server commands that were received along
;1640:with this this snapshot.
;1641:====================
;1642:*/
;1643:void CG_ExecuteNewServerCommands( int latestSequence ) {
ADDRGP4 $1085
JUMPV
LABELV $1084
line 1644
;1644:	while ( cgs.serverCommandSequence < latestSequence ) {
line 1645
;1645:		if ( trap_GetServerCommand( ++cgs.serverCommandSequence ) ) {
ADDRLP4 0
ADDRGP4 cgs+31444
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 trap_GetServerCommand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1088
line 1646
;1646:			CG_ServerCommand();
ADDRGP4 CG_ServerCommand
CALLV
pop
line 1647
;1647:		}
LABELV $1088
line 1648
;1648:	}
LABELV $1085
line 1644
ADDRGP4 cgs+31444
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $1084
line 1649
;1649:}
LABELV $1083
endproc CG_ExecuteNewServerCommands 12 4
bss
export voiceChatBuffer
align 4
LABELV voiceChatBuffer
skip 16768
export headModelVoiceChat
align 4
LABELV headModelVoiceChat
skip 4352
export voiceChatLists
align 4
LABELV voiceChatLists
skip 2263616
import cpm_lavafrequency
import cpm_slimedamage
import cpm_lavadamage
import cpm_itemsize
import cpm_hittones
import cpm_startpowerups
import cpm_itemrespawnammo
import cpm_itemrespawnBS
import cpm_itemrespawnpowerup
import cpm_itemrespawnhealth
import cpm_knockback_z
import cpm_respawnhealth
import cpm_BSprotection
import CPM_CanGrabArmor
import cpm_armorsystem
import cpm_outofammodelay
import cpm_weaponraise
import cpm_weapondrop
import cpm_RGchange
import cpm_RGbox
import cpm_RGmaxammo
import cpm_LGmaxammo
import cpm_LGknockback
import cpm_RLmaxammo
import cpm_RLspeed
import cpm_GLmaxammo
import cpm_GLreload
import CPM_CanGrabAmmo
import cpm_SSGmaxammo
import cpm_SSGknockback
import cpm_SSGdmg
import cpm_MGweapon
import cpm_MGdmg_tp
import cpm_MGdmg
import cpm_MGbox
import cpm_Gauntletknockback
import CPM_PM_Aircontrol
import pm_friction
import pm_accelerate
import cpm_pm_wishspeed
import cpm_pm_strafeaccelerate
import cpm_pm_aircontrol
import cpm_pm_airstopaccelerate
import cpm_pm_jump_z
import CPM_UpdateSettings
import trap_Trace
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_RealTime
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_Args
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_AddGib
import Q_Isfreeze
import CG_BodyObituary
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawNewScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireGrapple
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_ParseColors
import isEnemy
import isTeammate
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_DrawOBs
import CG_ExtractToken
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import CG_DrawHud2D
import CG_ScanForCrosshairEntity
import CG_DrawTeamInfo
import CG_DrawSnapshot
import CG_DrawScoreboard
import CG_DrawReward
import CG_DrawKeyPress
import CG_DrawIntermission
import CG_DrawHoldableItem
import CG_DrawDisconnect
import CG_DrawCrosshair
import CG_DrawClock
import CG_DrawCenterString
import CG_Alarm
import CG_FigureHUDColor
import DrawMOTDBox
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeFromColorTo
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_AddBoundingBox
import CG_PredictWeaponEffects
import CG_GetFadeTime
import cg_itemFX
import cg_lightningImpact
import cg_smokeGrowth_RL
import cg_smokeGrowth_GL
import cg_smokeRadius_RL
import cg_smokeRadius_GL
import cg_smoke_SG
import cg_damageDraw
import cg_fallKick
import cg_fontFade
import cg_debugModels
import cg_blueName
import cg_redName
import ch_shadowOffset
import cg_oldScoreboard
import cg_crosshairPulse
import cg_autoRecord
import cg_autoScreenshot
import s_ambient
import s_announcer
import cg_noteamchatbeep
import cg_nochatbeep
import cg_railHum
import cg_fixedTeleporterAngles
import cg_fastRespawn_override
import cg_muzzleFlash
import cg_drawDeathMessage
import cg_aimNudge
import cg_aimType
import cg_fullWeaponCycle
import cl_timeNudge
import sex
import ch_viewKeyPress
import ch_weaponSideBar
import ch_OBDetector
import ch_Speedometer
import ch_file
import language
import cg_motdDisplayTime
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_drawBBox
import cg_debugDelag
import cg_delag
import cl_guid
import cl_maxpackets
import snaps
import com_maxfps
import cl_packetdup
import rate
import color2
import color1
import colors
import r_vertexLight
import cg_deadBodyDarken
import cg_adjustTeamColors
import cg_TeamColors
import cg_EnemyColors
import cg_forceColors
import cg_teamModel
import cg_enemyModel
import g_allowHandicap
import g_pro_mode
import g_delagHitscan
import g_gamemode
import g_allowReady
import g_fastSwitch
import g_interference
import g_DynamicGauntletCycle
import weap_bfgCycle
import weap_plasmagunCycle
import weap_railgunCycle
import weap_rocketlauncherCycle
import weap_lightninggunCycle
import weap_grenadelauncherCycle
import weap_shotgunCycle
import weap_machinegunCycle
import weap_gauntletCycle
import weap_enableHook
import cg_enableBreath
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_railStyle
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_pmove_fixed
import sv_lock_pmove
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairColor
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawClock
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import chat
import autoFile
import max_speed
import hud_count
import hud
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import lagometer
import forceModelModificationCount
import BG_ProModePlayerTouchesItem
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import trap_FS_FOpenFile
import CG_FileExists
import findCharacter
import FixedName
import SanitizeString
import ConcatArgs
import trap_Argv
import trap_Argc
import Q_CopyStringUntil
import Q_CleanString
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import stristr
import HelpParse
import GetToken
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import SnapVectorTowards
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import ColorIndex
import color_z
import color_y
import color_x
import color_w
import color_v
import color_u
import color_t
import color_s
import color_r
import color_q
import color_p
import color_o
import color_n
import color_m
import color_l
import color_k
import color_j
import color_i
import color_h
import color_g
import color_f
import color_e
import color_d
import color_c
import color_b
import color_a
import colorMdGrey
import colorOrange
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1082
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1081
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $1080
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 0
align 1
LABELV $1077
byte 1 110
byte 1 114
byte 1 100
byte 1 0
align 1
LABELV $1074
byte 1 114
byte 1 100
byte 1 0
align 1
LABELV $1071
byte 1 116
byte 1 118
byte 1 0
align 1
LABELV $1068
byte 1 118
byte 1 116
byte 1 0
align 1
LABELV $1065
byte 1 118
byte 1 116
byte 1 99
byte 1 0
align 1
LABELV $1061
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $1058
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $1053
byte 1 114
byte 1 101
byte 1 109
byte 1 97
byte 1 112
byte 1 83
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1050
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $1047
byte 1 116
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 0
align 1
LABELV $1044
byte 1 99
byte 1 111
byte 1 110
byte 1 110
byte 1 85
byte 1 67
byte 1 118
byte 1 0
align 1
LABELV $1041
byte 1 117
byte 1 112
byte 1 100
byte 1 99
byte 1 118
byte 1 97
byte 1 114
byte 1 0
align 1
LABELV $1038
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $1035
byte 1 115
byte 1 49
byte 1 115
byte 1 0
align 1
LABELV $1032
byte 1 118
byte 1 116
byte 1 101
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $1029
byte 1 118
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $1026
byte 1 118
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $993
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $965
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $953
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $950
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $947
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $944
byte 1 99
byte 1 112
byte 1 0
align 1
LABELV $941
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 0
align 1
LABELV $938
byte 1 109
byte 1 111
byte 1 116
byte 1 100
byte 1 0
align 1
LABELV $924
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $923
byte 1 0
align 1
LABELV $920
byte 1 37
byte 1 115
byte 1 94
byte 1 55
byte 1 32
byte 1 105
byte 1 115
byte 1 37
byte 1 115
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $904
byte 1 10
byte 1 0
align 1
LABELV $901
byte 1 94
byte 1 53
byte 1 37
byte 1 50
byte 1 52
byte 1 115
byte 1 0
align 1
LABELV $900
byte 1 94
byte 1 53
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $894
byte 1 94
byte 1 53
byte 1 86
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 58
byte 1 10
byte 1 10
byte 1 0
align 1
LABELV $799
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 118
byte 1 99
byte 1 0
align 1
LABELV $781
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $736
byte 1 125
byte 1 0
align 1
LABELV $727
byte 1 94
byte 1 49
byte 1 101
byte 1 120
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 123
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $726
byte 1 123
byte 1 0
align 1
LABELV $717
byte 1 94
byte 1 49
byte 1 101
byte 1 120
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 103
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $716
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $713
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $710
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $700
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $699
byte 1 94
byte 1 49
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 44
byte 1 32
byte 1 109
byte 1 97
byte 1 120
byte 1 32
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 100
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $696
byte 1 94
byte 1 49
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $689
byte 1 48
byte 1 0
align 1
LABELV $688
byte 1 99
byte 1 103
byte 1 95
byte 1 116
byte 1 104
byte 1 105
byte 1 114
byte 1 100
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $677
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 112
byte 1 82
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $579
byte 1 64
byte 1 0
align 1
LABELV $576
byte 1 58
byte 1 0
align 1
LABELV $573
byte 1 61
byte 1 0
align 1
LABELV $546
byte 1 115
byte 1 118
byte 1 95
byte 1 109
byte 1 105
byte 1 110
byte 1 82
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $543
byte 1 103
byte 1 95
byte 1 100
byte 1 101
byte 1 108
byte 1 97
byte 1 103
byte 1 72
byte 1 105
byte 1 116
byte 1 115
byte 1 99
byte 1 97
byte 1 110
byte 1 0
align 1
LABELV $539
byte 1 103
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $535
byte 1 103
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $533
byte 1 109
byte 1 97
byte 1 112
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 98
byte 1 115
byte 1 112
byte 1 0
align 1
LABELV $530
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $529
byte 1 115
byte 1 118
byte 1 95
byte 1 109
byte 1 97
byte 1 120
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $527
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $525
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $523
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $521
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $519
byte 1 100
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $516
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $515
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $494
byte 1 103
byte 1 95
byte 1 68
byte 1 121
byte 1 110
byte 1 97
byte 1 109
byte 1 105
byte 1 99
byte 1 71
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 108
byte 1 101
byte 1 116
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $491
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 98
byte 1 102
byte 1 103
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $488
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 103
byte 1 117
byte 1 110
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $485
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $482
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 108
byte 1 97
byte 1 117
byte 1 110
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $479
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 103
byte 1 117
byte 1 110
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $476
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 108
byte 1 97
byte 1 117
byte 1 110
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $473
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $470
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $467
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 95
byte 1 103
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 108
byte 1 101
byte 1 116
byte 1 67
byte 1 121
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $448
byte 1 99
byte 1 103
byte 1 95
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 72
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $442
byte 1 114
byte 1 97
byte 1 116
byte 1 101
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $284
byte 1 94
byte 1 51
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $97
byte 1 94
byte 1 54
byte 1 68
byte 1 66
byte 1 71
byte 1 58
byte 1 67
byte 1 76
byte 1 84
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 45
byte 1 45
byte 1 32
byte 1 37
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $93
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $86
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 99
byte 1 97
byte 1 114
byte 1 114
byte 1 105
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $85
byte 1 114
byte 1 101
byte 1 116
byte 1 117
byte 1 114
byte 1 110
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $84
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $83
byte 1 99
byte 1 97
byte 1 109
byte 1 112
byte 1 0
align 1
LABELV $82
byte 1 112
byte 1 97
byte 1 116
byte 1 114
byte 1 111
byte 1 108
byte 1 0
align 1
LABELV $81
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $80
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $79
byte 1 111
byte 1 102
byte 1 102
byte 1 101
byte 1 110
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $78
byte 1 103
byte 1 101
byte 1 116
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
